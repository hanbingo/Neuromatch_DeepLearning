{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Copy of W1D5_Tutorial2","provenance":[{"file_id":"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/W1D5_Regularization/student/W1D5_Tutorial2.ipynb","timestamp":1628286448933}],"collapsed_sections":[],"toc_visible":true},"kernel":{"display_name":"Python 3","language":"python","name":"python3"},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"fb660a992cbe475fb3fc4433c7ca9035":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_d5b447275a0c4f75a8b880677f3e362d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_7bd42dfabd874441bd87cac6daed50ac","IPY_MODEL_e842cb584e794d8cb5e83e8b30defae3"]}},"d5b447275a0c4f75a8b880677f3e362d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7bd42dfabd874441bd87cac6daed50ac":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://youtube.com/watch?v=oQNdloKdysM\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://www.youtube.com/embed/oQNdloKdysM?fs=1&rel=0\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.YouTubeVideo at 0x7f6bf05c9e90>","image/jpeg":"\n"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_faebc21117034ab7b0aab20f20ad5bf7","_model_module":"@jupyter-widgets/output"}},"e842cb584e794d8cb5e83e8b30defae3":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://www.bilibili.com/video/BV19h41167H7\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://player.bilibili.com/player.html?bvid=BV19h41167H7&page=1?fs=1\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<__main__.BiliVideo at 0x7f6c56a98050>"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_7372f40d08ec423caef30f03bcc16a75","_model_module":"@jupyter-widgets/output"}},"faebc21117034ab7b0aab20f20ad5bf7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7372f40d08ec423caef30f03bcc16a75":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"84dc06e3d18b4cfbb8c1db29f4067d80":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_4c731000a59b493b99557a31f2383bbd","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e2e99ae31693471d9cf18b1d83b59b6a","IPY_MODEL_183fed938d7f4d2cb49a85f38eae76d0"]}},"4c731000a59b493b99557a31f2383bbd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e2e99ae31693471d9cf18b1d83b59b6a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_4f21930746c145b1b6fde69522a6e56d","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":150,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":150,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9673e55630144809a21af07516d801c3"}},"183fed938d7f4d2cb49a85f38eae76d0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_b35a879d0c924c46a56bdd9e117f013b","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 150/150 [01:00&lt;00:00,  2.47it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a836563bbd774e868f3485e20051da81"}},"4f21930746c145b1b6fde69522a6e56d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"9673e55630144809a21af07516d801c3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b35a879d0c924c46a56bdd9e117f013b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a836563bbd774e868f3485e20051da81":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e794e98cb84d42e49bef54b2ee0442e0":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_2b25a73fc4ee439ea46655d2a193590c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ed846735524943578eebf6f2477406fe","IPY_MODEL_77b69a43763b4a9a8a409cc116bafa00"]}},"2b25a73fc4ee439ea46655d2a193590c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ed846735524943578eebf6f2477406fe":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_21ff727627f843c191ced386e895efb5","_dom_classes":[],"description":"  0%","_model_name":"FloatProgressModel","bar_style":"danger","max":150,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1c5cb3179eaa49fe94431b2322fdb5b2"}},"77b69a43763b4a9a8a409cc116bafa00":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9f0e854e77db47dbae9c0f4bdff786ba","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/150 [00:00&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9d23077ed35b4874a1c8ab8ce2a75a25"}},"21ff727627f843c191ced386e895efb5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1c5cb3179eaa49fe94431b2322fdb5b2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9f0e854e77db47dbae9c0f4bdff786ba":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"9d23077ed35b4874a1c8ab8ce2a75a25":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"52860a6a2a8043a8babd1b7e56653d52":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7eed641e109547d2ad549e9d19c31f48","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_95e3ff40e006486f896c3aecd24a25f3","IPY_MODEL_79ca9d4761d344fbb1e9b656d8708f52"]}},"7eed641e109547d2ad549e9d19c31f48":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"95e3ff40e006486f896c3aecd24a25f3":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://youtube.com/watch?v=nm44FhjL3xc\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://www.youtube.com/embed/nm44FhjL3xc?fs=1&rel=0\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.YouTubeVideo at 0x7f6be0f802d0>","image/jpeg":"\n"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_1535ce0746e743bcb35bd95782b0eb23","_model_module":"@jupyter-widgets/output"}},"79ca9d4761d344fbb1e9b656d8708f52":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://www.bilibili.com/video/BV1Xw411d7Pz\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://player.bilibili.com/player.html?bvid=BV1Xw411d7Pz&page=1?fs=1\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<__main__.BiliVideo at 0x7f6be0f80dd0>"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_9c2aa3c11b904026afde6fb772d27328","_model_module":"@jupyter-widgets/output"}},"1535ce0746e743bcb35bd95782b0eb23":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9c2aa3c11b904026afde6fb772d27328":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5c3960141f5e418aaf5379bea0a26e02":{"model_module":"@jupyter-widgets/controls","model_name":"TextareaModel","state":{"_view_name":"TextareaView","style":"IPY_MODEL_4ad105f8d95d4efe9b885d1cfe759500","rows":null,"_dom_classes":[],"description":"","_model_name":"TextareaModel","placeholder":"Type something","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"If the initial model is not\ncomplex enough to correctly describe the data then no amount of regularization\nwill help as the model needs to get more complex to improve, not less.","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","continuous_update":true,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_73833a14f8e346418af35e4d02484513"}},"4ad105f8d95d4efe9b885d1cfe759500":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"73833a14f8e346418af35e4d02484513":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"750fa23db4f24fdc9cc7f3d49a52cd4f":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonModel","state":{"_view_name":"ButtonView","style":"IPY_MODEL_fba63e8b60084f27b7169bc3391b9d9f","_dom_classes":[],"description":"Submit!","_model_name":"ButtonModel","button_style":"","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","tooltip":"","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","layout":"IPY_MODEL_8ca8c0e1d73a44fab028dd152afc886c","_model_module":"@jupyter-widgets/controls","icon":""}},"fba63e8b60084f27b7169bc3391b9d9f":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","state":{"_view_name":"StyleView","_model_name":"ButtonStyleModel","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"button_color":null,"font_weight":"","_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"8ca8c0e1d73a44fab028dd152afc886c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a0831ee789d149d7a9d4dbe35a0e3e37":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_1719067fe56e463d8506fbed72676f82","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_b9de534b6850439b89f714b194d38141","IPY_MODEL_b3091c97fd694e7797153c95c88ab83a"]}},"1719067fe56e463d8506fbed72676f82":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b9de534b6850439b89f714b194d38141":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://youtube.com/watch?v=rjzlFvJhNqE\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://www.youtube.com/embed/rjzlFvJhNqE?fs=1&rel=0\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.YouTubeVideo at 0x7f6befb5c190>","image/jpeg":"\n"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_8f745a3651d347408a3718eb387bb615","_model_module":"@jupyter-widgets/output"}},"b3091c97fd694e7797153c95c88ab83a":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://www.bilibili.com/video/BV1nM4y1K7wP\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://player.bilibili.com/player.html?bvid=BV1nM4y1K7wP&page=1?fs=1\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<__main__.BiliVideo at 0x7f6befb61b50>"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_8674b5e0d30a4a769aca217b9bcd7d4c","_model_module":"@jupyter-widgets/output"}},"8f745a3651d347408a3718eb387bb615":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8674b5e0d30a4a769aca217b9bcd7d4c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"de75df9a300245da97a33ecefaed7499":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_054f75a45f7742c988e6b369ef25c8b9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_41628b5742fc492b843293a6823956ef","IPY_MODEL_a1c66ce4797c466f909d53c02db86faf"]}},"054f75a45f7742c988e6b369ef25c8b9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"41628b5742fc492b843293a6823956ef":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f7d2d1b03652405c864d46714669f241","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":350,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":350,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_e7ceed77d3f047bb8190db42cdd9d691"}},"a1c66ce4797c466f909d53c02db86faf":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c5b378277b2642ba9ab420208f24c56a","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 350/350 [03:20&lt;00:00,  1.75it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_aa52a99d08e144368f512e7063fc2de1"}},"f7d2d1b03652405c864d46714669f241":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"e7ceed77d3f047bb8190db42cdd9d691":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c5b378277b2642ba9ab420208f24c56a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"aa52a99d08e144368f512e7063fc2de1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"03d0c306e0874fb8bc7edfb6548427b1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_efff384ef1e24a7f855f402e72b6f3c8","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e126eb640ec24edb85d1fc300b3ea312","IPY_MODEL_d6189b920f9e40f1bdabbe7ecb237a56"]}},"efff384ef1e24a7f855f402e72b6f3c8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e126eb640ec24edb85d1fc300b3ea312":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f42a2f626487406fbf65e186f9e73e9e","_dom_classes":[],"description":" 34%","_model_name":"FloatProgressModel","bar_style":"","max":350,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":120,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b8f0947215eb4b299ac3d72d80c3a3b1"}},"d6189b920f9e40f1bdabbe7ecb237a56":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_45650c0c9fcb420ba79a3e7073de9edb","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 120/350 [01:10&lt;02:19,  1.65it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_244a974f285d4696aa778a492dfcd70c"}},"f42a2f626487406fbf65e186f9e73e9e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"b8f0947215eb4b299ac3d72d80c3a3b1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"45650c0c9fcb420ba79a3e7073de9edb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"244a974f285d4696aa778a492dfcd70c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bfe23aaf2092410ebe96b511879442e7":{"model_module":"@jupyter-widgets/controls","model_name":"TextareaModel","state":{"_view_name":"TextareaView","style":"IPY_MODEL_cf4c0a108c854084b7df50b543830a8f","rows":null,"_dom_classes":[],"description":"","_model_name":"TextareaModel","placeholder":"Type something","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Type your answer here and click on `Submit!`","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","continuous_update":true,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a028716e185a4bc7bfe7754430a3d381"}},"cf4c0a108c854084b7df50b543830a8f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a028716e185a4bc7bfe7754430a3d381":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"39ef31764f9a42d48d10adb4233b94e6":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonModel","state":{"_view_name":"ButtonView","style":"IPY_MODEL_0b3d4c1d3b664e828730ba56f03ac534","_dom_classes":[],"description":"Submit!","_model_name":"ButtonModel","button_style":"","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","tooltip":"","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","layout":"IPY_MODEL_c6a77a50331b44b8af4e1af44afbb79a","_model_module":"@jupyter-widgets/controls","icon":""}},"0b3d4c1d3b664e828730ba56f03ac534":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","state":{"_view_name":"StyleView","_model_name":"ButtonStyleModel","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"button_color":null,"font_weight":"","_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"c6a77a50331b44b8af4e1af44afbb79a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"execution":{},"id":"5PHZqhwlb0I9"},"source":["# Tutorial 2: Regularization techniques part 2\n","**Week 1, Day 5: Regularization**\n","\n","**By Neuromatch Academy**\n","\n","\n","__Content creators:__ Ravi Teja Konkimalla, Mohitrajhu Lingan Kumaraian, Kevin Machado Gamboa, Kelson Shilling-Scrivo, Lyle Ungar\n","\n","__Content reviewers:__ Piyush Chauhan, Siwei Bai, Kelson Shilling-Scrivo\n","\n","__Content editors:__ Roberto Guidotti, Spiros Chavlis\n","\n","__Production editors:__ Saeed Salehi, Spiros Chavlis"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"NHATfVT8b0JB"},"source":["**Our 2021 Sponsors, including Presenting Sponsor Facebook Reality Labs**\n","\n","<p align='center'><img src='https://github.com/NeuromatchAcademy/widgets/blob/master/sponsors.png?raw=True'/></p>"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"p7ZYMVVXb0JC"},"source":["---\n","# Tutorial Objectives\n","\n","1.   Regularization as shrinkage of overparameterized models: L1, L2\n","2.   Regularization by Dropout\n","3.   Regularization by Data Augmentation\n","4.   Perils of Hyper-Parameter Tuning\n","5.   Rethinking generalization"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"ZlajzkEZb0JD","colab":{"base_uri":"https://localhost:8080/","height":500},"executionInfo":{"status":"ok","timestamp":1628286474366,"user_tz":240,"elapsed":147,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"f3e5bcc7-a90e-4272-d983-e004e0f10bc7"},"source":["\n","# @title Tutorial slides\n","\n","# @markdown These are the slides for the videos in this tutorial\n","from IPython.display import IFrame\n","IFrame(src=f\"https://mfr.ca-1.osf.io/render?url=https://osf.io/7um6p/?direct%26mode=render%26action=download%26mode=render\", width=854, height=480)"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://mfr.ca-1.osf.io/render?url=https://osf.io/7um6p/?direct%26mode=render%26action=download%26mode=render\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.IFrame at 0x7f6c51294350>"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ififB-aIb0JF"},"source":["---\n","# Setup\n","Note that some of the code for today can take up to an hour to run. We have therefore \"hidden\" that code and shown the resulting outputs.\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"c1yXa7odb0JG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628286953923,"user_tz":240,"elapsed":6946,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"1f34437a-3e7c-4c39-f305-60b309ee2259"},"source":["# @title Install dependencies\n","!apt-get install -y ffmpeg --quiet\n","!pip install imageio-ffmpeg --quiet\n","\n","!pip install git+https://github.com/NeuromatchAcademy/evaltools --quiet\n","from evaltools.airtable import AirtableForm\n","\n","atform = AirtableForm('appn7VdPRseSoMXEG','W1D5_T2', 'https://portal.neuromatchacademy.org/api/redirect/to/a76f99c1-9005-4566-8bcd-bed4e53d21f1')"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Reading package lists...\n","Building dependency tree...\n","Reading state information...\n","ffmpeg is already the newest version (7:3.4.8-0ubuntu0.2).\n","0 upgraded, 0 newly installed, 0 to remove and 40 not upgraded.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{},"id":"wZmX8fHXb0JH","executionInfo":{"status":"ok","timestamp":1628286954327,"user_tz":240,"elapsed":409,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Imports\n","from __future__ import print_function\n","\n","import copy\n","import torch\n","import random\n","import pathlib\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.animation as animation\n","\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","\n","from torchvision import datasets, transforms\n","from torchvision.datasets import ImageFolder\n","from torch.optim.lr_scheduler import StepLR\n","\n","from tqdm.auto import tqdm\n","from IPython.display import HTML, display"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"5iB8F1Q9b0JI","executionInfo":{"status":"ok","timestamp":1628286492569,"user_tz":240,"elapsed":11,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Figure Settings\n","import ipywidgets as widgets\n","%matplotlib inline\n","%config InlineBackend.figure_format = 'retina'\n","plt.style.use(\"https://raw.githubusercontent.com/NeuromatchAcademy/content-creation/main/nma.mplstyle\")"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"kQzvsUqOb0JI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628286496840,"user_tz":240,"elapsed":4279,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"5ac9e95d-67f8-497e-8d2a-0d00dc5f166c"},"source":["# @title Loading Animal Faces data\n","import requests, os\n","from zipfile import ZipFile\n","\n","print(\"Start downloading and unzipping `AnimalFaces` dataset...\")\n","name = 'afhq'\n","fname = f\"{name}.zip\"\n","url = f\"https://osf.io/kgfvj/download\"\n","\n","if not os.path.exists(fname):\n","  r = requests.get(url, allow_redirects=True)\n","  with open(fname, 'wb') as fh:\n","    fh.write(r.content)\n","\n","  if os.path.exists(fname):\n","    with ZipFile(fname, 'r') as zfile:\n","      zfile.extractall(f\".\")\n","      os.remove(fname)\n","\n","print(\"Download completed.\")"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Start downloading and unzipping `AnimalFaces` dataset...\n","Download completed.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"EVWLZn-sb0JJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628286504983,"user_tz":240,"elapsed":8148,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"22bb4ceb-25eb-432d-c6a3-5fb4c310a422"},"source":["# @title Loading Animal Faces Randomized data\n","from IPython.display import clear_output\n","\n","print(\"Start downloading and unzipping `Randomized AnimalFaces` dataset...\")\n","\n","names = ['afhq_random_32x32', 'afhq_10_32x32']\n","urls = [\"https://osf.io/9sj7p/download\",\n","        \"https://osf.io/wvgkq/download\"]\n","\n","\n","for i, name in enumerate(names):\n","  url = urls[i]\n","  fname = f\"{name}.zip\"\n","\n","  if not os.path.exists(fname):\n","    r = requests.get(url, allow_redirects=True)\n","    with open(fname, 'wb') as fh:\n","      fh.write(r.content)\n","\n","    if os.path.exists(fname):\n","      with ZipFile(fname, 'r') as zfile:\n","        zfile.extractall(f\".\")\n","        os.remove(fname)\n","\n","print(\"Download completed.\")"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Start downloading and unzipping `Randomized AnimalFaces` dataset...\n","Download completed.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"nOIzuIBeb0JK","executionInfo":{"status":"ok","timestamp":1628286505116,"user_tz":240,"elapsed":137,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Plotting functions\n","\n","\n","def imshow(img):\n","  img = img / 2 + 0.5  # unnormalize\n","  npimg = img.numpy()\n","  plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","  plt.axis(False)\n","  plt.show()\n","\n","\n","def plot_weights(norm, labels, ws, title='Weight Size Measurement'):\n","  plt.figure(figsize=[8, 6])\n","  plt.title(title)\n","  plt.ylabel('Frobenius Norm Value')\n","  plt.xlabel('Model Layers')\n","  plt.bar(labels, ws)\n","  plt.axhline(y=norm,\n","              linewidth=1,\n","              color='r',\n","              ls='--',\n","              label='Total Model F-Norm')\n","  plt.legend()\n","  plt.show()\n","\n","\n","def visualize_data(dataloader):\n","\n","  for idx, (data,label) in enumerate(dataloader):\n","    plt.figure(idx)\n","    # Choose the datapoint you would like to visualize\n","    index = 22\n","\n","    # choose that datapoint using index and permute the dimensions\n","    # and bring the pixel values between [0,1]\n","    data = data[index].permute(1, 2, 0) * \\\n","           torch.tensor([0.5, 0.5, 0.5]) + \\\n","           torch.tensor([0.5, 0.5, 0.5])\n","\n","    # Convert the torch tensor into numpy\n","    data = data.numpy()\n","\n","    plt.imshow(data)\n","    plt.axis(False)\n","    image_class = classes[label[index].item()]\n","    print(f'The image belongs to : {image_class}')\n","\n","  plt.show()"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"80iKvhSeb0JL","executionInfo":{"status":"ok","timestamp":1628286505522,"user_tz":240,"elapsed":410,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Helper functions\n","\n","## Network Class - Animal Faces\n","class AnimalNet(nn.Module):\n","  def __init__(self):\n","    super(AnimalNet, self).__init__()\n","    self.fc1 = nn.Linear(3 * 32 * 32, 128)\n","    self.fc2 = nn.Linear(128, 32)\n","    self.fc3 = nn.Linear(32, 3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0], -1)\n","    x = F.relu(self.fc1(x))\n","    x = F.relu(self.fc2(x))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","\n","\n","# Simple Net\n","class Net(nn.Module):\n","  def __init__(self):\n","    super(Net, self).__init__()\n","\n","    self.fc1 = nn.Linear(1, 300)\n","    self.fc2 = nn.Linear(300, 500)\n","    self.fc3 = nn.Linear(500, 1)\n","\n","  def forward(self, x):\n","    x = F.leaky_relu(self.fc1(x))\n","    x = F.leaky_relu(self.fc2(x))\n","    output = self.fc3(x)\n","    return output\n","\n","\n","# Network Class - Animal Faces\n","class BigAnimalNet(nn.Module):\n","  def __init__(self):\n","    super(BigAnimalNet, self).__init__()\n","    self.fc1 = nn.Linear(3*32*32, 124)\n","    self.fc2 = nn.Linear(124, 64)\n","    self.fc3 = nn.Linear(64, 3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0],-1)\n","    x = F.leaky_relu(self.fc1(x))\n","    x = F.leaky_relu(self.fc2(x))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","\n","\n","def train(args, model, train_loader, optimizer, epoch,\n","          reg_function1=None, reg_function2=None, criterion=F.nll_loss):\n","  \"\"\"\n","  Trains the current inpur model using the data\n","  from Train_loader and Updates parameters for a single pass\n","  \"\"\"\n","\n","  device = args['device']\n","  model.train()\n","  for batch_idx, (data, target) in enumerate(train_loader):\n","    data, target = data.to(device), target.to(device)\n","    optimizer.zero_grad()\n","    output = model(data)\n","    # L1 regularization\n","    if reg_function2 is None and reg_function1 is not None:\n","      loss = criterion(output, target) + args['lambda1']*reg_function1(model)\n","    # L2 regularization\n","    elif reg_function1 is None and reg_function2 is not None:\n","      loss = criterion(output, target) + args['lambda2']*reg_function2(model)\n","    # No regularization\n","    elif reg_function1 is None and reg_function2 is None:\n","      loss = criterion(output, target)\n","    # Both L1 and L2 regularizations\n","    else:\n","      loss = criterion(output, target) + args['lambda1']*reg_function1(model) + args['lambda2']*reg_function2(model)\n","    loss.backward()\n","    optimizer.step()\n","\n","  return model\n","\n","\n","def test(model, test_loader, loader='Test', criterion=F.nll_loss,\n","         device='cpu'):\n","  \"\"\"\n","  Tests the current Model\n","  \"\"\"\n","  model.eval()\n","  test_loss = 0\n","  correct = 0\n","  with torch.no_grad():\n","    for data, target in test_loader:\n","      data, target = data.to(device), target.to(device)\n","      output = model(data)\n","      test_loss += criterion(output, target, reduction='sum').item()  # sum up batch loss\n","      pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n","      correct += pred.eq(target.view_as(pred)).sum().item()\n","\n","  test_loss /= len(test_loader.dataset)\n","  def __init__(self):\n","    super(BigAnimalNet, self).__init__()\n","    self.fc1 = nn.Linear(3*32*32, 124)\n","    self.fc2 = nn.Linear(124, 64)\n","    self.fc3 = nn.Linear(64, 3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0],-1)\n","    x = F.leaky_relu(self.fc1(x))\n","    x = F.leaky_relu(self.fc2(x))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","  return 100. * correct / len(test_loader.dataset)\n","\n","\n","def main(args, model, train_loader, val_loader, test_data,\n","         reg_function1=None, reg_function2=None, criterion=F.nll_loss):\n","  \"\"\"\n","  Trains the model with train_loader and tests the learned model using val_loader\n","  \"\"\"\n","\n","  device = args['device']\n","\n","  model = model.to(device)\n","  optimizer = optim.SGD(model.parameters(), lr=args['lr'], momentum=args['momentum'])\n","\n","  val_acc_list, train_acc_list,param_norm_list = [], [], []\n","  for epoch in tqdm(range(args['epochs'])):\n","    trained_model = train(args, model, train_loader, optimizer, epoch,\n","                          reg_function1=reg_function1,\n","                          reg_function2=reg_function2)\n","    train_acc = test(trained_model, train_loader, loader='Train', device=device)\n","    val_acc = test(trained_model, val_loader, loader='Val', device=device)\n","    param_norm = calculate_frobenius_norm(trained_model)\n","    train_acc_list.append(train_acc)\n","    val_acc_list.append(val_acc)\n","    param_norm_list.append(param_norm)\n","\n","  return val_acc_list, train_acc_list, param_norm_list, model\n","\n","\n","def calculate_frobenius_norm(model):\n","    norm = 0.0\n","    # Sum the square of all parameters\n","    for name,param in model.named_parameters():\n","        norm += torch.norm(param).data**2\n","    # Return a square root of the sum of squares of all the parameters\n","    return norm**0.5\n","\n","\n","def early_stopping_main(args, model, train_loader, val_loader, test_data):\n","\n","  device = args['device']\n","\n","  model = model.to(device)\n","  optimizer = optim.SGD(model.parameters(), lr=args['lr'], momentum=args['momentum'])\n","\n","  best_acc  = 0.0\n","  best_epoch = 0\n","\n","  # Number of successive epochs that you want to wait before stopping training process\n","  patience = 20\n","\n","  # Keps track of number of epochs during which the val_acc was less than best_acc\n","  wait = 0\n","\n","  val_acc_list, train_acc_list = [], []\n","  for epoch in tqdm(range(args['epochs'])):\n","    trained_model = train(args, model, device, train_loader, optimizer, epoch)\n","    train_acc = test(trained_model, train_loader, loader='Train', device=device)\n","    val_acc = test(trained_model, val_loader, loader='Val', device=device)\n","    if (val_acc > best_acc):\n","      best_acc = val_acc\n","      best_epoch = epoch\n","      best_model = copy.deepcopy(trained_model)\n","      wait = 0\n","    else:\n","      wait += 1\n","    if (wait > patience):\n","      print(f'early stopped on epoch: {epoch}')\n","      break\n","    train_acc_list.append(train_acc)\n","    val_acc_list.append(val_acc)\n","\n","  return val_acc_list, train_acc_list, best_model, best_epoch"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"vj-nvyMRb0JM","executionInfo":{"status":"ok","timestamp":1628286505526,"user_tz":240,"elapsed":10,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set random seed\n","# @markdown Executing `set_seed(seed=seed)` you are setting the seed\n","\n","# for DL its critical to set the random seed so that students can have a\n","# baseline to compare their results to expected results.\n","# Read more here: https://pytorch.org/docs/stable/notes/randomness.html\n","\n","# Call `set_seed` function in the exercises to ensure reproducibility.\n","import random\n","import torch\n","\n","def set_seed(seed=None, seed_torch=True):\n","  if seed is None:\n","    seed = np.random.choice(2 ** 32)\n","  random.seed(seed)\n","  np.random.seed(seed)\n","  if seed_torch:\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.benchmark = False\n","    torch.backends.cudnn.deterministic = True\n","\n","  print(f'Random seed {seed} has been set.')\n","\n","\n","# In case that `DataLoader` is used\n","def seed_worker(worker_id):\n","  worker_seed = torch.initial_seed() % 2**32\n","  np.random.seed(worker_seed)\n","  random.seed(worker_seed)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"6xc6CMK9b0JN","executionInfo":{"status":"ok","timestamp":1628287054078,"user_tz":240,"elapsed":147,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set device (GPU or CPU). Execute `set_device()`\n","# especially if torch modules used.\n","\n","# inform the user if the notebook uses GPU or CPU.\n","\n","def set_device():\n","  device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","  if device != \"cuda\":\n","    print(\"WARNING: For this notebook to perform best, \"\n","        \"if possible, in the menu under `Runtime` -> \"\n","        \"`Change runtime type.`  select `GPU` \")\n","  else:\n","    print(\"GPU is enabled in this notebook.\")\n","\n","  return device"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"Bwuywxrtb0JP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628286505528,"user_tz":240,"elapsed":9,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"83dabecf-af1f-4bac-98c3-88af3c4836e8"},"source":["SEED = 2021\n","set_seed(seed=SEED)\n","DEVICE = set_device()"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n","GPU is enabled in this notebook.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"V7uqKpgTb0JR","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"error","timestamp":1628287056110,"user_tz":240,"elapsed":280,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"a84541bb-0431-4bcb-dc7f-ce3119f35c83"},"source":["# @title Dataloaders for the Dataset\n","## Dataloaders for the Dataset\n","batch_size = 128\n","classes = ('cat', 'dog', 'wild')\n","\n","train_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","\n","\n","####################################################\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","\n","##Dataloaders for the  Original Dataset\n","img_train_data, img_val_data,_ = torch.utils.data.random_split(img_dataset,\n","                                                               [100, 100, 14430])\n","\n","#Creating train_loader and Val_loader\n","train_loader = torch.utils.data.DataLoader(img_train_data,\n","                                           batch_size=batch_size,\n","                                           worker_init_fn=seed_worker,\n","                                           num_workers=2,\n","                                           generator=g_seed)\n","val_loader = torch.utils.data.DataLoader(img_val_data,\n","                                         batch_size=1000,\n","                                         num_workers=2,\n","                                         worker_init_fn=seed_worker,\n","                                         generator=g_seed)\n","\n","#creating test dataset\n","test_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","img_test_dataset = ImageFolder(data_path/'val', transform=test_transform)\n","\n","\n","####################################################\n","\n","## Dataloaders for the  Random Dataset\n","\n","# splitting randomized data into training and validation data\n","data_path = pathlib.Path('.')/'afhq_random_32x32/afhq_random' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","random_img_train_data, random_img_val_data,_ = torch.utils.data.random_split(img_dataset, [100,100,14430])\n","\n","#Randomized train and validation dataloader\n","rand_train_loader = torch.utils.data.DataLoader(random_img_train_data,\n","                                                batch_size=batch_size,\n","                                                num_workers=2,\n","                                                worker_init_fn=seed_worker,\n","                                                generator=g_seed)\n","rand_val_loader = torch.utils.data.DataLoader(random_img_val_data,\n","                                              batch_size=1000,\n","                                              num_workers=2,\n","                                              worker_init_fn=seed_worker,\n","                                              generator=g_seed)\n","\n","####################################################\n","\n","## Dataloaders for the Partially Random Dataset\n","\n","# Splitting data between training and validation dataset for partially randomized data\n","data_path = pathlib.Path('.')/'afhq_10_32x32/afhq_10' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","partially_random_train_data, partially_random_val_data, _ = torch.utils.data.random_split(img_dataset, [100,100,14430])\n","\n","#Training and Validation loader for partially randomized data\n","partial_rand_train_loader = torch.utils.data.DataLoader(partially_random_train_data,\n","                                                        batch_size=batch_size,\n","                                                        num_workers=2,\n","                                                        worker_init_fn=seed_worker,\n","                                                        generator=g_seed)\n","partial_rand_val_loader = torch.utils.data.DataLoader(partially_random_val_data,\n","                                                      batch_size=1000,\n","                                                      num_workers=2,\n","                                                      worker_init_fn=seed_worker,\n","                                                      generator=g_seed)"],"execution_count":8,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-b245cad61807>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m####################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mg_seed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGenerator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mg_seed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmanual_seed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mSEED\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'SEED' is not defined"]}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"_dBojgXYb0JS"},"source":["---\n","# Section 1: L1 and L2 Regularization\n","\n","*Time estimate: ~30 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"CtXeDqX1b0JT","colab":{"base_uri":"https://localhost:8080/","height":578,"referenced_widgets":["fb660a992cbe475fb3fc4433c7ca9035","d5b447275a0c4f75a8b880677f3e362d","7bd42dfabd874441bd87cac6daed50ac","e842cb584e794d8cb5e83e8b30defae3","faebc21117034ab7b0aab20f20ad5bf7","7372f40d08ec423caef30f03bcc16a75"]},"executionInfo":{"status":"ok","timestamp":1628286505986,"user_tz":240,"elapsed":15,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"f7702209-6f5d-463e-995c-32f448bb9f98"},"source":["# @title Video 1: L1 and L2 regression\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV19h41167H7\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"oQNdloKdysM\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 1: L1 and L2 regression')\n","\n","display(out)"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"fb660a992cbe475fb3fc4433c7ca9035","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"lJxrUrMhb0JT"},"source":["Some of you might have already come across L1 and L2 regularization before in other courses. L1 and L2 are the most common types of regularization. These update the general cost function by adding another term known as the regularization term.\n","\n","***Cost function = Loss (say, binary cross entropy) + Regularization term***\n","\n","This regularization term makes the parameters smaller, giving simpler models that will overfit less."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"YZu5Weegb0JU"},"source":["Discuss among your teammates whether the above assumption is good or bad?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"m6VVdP5vb0JV"},"source":["## Section 1.1: Unregularized Model"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"mI4lBwl2b0JW","executionInfo":{"status":"ok","timestamp":1628286506136,"user_tz":240,"elapsed":157,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown #### Dataloaders for Regularization\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","\n","# Splitting dataset\n","reg_train_data, reg_val_data,_ = torch.utils.data.random_split(img_dataset,\n","                                                               [30, 100, 14500])\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","# Creating train_loader and Val_loader\n","reg_train_loader = torch.utils.data.DataLoader(reg_train_data,\n","                                               batch_size=batch_size,\n","                                               worker_init_fn=seed_worker,\n","                                               num_workers=2,\n","                                               generator=g_seed)\n","reg_val_loader = torch.utils.data.DataLoader(reg_val_data,\n","                                             batch_size=1000,\n","                                             worker_init_fn=seed_worker,\n","                                             num_workers=2,\n","                                             generator=g_seed)"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"xjB7fVFAb0JX"},"source":["Now let's train a model without any regularization and keep it aside as our benchmark for this section."]},{"cell_type":"code","metadata":{"execution":{},"id":"faGNzABnb0JX","colab":{"base_uri":"https://localhost:8080/","height":511,"referenced_widgets":["84dc06e3d18b4cfbb8c1db29f4067d80","4c731000a59b493b99557a31f2383bbd","e2e99ae31693471d9cf18b1d83b59b6a","183fed938d7f4d2cb49a85f38eae76d0","4f21930746c145b1b6fde69522a6e56d","9673e55630144809a21af07516d801c3","b35a879d0c924c46a56bdd9e117f013b","a836563bbd774e868f3485e20051da81"]},"executionInfo":{"status":"ok","timestamp":1628286579122,"user_tz":240,"elapsed":72990,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"9825bf61-d5bd-4235-bf87-d13e1663ab12"},"source":["# Set the arguments\n","args = {\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","\n","# Train the model\n","val_acc_unreg, train_acc_unreg, param_norm_unreg, _ = main(args,\n","                                                           model,\n","                                                           reg_train_loader,\n","                                                           reg_val_loader,\n","                                                           img_test_dataset)\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_unreg, label='Val Accuracy', c='red', ls='dashed')\n","plt.plot(train_acc_unreg, label='Train Accuracy', c='red', ls='solid')\n","plt.axhline(y=max(val_acc_unreg), c='green', ls='dashed')\n","plt.title('Unregularized Model')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()\n","print(f\"maximum Validation Accuracy reached: {max(val_acc_unreg)}\")"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"84dc06e3d18b4cfbb8c1db29f4067d80","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=150.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":413},"needs_background":"light"}},{"output_type":"stream","text":["maximum Validation Accuracy reached: 50.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"kBbphZ0Sb0JY"},"source":["## Section 1.2: L1 Regularization"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"v4JTQV6_b0JY"},"source":["L1 (or \"LASSO\") Regularization uses a penalty which is the sum of the absolute value of all the weights in the DLN, resulting in the following loss function ($L$ is the usual Cross Entropy loss):\n","\n","\\begin{equation}\n","L_R=L + \\lambda \\sum \\left| w^{(r)}_{ij} \\right|\n","\\end{equation}\n","\n","where $r$ denotes the layer, and $ij$ the specific weight in that layer.\n","\n","At a high level, L1 Regularization is similar to L2 Regularization since it leads to smaller weights (you will see the analogy in the next subsection). It results in the following weight update equation when using Stochastic Gradient Descent:\n","\n","\\begin{equation}\n","w^{(r)}_{ij}←w^{(r)}_{ij}−\\eta \\lambda \\text{sgn}\\left(w^{(r)}_{ij}\\right)−\\eta \\frac{\\partial L}{\\partial w_{ij}^{(r)}} \n","\\end{equation}\n","\n","where  $\\text{sgn}(\\cdot)$ is the sign function, such that\n","\n","\\begin{equation}\n","\\text{sgn}(w) = \n","\\left\\{\n","  \\begin{array}{ll}\n","  +1 & \\mbox{if  } w > 0 \\\\\n","  -1 & \\mbox{if  } w < 0 \\\\\n","  0 & \\mbox{if  } w = 0\n","  \\end{array}\n","\\right.\n","\\end{equation}"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"JF103Holb0JZ"},"source":["### Coding Exercise 1.1: L1 Regularization\n","\n","Write a function which calculates the L1 norm of all the tensors of a Pytorch model."]},{"cell_type":"code","metadata":{"execution":{},"id":"UXxjkULQb0JZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628286579124,"user_tz":240,"elapsed":82,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"f811abee-daf4-4b0d-a85a-6360bdf7f12a"},"source":["def l1_reg(model):\n","  \"\"\"\n","    Inputs: Pytorch model\n","    This function calculates the l1 norm of the all the tensors in the model\n","  \"\"\"\n","  l1 = 0.0\n","  ####################################################################\n","  # Fill in all missing code below (...),\n","  # then remove or comment the line below to test your function\n","  raise NotImplementedError(\"Complete the l1_reg function\")\n","  ####################################################################\n","  for param in model.parameters():\n","    l1 += ...\n","\n","  return l1\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 1.1: L1 Regularization')\n","\n","set_seed(seed=SEED)\n","## uncomment to test\n","# net = nn.Linear(20, 20)\n","# print(f\"L1 norm of the model: {l1_reg(net)}\")"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"3Y65Wa_Tb0Ja"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_f9f318de.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"aKAZmg09b0Jb"},"source":["```\n","Random seed 2021 has been set.\n","L1 norm of the model: 48.445133209228516\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"NsIIcnWCb0Jc"},"source":["Now, let's train a classifier which uses L1 regularization. Tune the hyperparameter `lambda1` such that the validation accuracy is higher than that of the unregularized model."]},{"cell_type":"code","metadata":{"execution":{},"id":"XWxG1Odeb0Jc","colab":{"base_uri":"https://localhost:8080/","height":412,"referenced_widgets":["e794e98cb84d42e49bef54b2ee0442e0","2b25a73fc4ee439ea46655d2a193590c","ed846735524943578eebf6f2477406fe","77b69a43763b4a9a8a409cc116bafa00","21ff727627f843c191ced386e895efb5","1c5cb3179eaa49fe94431b2322fdb5b2","9f0e854e77db47dbae9c0f4bdff786ba","9d23077ed35b4874a1c8ab8ce2a75a25"]},"executionInfo":{"status":"error","timestamp":1628286579569,"user_tz":240,"elapsed":523,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"ecd9ce8e-4277-4a0d-c342-dd75e70fc86e"},"source":["# Set the arguments\n","args1 = {\n","    'test_batch_size': 1000,\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","    'lambda1': 0.001  # <<<<<<<< Tune the hyperparameter lambda\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","\n","# Train the model\n","val_acc_l1reg, train_acc_l1reg, param_norm_l1reg, _ = main(args1,\n","                                                           model,\n","                                                           reg_train_loader,\n","                                                           reg_val_loader,\n","                                                           img_test_dataset,\n","                                                           reg_function1=l1_reg)\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_l1reg, label='Val Accuracy L1 Regularized',\n","         c='red', ls='dashed')\n","plt.plot(train_acc_l1reg, label='Train Accuracy L1 regularized',\n","         c='red', ls='solid')\n","plt.axhline(y=max(val_acc_l1reg), c='green', ls='dashed')\n","plt.title('L1 regularized model')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()\n","print(f\"maximum Validation Accuracy reached: {max(val_acc_l1reg)}\")"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e794e98cb84d42e49bef54b2ee0442e0","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=150.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"error","ename":"NotImplementedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-644781a4b5e7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m                                                            \u001b[0mreg_val_loader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m                                                            \u001b[0mimg_test_dataset\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m                                                            reg_function1=l1_reg)\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# Train and Test accuracy plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-8-3cd7c0e52c2a>\u001b[0m in \u001b[0;36mmain\u001b[0;34m(args, model, train_loader, val_loader, test_data, reg_function1, reg_function2, criterion)\u001b[0m\n\u001b[1;32m    130\u001b[0m     trained_model = train(args, model, train_loader, optimizer, epoch,\n\u001b[1;32m    131\u001b[0m                           \u001b[0mreg_function1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreg_function1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m                           reg_function2=reg_function2)\n\u001b[0m\u001b[1;32m    133\u001b[0m     \u001b[0mtrain_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrained_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Train'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0mval_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrained_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Val'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-8-3cd7c0e52c2a>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(args, model, train_loader, optimizer, epoch, reg_function1, reg_function2, criterion)\u001b[0m\n\u001b[1;32m     66\u001b[0m     \u001b[0;31m# L1 regularization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreg_function2\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mreg_function1\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 68\u001b[0;31m       \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'lambda1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mreg_function1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     69\u001b[0m     \u001b[0;31m# L2 regularization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mreg_function1\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mreg_function2\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-16-8b0582790ba2>\u001b[0m in \u001b[0;36ml1_reg\u001b[0;34m(model)\u001b[0m\n\u001b[1;32m      8\u001b[0m   \u001b[0;31m# Fill in all missing code below (...),\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0;31m# then remove or comment the line below to test your function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Complete the l1_reg function\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m   \u001b[0;31m####################################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mparam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotImplementedError\u001b[0m: Complete the l1_reg function"]}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ypvOrX32b0Jg"},"source":["What value of `lambda1` hyperparameter, worked for L1 Regularization? (Note that the $\\lambda$ in the equations is the `lambda1` in the code for clarity)"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"HXSgiRyob0Jj"},"source":["## Section 1.3: L2 / Ridge Regularization"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"1nKqJjFLb0Jm"},"source":["L2 Regularization, sometimes referred to as “Weight Decay”, is widely used. It works by adding a quadratic penalty term to the Cross Entropy Loss Function $L$, which results in a new Loss Function $L_R$  given by:\n","\n","\\begin{equation}\n","L_R = L + \\lambda \\sum \\left( w^{(r)}_{ij} \\right)^2\n","\\end{equation}\n","\n","where, again, $r$ denotes the layer, and $ij$ the specific weight in that layer.\n","\n","In order to get further insight into L2 Regularization, we investigate its effect on the Gradient Descent based update equations for the weight and bias parameters. Taking the derivative on both sides of the above equation, we obtain\n","\n","\\begin{equation}\n","\\frac{\\partial L_R}{\\partial w^{(r)}_{ij}}=\\frac{\\partial L}{\\partial w^{(r)}_{ij}} + 2\\lambda w^{(r)}_{ij}\n","\\end{equation}\n","\n","Thus the weight update rule becomes:\n","\n","\\begin{equation}\n","w^{(r)}_{ij}←w^{(r)}_{ij}−η\\frac{\\partial L}{\\partial w^{(r)}_{ij}}−2 \\eta \\lambda w^{(r)}_{ij}=(1−2 \\eta \\lambda)w^{(r)}_{ij} − \\eta \\frac{\\partial L}{\\partial w^{(r)}_{ij}}\n","\\end{equation}\n","\n","where, $\\eta$ is learning rate."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"5o4lak99b0Jn"},"source":["### Coding Exercise 1.2: L2 Regularization\n","\n","Write a function which calculates the L2 norm of all the tensors of a Pytorch model. (What did we call this before?)"]},{"cell_type":"code","metadata":{"execution":{},"id":"7OUFcJElb0Jo","executionInfo":{"status":"aborted","timestamp":1628286579536,"user_tz":240,"elapsed":177,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["def l2_reg(model):\n","\n","  \"\"\"\n","    Inputs: Pytorch model\n","    This function calculates the l2 norm of the all the tensors in the model\n","  \"\"\"\n","\n","  l2 = 0.0\n","  ####################################################################\n","  # Fill in all missing code below (...),\n","  # then remove or comment the line below to test your function\n","  raise NotImplementedError(\"Complete the l2_reg function\")\n","  ####################################################################\n","  for param in model.parameters():\n","    l2 += ...\n","\n","  return l2\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 1.2: L2 Regularization')\n","\n","set_seed(SEED)\n","## uncomment to test\n","# net = nn.Linear(20, 20)\n","# print(f\"L2 norm of the model: {l2_reg(net)}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"tNpLZDeOb0Jp"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_8505e24d.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"W5-ByztCb0Jq"},"source":["```\n","Random seed 2021 has been set.\n","L2 norm of the model: 7.328375816345215\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"aS91sQeEb0Jq"},"source":["Now we'll train a classifier which uses L2 regularization. Tune the hyperparameter `lambda` such that the val accuracy is higher than that of the unregularized model."]},{"cell_type":"code","metadata":{"execution":{},"id":"6dS2npTCb0Jr","executionInfo":{"status":"aborted","timestamp":1628286579546,"user_tz":240,"elapsed":31,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Set the arguments\n","args2 = {\n","    'test_batch_size': 1000,\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","    'lambda2': 0.001  # <<<<<<<< Tune the hyperparameter lambda\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","\n","# Train the model\n","val_acc_l2reg, train_acc_l2reg, param_norm_l2reg, model = main(args2,\n","                                                               model,\n","                                                               train_loader,\n","                                                               val_loader,\n","                                                               img_test_dataset,\n","                                                               reg_function2=l2_reg)\n","\n","## Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_l2reg, label='Val Accuracy L2 regularized',\n","         c='red', ls='dashed')\n","plt.plot(train_acc_l2reg, label='Train Accuracy L2 regularized',\n","         c='red', ls='solid')\n","plt.axhline(y=max(val_acc_l2reg), c='green', ls='dashed')\n","plt.title('L2 Regularized Model')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()\n","print(f\"maximum Validation Accuracy reached: {max(val_acc_l2reg)}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"2T7tYKocb0Js"},"source":["What value `lambda2` worked for L2 Regularization? (Note that the $\\lambda$ in the equations is the `lambda2` in the code for clarity)"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"BqVER3o0b0Ju"},"source":["Now, let's run a model with both L1 and L2 regularization terms."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"1biluXPnb0Jv","executionInfo":{"status":"aborted","timestamp":1628286579547,"user_tz":240,"elapsed":31,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown Visualize all of them together (Run Me!)\n","\n","# @markdown `lambda1=0.001` and `lambda2=0.001`\n","\n","args3 = {\n","    'test_batch_size': 1000,\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","    'lambda1': 0.001,\n","    'lambda2': 0.001\n","}\n","\n","# Intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","val_acc_l1l2reg, train_acc_l1l2reg, param_norm_l1l2reg, _ = main(args3,\n","                                                                 model,\n","                                                                 train_loader,\n","                                                                 val_loader,\n","                                                                 img_test_dataset,\n","                                                                 reg_function1=l1_reg,\n","                                                                 reg_function2=l2_reg)\n","\n","plt.figure()\n","\n","plt.plot(val_acc_l2reg, c='red', ls='dashed')\n","plt.plot(train_acc_l2reg,\n","         label=f\"L2 regularized, $\\lambda_2$={args2['lambda2']}\",\n","         c='red', ls='solid')\n","plt.axhline(y=max(val_acc_l2reg), c='red', ls='dashed')\n","\n","plt.plot(val_acc_l1reg, c='green', ls = 'dashed')\n","plt.plot(train_acc_l1reg,\n","         label=f\"L1 regularized, $\\lambda_1$={args1['lambda1']}\",\n","         c='green', ls='solid')\n","plt.axhline(y=max(val_acc_l1reg), c='green', ls='dashed')\n","\n","plt.plot(val_acc_unreg, c='blue', ls = 'dashed')\n","plt.plot(train_acc_unreg,\n","         label='Unregularized', c='blue', ls='solid')\n","plt.axhline(y=max(val_acc_unreg), c='blue', ls='dashed')\n","\n","plt.plot(val_acc_l1l2reg, c='orange', ls='dashed')\n","plt.plot(train_acc_l1l2reg,\n","         label=f\"L1+L2 regularized, $\\lambda_1$={args3['lambda1']}, $\\lambda_2$={args3['lambda2']}\",\n","         c='orange', ls='solid')\n","plt.axhline(y=max(val_acc_l1l2reg), c='orange', ls = 'dashed')\n","\n","plt.xlabel('epoch')\n","plt.ylabel('Accuracy (%)')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"W6bziAk2b0Jw"},"source":["Now, let's visualize what these different regularization does to the parameters of the model. We observe the effect by computing the size (technically, the Frobenius norm) of the model parameters"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"AyBUjU0db0Jx","executionInfo":{"status":"aborted","timestamp":1628286579548,"user_tz":240,"elapsed":32,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown #### Visualize Norm of the Models (Train Me!)\n","plt.figure()\n","plt.plot(param_norm_unreg, label='Unregularized', c='blue')\n","plt.plot(param_norm_l1reg, label='L1 Regularized', c='green')\n","plt.plot(param_norm_l2reg, label='L2 Regularized', c='red')\n","plt.plot(param_norm_l1l2reg, label='L1+L2 Regularized', c='orange')\n","plt.xlabel('epoch')\n","plt.ylabel('Parameter Norms')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"qB0Qf8PRb0Jx"},"source":["In the above plots, you should have seen that even after the model achieves 100% train accuracy the val accuracies are fluctuating. This suggests that the model is still trying to learn something. Why would this be the case?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"vNQ_UIIUb0Jy"},"source":["---\n","# Section 2: Dropout\n","\n","*Time estimate: ~25 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"RdTfT4cyb0Jy","executionInfo":{"status":"aborted","timestamp":1628286579549,"user_tz":240,"elapsed":32,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Video 2: Dropout\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1gU4y1G7V2\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"UZfUzawej3A\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 2: Dropout')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"jUQLz1uGb0Jz"},"source":["In dropout, we literally drop out (zero out) some neurons during training. Throughout training, on each iteration, standard dropout zeros out some fraction (usually 1/2) of the nodes in each layer before calculating the subsequent layer. Randomly selecting different subsets to dropout introduces noise into the process and reduces overfitting.\n","\n","<center><img src=\"https://d2l.ai/_images/dropout2.svg\" alt=\"Dropout\" width=\"600\"/></center>\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"AcJYIcXWb0J0"},"source":["Now let's revisit the toy dataset that we generated above to visualize how the dropout stabilizes training on a noisy dataset. We will slightly modify the architecture we used above to add dropout layers."]},{"cell_type":"code","metadata":{"execution":{},"id":"dcbwO4EMb0J0","executionInfo":{"status":"aborted","timestamp":1628286579550,"user_tz":240,"elapsed":33,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Network Class - 2D\n","class NetDropout(nn.Module):\n","  def __init__(self):\n","    super(NetDropout, self).__init__()\n","\n","    self.fc1 = nn.Linear(1, 300)\n","    self.fc2 = nn.Linear(300, 500)\n","    self.fc3 = nn.Linear(500, 1)\n","    # We add two dropout layers\n","    self.dropout1 = nn.Dropout(0.4)\n","    self.dropout2 = nn.Dropout(0.2)\n","\n","  def forward(self, x):\n","    x = F.leaky_relu(self.dropout1(self.fc1(x)))\n","    x = F.leaky_relu(self.dropout2(self.fc2(x)))\n","    output = self.fc3(x)\n","    return output"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"g2LVIf1_b0J0","executionInfo":{"status":"aborted","timestamp":1628286579551,"user_tz":240,"elapsed":34,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown #### Run to train the default network\n","set_seed(seed=SEED)\n","# creating train data\n","X = torch.rand((10, 1))\n","X.sort(dim = 0)\n","Y = 2*X + 2*torch.empty((X.shape[0], 1)).normal_(mean=0, std=1)  # adding small error in the data\n","\n","X = X.unsqueeze_(1)\n","Y = Y.unsqueeze_(1)\n","\n","# creating test dataset\n","X_test = torch.linspace(0, 1, 40)\n","X_test = X_test.reshape((40, 1, 1))\n","\n","# train the network on toy dataset\n","model = Net()\n","criterion = nn.MSELoss()\n","optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","max_epochs = 10000\n","iters = 0\n","\n","running_predictions = np.empty((40, (int)(max_epochs/500 + 1)))\n","\n","train_loss = []\n","test_loss = []\n","model_norm = []\n","\n","for epoch in tqdm(range(max_epochs)):\n","\n","  #training\n","  model_norm.append(calculate_frobenius_norm(model))\n","  model.train()\n","  optimizer.zero_grad()\n","  predictions = model(X)\n","  loss = criterion(predictions,Y)\n","  loss.backward()\n","  optimizer.step()\n","\n","  train_loss.append(loss.data)\n","  model.eval()\n","  Y_test = model(X_test)\n","  loss = criterion(Y_test, 2*X_test)\n","  test_loss.append(loss.data)\n","\n","  if (epoch % 500 == 0 or epoch == max_epochs - 1):\n","    running_predictions[:, iters] = Y_test[:, 0, 0].detach().numpy()\n","    iters += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"VIsQoG4Bb0J1","executionInfo":{"status":"aborted","timestamp":1628286579552,"user_tz":240,"elapsed":34,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# train the network on toy dataset\n","\n","# Intialize the model\n","set_seed(seed=SEED)\n","model = NetDropout()\n","criterion = nn.MSELoss()\n","optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","max_epochs = 10000\n","iters = 0\n","\n","running_predictions_dp = np.empty((40, (int)(max_epochs / 500)))\n","\n","train_loss_dp = []\n","test_loss_dp = []\n","model_norm_dp = []\n","\n","for epoch in tqdm(range(max_epochs)):\n","\n","  # training\n","  model_norm_dp.append(calculate_frobenius_norm(model))\n","  model.train()\n","  optimizer.zero_grad()\n","  predictions = model(X)\n","  loss = criterion(predictions, Y)\n","  loss.backward()\n","  optimizer.step()\n","\n","  train_loss_dp.append(loss.data)\n","  model.eval()\n","  Y_test = model(X_test)\n","  loss = criterion(Y_test, 2*X_test)\n","  test_loss_dp.append(loss.data)\n","\n","  if (epoch % 500 == 0 or epoch == max_epochs):\n","    running_predictions_dp[:, iters] = Y_test[:, 0, 0].detach().numpy()\n","    iters += 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"wlxKJd4Ob0J1"},"source":["Now that we have finished training, let's see how the model has evolved over the training process."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"ft98_P4fb0J1","executionInfo":{"status":"aborted","timestamp":1628286579553,"user_tz":240,"elapsed":35,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown Animation! (Run Me!)\n","set_seed(seed=SEED)\n","\n","fig = plt.figure(figsize=(8, 6))\n","ax = plt.axes()\n","def frame(i):\n","  ax.clear()\n","  ax.scatter(X[:, 0, :].numpy(), Y[:, 0, :].numpy())\n","  plot = ax.plot(X_test[:, 0, :].detach().numpy(),\n","                 running_predictions_dp[:, i])\n","  title = f\"Epoch: {i*500}\"\n","  plt.title(title)\n","  ax.set_xlabel(\"X axis\")\n","  ax.set_ylabel(\"Y axis\")\n","  return plot\n","\n","\n","anim = animation.FuncAnimation(fig, frame, frames=range(20),\n","                               blit=False, repeat=False,\n","                               repeat_delay=10000)\n","html_anim = HTML(anim.to_html5_video());\n","plt.close()\n","display(html_anim)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"9qC9-_9zb0J2","executionInfo":{"status":"aborted","timestamp":1628286579554,"user_tz":240,"elapsed":36,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown Plot the train and test losses\n","plt.figure()\n","plt.plot(test_loss_dp, label='test loss dropout', c='blue', ls='dashed')\n","plt.plot(test_loss, label='test loss', c='red', ls='dashed')\n","plt.ylabel('loss')\n","plt.xlabel('epochs')\n","plt.title('dropout vs without dropout')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"Au_RFMeDb0J2","executionInfo":{"status":"aborted","timestamp":1628286579554,"user_tz":240,"elapsed":35,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown Plot the train and test losses\n","plt.figure()\n","plt.plot(train_loss_dp, label='train loss dropout', c='blue', ls='dashed')\n","plt.plot(train_loss, label='train loss', c='red', ls='dashed')\n","plt.ylabel('loss')\n","plt.xlabel('epochs')\n","plt.title('dropout vs without dropout')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"LVs1XKgob0J3","executionInfo":{"status":"aborted","timestamp":1628286579555,"user_tz":240,"elapsed":36,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown Plot model weights with epoch\n","plt.figure()\n","plt.plot(model_norm_dp, label='dropout')\n","plt.plot(model_norm, label='no dropout')\n","plt.ylabel('norm of the model')\n","plt.xlabel('epochs')\n","plt.legend()\n","plt.title('Size of the model vs Epochs')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"sWnJY4Vnb0J3"},"source":["Do you think this performed better than the initial model?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"qvEHnfw7b0J3"},"source":["## Section 2.1: Dropout Implementation Caveats"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"4DOGFjHOb0J3"},"source":["\n","*  Dropout is used only during training, during testing the complete model weights are used and hence it is important to use model.eval() before testing the model. \n","\n","* Dropout reduces the capacity of the model during training and hence as a general practice wider networks are used when using dropout. If you are using a dropout with a random probability of 0.5 then you might want to double the number of hidden neurons in that layer."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"9s67Ujznb0J4"},"source":["Now, let's see how dropout fares on the Animal Faces Dataset. We first modify the existing model to include dropout and then train the model."]},{"cell_type":"code","metadata":{"execution":{},"id":"QeyezGmxb0J4","executionInfo":{"status":"aborted","timestamp":1628286579556,"user_tz":240,"elapsed":37,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Network Class - Animal Faces\n","class AnimalNetDropout(nn.Module):\n","  def __init__(self):\n","    super(AnimalNetDropout, self).__init__()\n","    self.fc1 = nn.Linear(3*32*32, 248)\n","    self.fc2 = nn.Linear(248, 210)\n","    self.fc3 = nn.Linear(210, 3)\n","    self.dropout1 = nn.Dropout(p=0.5)\n","    self.dropout2 = nn.Dropout(p=0.3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0], -1)\n","    x = F.leaky_relu(self.dropout1(self.fc1(x)))\n","    x = F.leaky_relu(self.dropout2(self.fc2(x)))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"RjTXqZlNb0J4","executionInfo":{"status":"aborted","timestamp":1628286579557,"user_tz":240,"elapsed":37,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Set the arguments\n","args = {\n","    'test_batch_size': 1000,\n","    'epochs': 200,\n","    'lr': 5e-3,\n","    'batch_size': 32,\n","    'momentum': 0.9,\n","    'device': DEVICE,\n","    'log_interval': 100\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNetDropout()\n","\n","# Train the model with Dropout\n","val_acc_dropout, train_acc_dropout, _, model_dp = main(args,\n","                                                       model,\n","                                                       train_loader,\n","                                                       val_loader,\n","                                                       img_test_dataset)\n","\n","# intialize the BigAnimalNet model\n","set_seed(seed=SEED)\n","model = BigAnimalNet()\n","\n","# Train the model\n","val_acc_big, train_acc_big, _, model_big = main(args,\n","                                                model,\n","                                                train_loader,\n","                                                val_loader,\n","                                                img_test_dataset)\n","\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_big, label='Val - Big', c='blue', ls='dashed')\n","plt.plot(train_acc_big, label='Train - Big', c='blue', ls='solid')\n","plt.plot(val_acc_dropout, label='Val - DP', c='magenta', ls='dashed')\n","plt.plot(train_acc_dropout, label='Train - DP', c='magenta', ls='solid')\n","plt.title('Dropout')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"4TH473fTb0J5"},"source":["When do you think dropouts can perform bad and do you think their placement within a model matters?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"VDPE-WeVb0J5"},"source":["---\n","# Section 3: Data Augmentation\n","\n","*Time estimate: ~15 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"JK1PUA4Hb0J5","colab":{"base_uri":"https://localhost:8080/","height":578,"referenced_widgets":["52860a6a2a8043a8babd1b7e56653d52","7eed641e109547d2ad549e9d19c31f48","95e3ff40e006486f896c3aecd24a25f3","79ca9d4761d344fbb1e9b656d8708f52","1535ce0746e743bcb35bd95782b0eb23","9c2aa3c11b904026afde6fb772d27328"]},"executionInfo":{"status":"ok","timestamp":1628286596413,"user_tz":240,"elapsed":141,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"43f6f0c7-2bd0-4e9d-b89a-9c6552670dee"},"source":["# @title Video 3: Data Augmentation\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Xw411d7Pz\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"nm44FhjL3xc\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 3: Data Augmentation')\n","\n","display(out)"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"52860a6a2a8043a8babd1b7e56653d52","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"VOIcjx_0b0J5"},"source":["Data augmentation is often used to increase the number of training samples. Now we will explore the effects of data augmentation on regularization. Here regularization is achieved by adding noise into training data after every epoch.\n","\n","Pytorch's torchvision module provides a few built-in data augmentation techniques, which we can use on image datasets. Some of the techniques we most frequently use are:\n","\n","\n","*   Random Crop\n","*   Random Rotate\n","*   Vertical Flip\n","*   Horizontal Flip\n","\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"4-efNXXpb0J5","executionInfo":{"status":"ok","timestamp":1628286599282,"user_tz":240,"elapsed":134,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown ####  Data Loader without Data Augmentation\n","\n","# For reproducibility\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","\n","train_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","\n","# Splitting dataset\n","img_train_data, img_val_data,_ = torch.utils.data.random_split(img_dataset, [250,100,14280])\n","\n","# Creating train_loader and Val_loader\n","train_loader = torch.utils.data.DataLoader(img_train_data,\n","                                           batch_size=batch_size,\n","                                           num_workers=2,\n","                                           worker_init_fn=seed_worker,\n","                                           generator=g_seed)\n","val_loader = torch.utils.data.DataLoader(img_val_data,\n","                                         batch_size=1000,\n","                                         num_workers=2,\n","                                         worker_init_fn=seed_worker,\n","                                         generator=g_seed)"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"9AnCYUYDb0J6"},"source":["Define a DataLoader using [torchvision.transforms](https://pytorch.org/docs/stable/torchvision/transforms.html) which randomly augments the data for us. "]},{"cell_type":"code","metadata":{"execution":{},"id":"bevWXR4zb0J6","executionInfo":{"status":"aborted","timestamp":1628286579559,"user_tz":240,"elapsed":38,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Data Augmentation using transforms\n","new_transforms = transforms.Compose([\n","                                     transforms.RandomHorizontalFlip(p=0.1),\n","                                     transforms.RandomVerticalFlip(p=0.1),\n","                                     transforms.ToTensor(),\n","                                     transforms.Normalize((0.5, 0.5, 0.5),\n","                                                          (0.5, 0.5, 0.5))\n","                                     ])\n","\n","data_path = pathlib.Path('.')/'afhq'  # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=new_transforms)\n","# Splitting dataset\n","new_train_data, _,_ = torch.utils.data.random_split(img_dataset,\n","                                                    [250, 100, 14280])\n","\n","# For reproducibility\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","# Creating train_loader and Val_loader\n","new_train_loader = torch.utils.data.DataLoader(new_train_data,\n","                                               batch_size=batch_size,\n","                                               worker_init_fn=seed_worker,\n","                                               generator=g_seed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"9UZfSrY-b0J7","executionInfo":{"status":"aborted","timestamp":1628286579560,"user_tz":240,"elapsed":39,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Set the arguments\n","args = {\n","    'epochs': 250,\n","    'lr': 1e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","}\n","\n","# Intialize the model\n","set_seed(seed=SEED)\n","model_aug = AnimalNet()\n","\n","# train the model\n","val_acc_dataaug, train_acc_dataaug, param_norm_datadug, _ = main(args,\n","                                                                 model_aug,\n","                                                                 new_train_loader,\n","                                                                 val_loader,\n","                                                                 img_test_dataset)\n","# Intialize the model\n","set_seed(seed=SEED)\n","model_pure = AnimalNet()\n","\n","val_acc_pure, train_acc_pure, param_norm_pure, _, = main(args,\n","                                                         model_pure,\n","                                                         train_loader,\n","                                                         val_loader,\n","                                                         img_test_dataset)\n","\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_pure, label='Val Accuracy Pure',\n","         c='red', ls='dashed')\n","plt.plot(train_acc_pure, label='Train Accuracy Pure',\n","         c='red', ls='solid')\n","plt.plot(val_acc_dataaug, label='Val Accuracy data augment',\n","         c='blue', ls='dashed')\n","plt.plot(train_acc_dataaug, label='Train Accuracy data augment',\n","         c='blue', ls='solid')\n","plt.axhline(y=max(val_acc_pure), c='red', ls='dashed')\n","plt.axhline(y=max(val_acc_dataaug), c='blue', ls='dashed')\n","plt.title('Data Augmentation')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"WIaEuZKbb0J7","executionInfo":{"status":"aborted","timestamp":1628286579561,"user_tz":240,"elapsed":40,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Plot together: without and with augmenetation\n","plt.figure()\n","plt.plot(param_norm_pure, c='red', label='Without Augmentation')\n","plt.plot(param_norm_datadug, c='blue', label='With Augmentation')\n","plt.title('Norm of parameters as a function of training epoch')\n","plt.xlabel('epoch')\n","plt.ylabel('Norm of model parameters')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"3AnrB_A4b0J8"},"source":["Can you think of more ways of augmenting training data? (Think of other problems beyond object recogition.)"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"HOt-Mnevb0J8"},"source":["### Think! 3.1: Thought Question\n","Why does it work better to regularize an overparameterized ANN than to start with a smaller one? Think about  the regularization  methods you know.\n","Each group has a 10 min discussion."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"IpSk0ld_b0J9","colab":{"base_uri":"https://localhost:8080/","height":112,"referenced_widgets":["5c3960141f5e418aaf5379bea0a26e02","4ad105f8d95d4efe9b885d1cfe759500","73833a14f8e346418af35e4d02484513","750fa23db4f24fdc9cc7f3d49a52cd4f","fba63e8b60084f27b7169bc3391b9d9f","8ca8c0e1d73a44fab028dd152afc886c"]},"executionInfo":{"status":"ok","timestamp":1628286605213,"user_tz":240,"elapsed":133,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"9dc18829-f15a-41bd-854f-466cfbd77ca4"},"source":["# @title Student Response\n","from ipywidgets import widgets\n","\n","\n","text=widgets.Textarea(\n","   value='Type your answer here and click on `Submit!`',\n","   placeholder='Type something',\n","   description='',\n","   disabled=False\n",")\n","\n","button = widgets.Button(description=\"Submit!\")\n","\n","display(text,button)\n","\n","def on_button_clicked(b):\n","   atform.add_answer('q1', text.value)\n","   print(\"Submission successful!\")\n","\n","\n","button.on_click(on_button_clicked)"],"execution_count":21,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5c3960141f5e418aaf5379bea0a26e02","version_minor":0,"version_major":2},"text/plain":["Textarea(value='Type your answer here and click on `Submit!`', placeholder='Type something')"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"750fa23db4f24fdc9cc7f3d49a52cd4f","version_minor":0,"version_major":2},"text/plain":["Button(description='Submit!', style=ButtonStyle())"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Submission successful!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"amTPJ1zQb0J9"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_519e352b.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"1Q9k7keVb0J9"},"source":["---\n","# Section 4: Stochastic Gradient Descent\n","\n","*Time estimate: ~20 mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"JWQyoOnob0J9","colab":{"base_uri":"https://localhost:8080/","height":578,"referenced_widgets":["a0831ee789d149d7a9d4dbe35a0e3e37","1719067fe56e463d8506fbed72676f82","b9de534b6850439b89f714b194d38141","b3091c97fd694e7797153c95c88ab83a","8f745a3651d347408a3718eb387bb615","8674b5e0d30a4a769aca217b9bcd7d4c"]},"executionInfo":{"status":"ok","timestamp":1628286603413,"user_tz":240,"elapsed":149,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"c6b903ee-d1fe-4095-ddd8-262a67d67dcd"},"source":["# @title Video 4: SGD\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1nM4y1K7wP\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"rjzlFvJhNqE\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 4: SGD')\n","\n","display(out)"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a0831ee789d149d7a9d4dbe35a0e3e37","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ysrVgNfwb0J-"},"source":["## Section 4.1: Learning Rate\n","In this section, we will see how learning rate can act as regularizer while training a neural network. In summary:\n","\n","\n","*   Smaller learning rates regularize less. They slowly converge to deep minima. \n","*   Larger learning rates regularizes more by missing local minima and converging to broader, flatter minima, which often generalize better.\n","\n","But beware, a very large learning rate may result in overshooting or finding a really bad local minimum.\n","\n","\n","\n","In the block below, we will train the Animal Net model with different learning rates and see how that affects the regularization."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"IwzvWCPsb0J-","executionInfo":{"status":"ok","timestamp":1628286608839,"user_tz":240,"elapsed":114,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @markdown #### Generating Data Loaders\n","\n","# For reproducibility\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","batch_size = 128\n","train_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","img_train_data, img_val_data, = torch.utils.data.random_split(img_dataset, [11700,2930])\n","\n","full_train_loader = torch.utils.data.DataLoader(img_train_data,\n","                                                batch_size=batch_size,\n","                                                num_workers=2,\n","                                                worker_init_fn=seed_worker,\n","                                                generator=g_seed)\n","full_val_loader = torch.utils.data.DataLoader(img_val_data,\n","                                              batch_size=1000,\n","                                              num_workers=2,\n","                                              worker_init_fn=seed_worker,\n","                                              generator=g_seed)\n","\n","test_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))    # [TO-DO]\n","     ])\n","img_test_dataset = ImageFolder(data_path/'val', transform=test_transform)\n","# img_test_loader = DataLoader(img_test_dataset, batch_size=batch_size,shuffle=False, num_workers=1)\n","classes = ('cat', 'dog', 'wild')"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"1W-EVtG1b0J_","colab":{"base_uri":"https://localhost:8080/","height":212,"referenced_widgets":["de75df9a300245da97a33ecefaed7499","054f75a45f7742c988e6b369ef25c8b9","41628b5742fc492b843293a6823956ef","a1c66ce4797c466f909d53c02db86faf","f7d2d1b03652405c864d46714669f241","e7ceed77d3f047bb8190db42cdd9d691","c5b378277b2642ba9ab420208f24c56a","aa52a99d08e144368f512e7063fc2de1","03d0c306e0874fb8bc7edfb6548427b1","efff384ef1e24a7f855f402e72b6f3c8","e126eb640ec24edb85d1fc300b3ea312","d6189b920f9e40f1bdabbe7ecb237a56","f42a2f626487406fbf65e186f9e73e9e","b8f0947215eb4b299ac3d72d80c3a3b1","45650c0c9fcb420ba79a3e7073de9edb","244a974f285d4696aa778a492dfcd70c"]},"outputId":"7e4e78cb-b635-4d0d-e9e8-08c7323f9658"},"source":["# Set the arguments\n","args = {\n","    'test_batch_size': 1000,\n","    'epochs': 350,\n","    'batch_size': 32,\n","    'momentum': 0.99,\n","    'device': DEVICE\n","}\n","\n","learning_rates = [5e-4, 1e-3, 5e-3]\n","acc_dict = {}\n","\n","for i, lr in enumerate(learning_rates):\n","  # Initialize the model\n","  set_seed(seed=SEED)\n","  model = AnimalNet()\n","  # Learning rate\n","  args['lr'] = lr\n","  # Train the model\n","  val_acc, train_acc, param_norm, _ = main(args,\n","                                           model,\n","                                           train_loader,\n","                                           val_loader,\n","                                           img_test_dataset)\n","  # store the outputs\n","  acc_dict[f'val_{i}'] = val_acc\n","  acc_dict[f'train_{i}'] = train_acc\n","  acc_dict[f'param_norm_{i}'] = param_norm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"de75df9a300245da97a33ecefaed7499","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=350.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Exception ignored in: <function _releaseLock at 0x7f6c719848c0>\n","Traceback (most recent call last):\n","  File \"/usr/lib/python3.7/logging/__init__.py\", line 221, in _releaseLock\n","    def _releaseLock():\n","KeyboardInterrupt\n"],"name":"stderr"},{"output_type":"stream","text":["\n","Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"03d0c306e0874fb8bc7edfb6548427b1","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=350.0), HTML(value='')))"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"rziTvoOeb0KB"},"source":["# @markdown Plot Train and Validation accuracy (Run me)\n","\n","plt.figure()\n","for i, lr in enumerate(learning_rates):\n","  plt.plot(acc_dict[f'val_{i}'], linestyle='dashed',\n","          label=f'lr={lr:0.1e} - validation')\n","  plt.plot(acc_dict[f'train_{i}'], label=f'{lr:0.1e} - train')\n","\n","  print(f\"Maximum Test Accuracy obtained with lr={lr:0.1e}: {max(acc_dict[f'val_{i}'])}\")\n","\n","plt.title('Optimal Learning Rate')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"If9qV3MDb0KB"},"source":["# @markdown Plot parametric norms (Run me)\n","plt.figure()\n","\n","for i, lr in enumerate(learning_rates):\n","  plt.plot(acc_dict[f'param_norm_{i}'],label=f'lr={lr:0.2e}')\n","\n","plt.legend()\n","plt.xlabel('epoch')\n","plt.ylabel('parameter norms')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"cLtGXKQJb0KC"},"source":["In the model above, we observe something different from what we expected. Why do you think this is happening?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"N_HJG9ZGb0KC"},"source":["---\n","# Section 5: Hyperparameter Tuning\n","\n","*Time estimate: ~5 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"oPU0M5Cnb0KC"},"source":["# @title Video 5: Hyperparameter tuning\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1E44y127Sn\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"HgkiKRYc-3A\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 5: Hyperparameter tuning')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"85H2adANb0KD"},"source":["\n","\n","Hyper-Parameter tuning is often difficult and time consuming.  It is a key part of training any Deep Learning model to give good generalization. There are a few techniques that we can use to guide us during the search. \n","\n","\n","\n","*   Grid Search: Try all possible combinations of hyperparameters\n","*   Random Search: Randomly try different combinations of hyperparameters\n","*   Coordinate-wise Gradient Descent: Start at one set of hyperparameters and try changing one at a time, accept any changes that reduce your validation error\n","*   Bayesian Optimization/ Auto ML:  Start from a set of hyperparameters that have worked well on a similar problem, and then do some sort of local exploration (e.g., gradient descent) from there.\n","\n","There are lots of choices, like what range to explore over, which parameter to optimize first, etc. Some hyperparameters don’t matter much (people use a dropout of either 0.5 or 0, but not much else).  Others can matter a lot more (e.g., size and depth of the neural net). The key is to see what worked on similar problems.\n","\n","One can automate the process of tuning the network Architecture using \"Neural Architecture Search\", which designs new architectures using a few building blocks (Linear, Convolutional, Convolution Layers, etc.) and optimizes the design based on performance using a wide range of techniques such as Grid Search, Reinforcement Learning, GD, Evolutionary Algorithms, etc. This obviously requires very high computer power. Read this [article](https://lilianweng.github.io/lil-log/2020/08/06/neural-architecture-search.html) to learn more about NAS.    \n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"mJnpd_iIb0KD"},"source":["## Think! 5: Overview of regularization techniques\n","\n","Which regularization technique today do you think had the biggest effect on the network? Why might do you think so? Can you apply all of the regularization methods on the same network?"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"sHkc6JGrb0KE","colab":{"base_uri":"https://localhost:8080/","height":96,"referenced_widgets":["bfe23aaf2092410ebe96b511879442e7","cf4c0a108c854084b7df50b543830a8f","a028716e185a4bc7bfe7754430a3d381","39ef31764f9a42d48d10adb4233b94e6","0b3d4c1d3b664e828730ba56f03ac534","c6a77a50331b44b8af4e1af44afbb79a"]},"executionInfo":{"status":"ok","timestamp":1628286928792,"user_tz":240,"elapsed":159,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"0b0f2f2e-7ef7-48dc-fc4d-6655b5577290"},"source":["# @title Student Response\n","from ipywidgets import widgets\n","\n","\n","text=widgets.Textarea(\n","   value='Type your answer here and click on `Submit!`',\n","   placeholder='Type something',\n","   description='',\n","   disabled=False\n",")\n","\n","button = widgets.Button(description=\"Submit!\")\n","\n","display(text,button)\n","\n","def on_button_clicked(b):\n","   atform.add_answer('q2', text.value)\n","   print(\"Submission successful!\")\n","\n","\n","button.on_click(on_button_clicked)"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"bfe23aaf2092410ebe96b511879442e7","version_minor":0,"version_major":2},"text/plain":["Textarea(value='Type your answer here and click on `Submit!`', placeholder='Type something')"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"39ef31764f9a42d48d10adb4233b94e6","version_minor":0,"version_major":2},"text/plain":["Button(description='Submit!', style=ButtonStyle())"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ejh08iGhb0KF"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_a308b739.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ogB7OnyUb0KF"},"source":["---\n","# Summary\n","\n","Congratulations! The first week of NMA-DL has ended! In this tutorial, you learned more techniques of regulariation, i.e., L1 and L2 regularization, Dropout, and Data Augmenetation. Finally, you have seen the learning rate of SGD can act as a reularizer. An iteresting paper can be found [here](https://arxiv.org/abs/1611.03530). \n","\n","If you have time left, see the bonus material on *Adversarial Attacks*!"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"2sYsfDDIb0KF","colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"status":"ok","timestamp":1628287064614,"user_tz":240,"elapsed":126,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"6c6ee2d2-9693-49b3-9de5-d056b21aa7a0"},"source":["# @title Airtable Submission Link\n","from IPython import display as IPydisplay\n","IPydisplay.HTML(\n","   f\"\"\"\n"," <div>\n","   <a href= \"{atform.url()}\" target=\"_blank\">\n","   <img src=\"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/static/SurveyButton.png?raw=1\"\n"," alt=\"button link end of day Survey\" style=\"width:410px\"></a>\n","   </div>\"\"\" )"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n"," <div>\n","   <a href= \"https://portal.neuromatchacademy.org/api/redirect/to/a76f99c1-9005-4566-8bcd-bed4e53d21f1?data=eyJmb3JtX2lkIjogImFwcG43VmRQUnNlU29NWEVHIiwgInRhYmxlX25hbWUiOiAiVzFENV9UMiIsICJhbnN3ZXJzIjoge30sICJldmVudHMiOiBbeyJldmVudCI6ICJpbml0IiwgInRzIjogMTYyODI4Njk1My42OTA1Nn0sIHsiZXZlbnQiOiAidXJsIGdlbmVyYXRlZCIsICJ0cyI6IDE2MjgyODcwNjQuNDM1NzAyNn1dfQ%3D%3D\" target=\"_blank\">\n","   <img src=\"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/static/SurveyButton.png?raw=1\"\n"," alt=\"button link end of day Survey\" style=\"width:410px\"></a>\n","   </div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ASEZpJ5gb0KG"},"source":["---\n","# Bonus: Adversarial  Attacks\n","\n","*Time estimate: ~15 mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"Lm1NoC65b0KG","executionInfo":{"status":"aborted","timestamp":1628286579568,"user_tz":240,"elapsed":42,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Video 6: Adversarial Attacks\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV19o4y1X74u\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"LzPPoiKi5jE\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 6: Adversarial Attacks')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"wRDUeNWWb0KH"},"source":["Designing perturbations to the input data to trick a machine learning model is called an \"adversarial attack\". These attacks are an inevitable consequence of learning in high dimensional space with complex decision boundaries. Depending on the application, these attacks can be very dangerous.\n","\n","\n","<img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/static/AdversarialAttacks_w1d5t2.png\">\n","\n","Hence, it is important for us to build models which can defend against such attacks. One possible way to do it is by regularizing the networks, which smooths the decision boundaries. A few ways of building models robust to such attacks are:\n","\n","\n","\n","*   [Defensive Distillation](https://deepai.org/machine-learning-glossary-and-terms/defensive-distillation) : Models trained via distillation are less prone to such attacks as they are trained on soft labels as there is an element of randomness in the training process.\n","*   [Feature Squeezing](https://evademl.org/squeezing/): Identifies adversarial attacks for on-line classifiers whose model is being used by comparing model's perdiction before and after squeezing the input. \n","* [SGD](https://arxiv.org/abs/1706.06083) You can also pick weight to minimize what the adversary is trying to maximize via SGD.\n","\n","\n","Read more about adversarial attacks [here](https://openai.com/blog/adversarial-example-research/)\n"]}]}