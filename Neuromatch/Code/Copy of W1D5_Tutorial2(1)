{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Copy of W1D5_Tutorial2","provenance":[{"file_id":"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/W1D5_Regularization/student/W1D5_Tutorial2.ipynb","timestamp":1628271427553}],"collapsed_sections":[],"toc_visible":true},"kernel":{"display_name":"Python 3","language":"python","name":"python3"},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"8e37abf5ce144f94911a73c420e42721":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_abb7491e1f53491bb8f57ff19fb378b2","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_25a7337f010e443bbb66aa92cd7b472c","IPY_MODEL_a6942f2eebc941979153ebbbdb8e4a66"]}},"abb7491e1f53491bb8f57ff19fb378b2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"25a7337f010e443bbb66aa92cd7b472c":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://youtube.com/watch?v=oQNdloKdysM\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://www.youtube.com/embed/oQNdloKdysM?fs=1&rel=0\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.YouTubeVideo at 0x7fb997018f90>","image/jpeg":"\n"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_f63ebcb988aa41b59649d07071b94b0f","_model_module":"@jupyter-widgets/output"}},"a6942f2eebc941979153ebbbdb8e4a66":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://www.bilibili.com/video/BV19h41167H7\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://player.bilibili.com/player.html?bvid=BV19h41167H7&page=1?fs=1\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<__main__.BiliVideo at 0x7fb996246fd0>"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_5e62597c1d5b47d4a9328b9a3597d782","_model_module":"@jupyter-widgets/output"}},"f63ebcb988aa41b59649d07071b94b0f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5e62597c1d5b47d4a9328b9a3597d782":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2d1d8242db36413d9baad3d02e138f60":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_3574179a2b7d4772b0c58521ead1d740","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_a20d775092cc490eb260fabcbf394675","IPY_MODEL_69af4d90945c490abf8fdb89f5327aea"]}},"3574179a2b7d4772b0c58521ead1d740":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a20d775092cc490eb260fabcbf394675":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_e4179e89dc344c8e8d80585e34758dae","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":150,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":150,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_28e5fdb9b3524cd08e69af086b570207"}},"69af4d90945c490abf8fdb89f5327aea":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_801809c4fe0b43c39a5bc352b37fb270","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 150/150 [07:24&lt;00:00,  2.97s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f5e49bdb6edc47dd85626b98922d46ed"}},"e4179e89dc344c8e8d80585e34758dae":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"28e5fdb9b3524cd08e69af086b570207":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"801809c4fe0b43c39a5bc352b37fb270":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f5e49bdb6edc47dd85626b98922d46ed":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7e02d87203c84d4480e092103d21c7c7":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_79311011bb05414ebdf66f6024f46d63","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3e0b2112b5a64465ae9f36ede63add1c","IPY_MODEL_21a4380b8fab442a82021024bd8b71fc"]}},"79311011bb05414ebdf66f6024f46d63":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3e0b2112b5a64465ae9f36ede63add1c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7126b5b8fe3d4c638239efb26b1ca3f9","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":150,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":150,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6ec6335331f94479922eb79d094588a9"}},"21a4380b8fab442a82021024bd8b71fc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9c8cafd4571349ccbcdbea2edc5e66f5","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 150/150 [06:20&lt;00:00,  2.54s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d0635a66ba0c4483beacbc85fdf53a3f"}},"7126b5b8fe3d4c638239efb26b1ca3f9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"6ec6335331f94479922eb79d094588a9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9c8cafd4571349ccbcdbea2edc5e66f5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d0635a66ba0c4483beacbc85fdf53a3f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5c78fd1ee86d44e59c2ca35987f0d791":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_4bb7fb714e3f497486245bf5db7cd867","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_571fd23edc8a4c7aac82e73c6dfbc269","IPY_MODEL_bd6c6ab837ae452a85615c3594bd1a9e"]}},"4bb7fb714e3f497486245bf5db7cd867":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"571fd23edc8a4c7aac82e73c6dfbc269":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_25e7066a882a42cbb0cdd41610bd9af2","_dom_classes":[],"description":"  0%","_model_name":"FloatProgressModel","bar_style":"danger","max":150,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_19e114b12ba14408804a20093a4ba478"}},"bd6c6ab837ae452a85615c3594bd1a9e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_2db85781cdd24c58945518e2303163e1","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/150 [00:00&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_099b4f7c578e49518e746d647fd0270a"}},"25e7066a882a42cbb0cdd41610bd9af2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"19e114b12ba14408804a20093a4ba478":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2db85781cdd24c58945518e2303163e1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"099b4f7c578e49518e746d647fd0270a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"98e1388beda54365beba888698b17030":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_fa1b98be189e40af86a8b061317103c8","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_8e19c60a036b46cfaa13e7993fa0c1b4","IPY_MODEL_777285a005154489b45676f27ec56ede"]}},"fa1b98be189e40af86a8b061317103c8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8e19c60a036b46cfaa13e7993fa0c1b4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7743e0b0af2c457dbd1c5c37bf5c1f87","_dom_classes":[],"description":"  0%","_model_name":"FloatProgressModel","bar_style":"danger","max":150,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ff92b97de52a49eebb5e425bcded721b"}},"777285a005154489b45676f27ec56ede":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_cd6e52bc9c374ae6b5c6bdc487af6fe6","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/150 [00:04&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fe5835fef6a5489ab82bee4c5063050d"}},"7743e0b0af2c457dbd1c5c37bf5c1f87":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"ff92b97de52a49eebb5e425bcded721b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"cd6e52bc9c374ae6b5c6bdc487af6fe6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"fe5835fef6a5489ab82bee4c5063050d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"897a6faca9cd4de4ad0837be88789eb3":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_1ff5fdd8f92e440b992a88b7d6a45492","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ee60180df7f949a897a700cc118695c8","IPY_MODEL_5edd6239c5d448a4bf153502c9933cb1"]}},"1ff5fdd8f92e440b992a88b7d6a45492":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ee60180df7f949a897a700cc118695c8":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://youtube.com/watch?v=nm44FhjL3xc\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://www.youtube.com/embed/nm44FhjL3xc?fs=1&rel=0\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.YouTubeVideo at 0x7fb9973dfcd0>","image/jpeg":"\n"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_3564650cf38b459c9557ab9aa9ddd619","_model_module":"@jupyter-widgets/output"}},"5edd6239c5d448a4bf153502c9933cb1":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Video available at https://www.bilibili.com/video/BV1Xw411d7Pz\n","stream":"stdout"},{"output_type":"display_data","metadata":{"tags":[]},"text/html":"\n        <iframe\n            width=\"854\"\n            height=\"480\"\n            src=\"https://player.bilibili.com/player.html?bvid=BV1Xw411d7Pz&page=1?fs=1\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<__main__.BiliVideo at 0x7fb9973c87d0>"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_42389806d27940e6baeabc8236621de5","_model_module":"@jupyter-widgets/output"}},"3564650cf38b459c9557ab9aa9ddd619":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"42389806d27940e6baeabc8236621de5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bd842c6968f54df49c2cbb822b492073":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_d6135f2ac9464892bb421542d381b006","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d782c978bcbf4316aef9ad740284e7ff","IPY_MODEL_4d1681f4eee14b71b1ded51151f86acb"]}},"d6135f2ac9464892bb421542d381b006":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d782c978bcbf4316aef9ad740284e7ff":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_c5560f4730df472ea5d7d3cdc0da9273","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":250,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":250,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1cf3cb1ec000473a98c0b10697bf071a"}},"4d1681f4eee14b71b1ded51151f86acb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_645d2f9305f7434e82bbaa56c61bd092","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 250/250 [02:51&lt;00:00,  1.46it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_26686231d1e94af98726061f83fbca4e"}},"c5560f4730df472ea5d7d3cdc0da9273":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1cf3cb1ec000473a98c0b10697bf071a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"645d2f9305f7434e82bbaa56c61bd092":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"26686231d1e94af98726061f83fbca4e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"65d860c2729446c984e104dec376b550":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_d820d42516bc44b8b1768c3cdaf5273a","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_0907524d1976418cbb2e75fdd1f36fc9","IPY_MODEL_1c045699c9f04e4ab40ba101e67bfccf"]}},"d820d42516bc44b8b1768c3cdaf5273a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0907524d1976418cbb2e75fdd1f36fc9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_38deb085f2864baab77d3b96ffadd97e","_dom_classes":[],"description":" 57%","_model_name":"FloatProgressModel","bar_style":"","max":250,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":142,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_eb6139eb4cab427baea5d0d43e6949c4"}},"1c045699c9f04e4ab40ba101e67bfccf":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_a2c4ba00bff84344a315dbe35cfba17f","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 142/250 [01:22&lt;01:05,  1.64it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b80389e6d91a40b4bf306d3030c995be"}},"38deb085f2864baab77d3b96ffadd97e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"eb6139eb4cab427baea5d0d43e6949c4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a2c4ba00bff84344a315dbe35cfba17f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"b80389e6d91a40b4bf306d3030c995be":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"execution":{},"id":"ekfUTO9bigVM"},"source":["# Tutorial 2: Regularization techniques part 2\n","**Week 1, Day 5: Regularization**\n","\n","**By Neuromatch Academy**\n","\n","\n","__Content creators:__ Ravi Teja Konkimalla, Mohitrajhu Lingan Kumaraian, Kevin Machado Gamboa, Kelson Shilling-Scrivo, Lyle Ungar\n","\n","__Content reviewers:__ Piyush Chauhan, Siwei Bai, Kelson Shilling-Scrivo\n","\n","__Content editors:__ Roberto Guidotti, Spiros Chavlis\n","\n","__Production editors:__ Saeed Salehi, Spiros Chavlis"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"VpF5h4-qigVT"},"source":["**Our 2021 Sponsors, including Presenting Sponsor Facebook Reality Labs**\n","\n","<p align='center'><img src='https://github.com/NeuromatchAcademy/widgets/blob/master/sponsors.png?raw=True'/></p>"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Ncmza4iMigVV"},"source":["---\n","# Tutorial Objectives\n","\n","1.   Regularization as shrinkage of overparameterized models: L1, L2\n","2.   Regularization by Dropout\n","3.   Regularization by Data Augmentation\n","4.   Perils of Hyper-Parameter Tuning\n","5.   Rethinking generalization"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"awZ5usFRigVW","colab":{"base_uri":"https://localhost:8080/","height":500},"executionInfo":{"status":"ok","timestamp":1628285665729,"user_tz":240,"elapsed":208,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"c5ea4615-fcb9-4909-d4ea-8b6981823648"},"source":["\n","# @title Tutorial slides\n","\n","# @markdown These are the slides for the videos in this tutorial\n","from IPython.display import IFrame\n","IFrame(src=f\"https://mfr.ca-1.osf.io/render?url=https://osf.io/7um6p/?direct%26mode=render%26action=download%26mode=render\", width=854, height=480)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://mfr.ca-1.osf.io/render?url=https://osf.io/7um6p/?direct%26mode=render%26action=download%26mode=render\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.IFrame at 0x7fb9800d9510>"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"BuknIhh9igVY"},"source":["---\n","# Setup\n","Note that some of the code for today can take up to an hour to run. We have therefore \"hidden\" that code and shown the resulting outputs.\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"hP36LB7GigVd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628285673447,"user_tz":240,"elapsed":7537,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"1c81143a-f78b-4acc-df40-2e683865ec0e"},"source":["# @title Install dependencies\n","!apt-get install -y ffmpeg --quiet\n","!pip install imageio-ffmpeg --quiet\n","\n","!pip install git+https://github.com/NeuromatchAcademy/evaltools --quiet\n","from evaltools.airtable import AirtableForm\n","\n","atform = AirtableForm('appn7VdPRseSoMXEG','W1D5_T2', 'https://portal.neuromatchacademy.org/api/redirect/to/a76f99c1-9005-4566-8bcd-bed4e53d21f1')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Reading package lists...\n","Building dependency tree...\n","Reading state information...\n","ffmpeg is already the newest version (7:3.4.8-0ubuntu0.2).\n","0 upgraded, 0 newly installed, 0 to remove and 40 not upgraded.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{},"id":"8_hC9n0BigVf"},"source":["# Imports\n","from __future__ import print_function\n","\n","import copy\n","import torch\n","import random\n","import pathlib\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.animation as animation\n","\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","\n","from torchvision import datasets, transforms\n","from torchvision.datasets import ImageFolder\n","from torch.optim.lr_scheduler import StepLR\n","\n","from tqdm.auto import tqdm\n","from IPython.display import HTML, display"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"RQZsBVtEigVi"},"source":["# @title Figure Settings\n","import ipywidgets as widgets\n","%matplotlib inline\n","%config InlineBackend.figure_format = 'retina'\n","plt.style.use(\"https://raw.githubusercontent.com/NeuromatchAcademy/content-creation/main/nma.mplstyle\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"MJnkQgFyigVj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628285677456,"user_tz":240,"elapsed":4015,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"92c13102-19f0-439a-d46f-e473311c1c3a"},"source":["# @title Loading Animal Faces data\n","import requests, os\n","from zipfile import ZipFile\n","\n","print(\"Start downloading and unzipping `AnimalFaces` dataset...\")\n","name = 'afhq'\n","fname = f\"{name}.zip\"\n","url = f\"https://osf.io/kgfvj/download\"\n","\n","if not os.path.exists(fname):\n","  r = requests.get(url, allow_redirects=True)\n","  with open(fname, 'wb') as fh:\n","    fh.write(r.content)\n","\n","  if os.path.exists(fname):\n","    with ZipFile(fname, 'r') as zfile:\n","      zfile.extractall(f\".\")\n","      os.remove(fname)\n","\n","print(\"Download completed.\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Start downloading and unzipping `AnimalFaces` dataset...\n","Download completed.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"n5JmYLgTigVl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628285685746,"user_tz":240,"elapsed":8296,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"3b62d608-65e7-4dc7-f377-ffb5b5c39fe7"},"source":["# @title Loading Animal Faces Randomized data\n","from IPython.display import clear_output\n","\n","print(\"Start downloading and unzipping `Randomized AnimalFaces` dataset...\")\n","\n","names = ['afhq_random_32x32', 'afhq_10_32x32']\n","urls = [\"https://osf.io/9sj7p/download\",\n","        \"https://osf.io/wvgkq/download\"]\n","\n","\n","for i, name in enumerate(names):\n","  url = urls[i]\n","  fname = f\"{name}.zip\"\n","\n","  if not os.path.exists(fname):\n","    r = requests.get(url, allow_redirects=True)\n","    with open(fname, 'wb') as fh:\n","      fh.write(r.content)\n","\n","    if os.path.exists(fname):\n","      with ZipFile(fname, 'r') as zfile:\n","        zfile.extractall(f\".\")\n","        os.remove(fname)\n","\n","print(\"Download completed.\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Start downloading and unzipping `Randomized AnimalFaces` dataset...\n","Download completed.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"EVb4XAE4igVm"},"source":["# @title Plotting functions\n","\n","\n","def imshow(img):\n","  img = img / 2 + 0.5  # unnormalize\n","  npimg = img.numpy()\n","  plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","  plt.axis(False)\n","  plt.show()\n","\n","\n","def plot_weights(norm, labels, ws, title='Weight Size Measurement'):\n","  plt.figure(figsize=[8, 6])\n","  plt.title(title)\n","  plt.ylabel('Frobenius Norm Value')\n","  plt.xlabel('Model Layers')\n","  plt.bar(labels, ws)\n","  plt.axhline(y=norm,\n","              linewidth=1,\n","              color='r',\n","              ls='--',\n","              label='Total Model F-Norm')\n","  plt.legend()\n","  plt.show()\n","\n","\n","def visualize_data(dataloader):\n","\n","  for idx, (data,label) in enumerate(dataloader):\n","    plt.figure(idx)\n","    # Choose the datapoint you would like to visualize\n","    index = 22\n","\n","    # choose that datapoint using index and permute the dimensions\n","    # and bring the pixel values between [0,1]\n","    data = data[index].permute(1, 2, 0) * \\\n","           torch.tensor([0.5, 0.5, 0.5]) + \\\n","           torch.tensor([0.5, 0.5, 0.5])\n","\n","    # Convert the torch tensor into numpy\n","    data = data.numpy()\n","\n","    plt.imshow(data)\n","    plt.axis(False)\n","    image_class = classes[label[index].item()]\n","    print(f'The image belongs to : {image_class}')\n","\n","  plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"mo9iWRGRigVo"},"source":["# @title Helper functions\n","\n","## Network Class - Animal Faces\n","class AnimalNet(nn.Module):\n","  def __init__(self):\n","    super(AnimalNet, self).__init__()\n","    self.fc1 = nn.Linear(3 * 32 * 32, 128)\n","    self.fc2 = nn.Linear(128, 32)\n","    self.fc3 = nn.Linear(32, 3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0], -1)\n","    x = F.relu(self.fc1(x))\n","    x = F.relu(self.fc2(x))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","\n","\n","# Simple Net\n","class Net(nn.Module):\n","  def __init__(self):\n","    super(Net, self).__init__()\n","\n","    self.fc1 = nn.Linear(1, 300)\n","    self.fc2 = nn.Linear(300, 500)\n","    self.fc3 = nn.Linear(500, 1)\n","\n","  def forward(self, x):\n","    x = F.leaky_relu(self.fc1(x))\n","    x = F.leaky_relu(self.fc2(x))\n","    output = self.fc3(x)\n","    return output\n","\n","\n","# Network Class - Animal Faces\n","class BigAnimalNet(nn.Module):\n","  def __init__(self):\n","    super(BigAnimalNet, self).__init__()\n","    self.fc1 = nn.Linear(3*32*32, 124)\n","    self.fc2 = nn.Linear(124, 64)\n","    self.fc3 = nn.Linear(64, 3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0],-1)\n","    x = F.leaky_relu(self.fc1(x))\n","    x = F.leaky_relu(self.fc2(x))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","\n","\n","def train(args, model, train_loader, optimizer, epoch,\n","          reg_function1=None, reg_function2=None, criterion=F.nll_loss):\n","  \"\"\"\n","  Trains the current inpur model using the data\n","  from Train_loader and Updates parameters for a single pass\n","  \"\"\"\n","\n","  device = args['device']\n","  model.train()\n","  for batch_idx, (data, target) in enumerate(train_loader):\n","    data, target = data.to(device), target.to(device)\n","    optimizer.zero_grad()\n","    output = model(data)\n","    # L1 regularization\n","    if reg_function2 is None and reg_function1 is not None:\n","      loss = criterion(output, target) + args['lambda1']*reg_function1(model)\n","    # L2 regularization\n","    elif reg_function1 is None and reg_function2 is not None:\n","      loss = criterion(output, target) + args['lambda2']*reg_function2(model)\n","    # No regularization\n","    elif reg_function1 is None and reg_function2 is None:\n","      loss = criterion(output, target)\n","    # Both L1 and L2 regularizations\n","    else:\n","      loss = criterion(output, target) + args['lambda1']*reg_function1(model) + args['lambda2']*reg_function2(model)\n","    loss.backward()\n","    optimizer.step()\n","\n","  return model\n","\n","\n","def test(model, test_loader, loader='Test', criterion=F.nll_loss,\n","         device='cpu'):\n","  \"\"\"\n","  Tests the current Model\n","  \"\"\"\n","  model.eval()\n","  test_loss = 0\n","  correct = 0\n","  with torch.no_grad():\n","    for data, target in test_loader:\n","      data, target = data.to(device), target.to(device)\n","      output = model(data)\n","      test_loss += criterion(output, target, reduction='sum').item()  # sum up batch loss\n","      pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n","      correct += pred.eq(target.view_as(pred)).sum().item()\n","\n","  test_loss /= len(test_loader.dataset)\n","  def __init__(self):\n","    super(BigAnimalNet, self).__init__()\n","    self.fc1 = nn.Linear(3*32*32, 124)\n","    self.fc2 = nn.Linear(124, 64)\n","    self.fc3 = nn.Linear(64, 3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0],-1)\n","    x = F.leaky_relu(self.fc1(x))\n","    x = F.leaky_relu(self.fc2(x))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","  return 100. * correct / len(test_loader.dataset)\n","\n","\n","def main(args, model, train_loader, val_loader, test_data,\n","         reg_function1=None, reg_function2=None, criterion=F.nll_loss):\n","  \"\"\"\n","  Trains the model with train_loader and tests the learned model using val_loader\n","  \"\"\"\n","\n","  device = args['device']\n","\n","  model = model.to(device)\n","  optimizer = optim.SGD(model.parameters(), lr=args['lr'], momentum=args['momentum'])\n","\n","  val_acc_list, train_acc_list,param_norm_list = [], [], []\n","  for epoch in tqdm(range(args['epochs'])):\n","    trained_model = train(args, model, train_loader, optimizer, epoch,\n","                          reg_function1=reg_function1,\n","                          reg_function2=reg_function2)\n","    train_acc = test(trained_model, train_loader, loader='Train', device=device)\n","    val_acc = test(trained_model, val_loader, loader='Val', device=device)\n","    param_norm = calculate_frobenius_norm(trained_model)\n","    train_acc_list.append(train_acc)\n","    val_acc_list.append(val_acc)\n","    param_norm_list.append(param_norm)\n","\n","  return val_acc_list, train_acc_list, param_norm_list, model\n","\n","\n","def calculate_frobenius_norm(model):\n","    norm = 0.0\n","    # Sum the square of all parameters\n","    for name,param in model.named_parameters():\n","        norm += torch.norm(param).data**2\n","    # Return a square root of the sum of squares of all the parameters\n","    return norm**0.5\n","\n","\n","def early_stopping_main(args, model, train_loader, val_loader, test_data):\n","\n","  device = args['device']\n","\n","  model = model.to(device)\n","  optimizer = optim.SGD(model.parameters(), lr=args['lr'], momentum=args['momentum'])\n","\n","  best_acc  = 0.0\n","  best_epoch = 0\n","\n","  # Number of successive epochs that you want to wait before stopping training process\n","  patience = 20\n","\n","  # Keps track of number of epochs during which the val_acc was less than best_acc\n","  wait = 0\n","\n","  val_acc_list, train_acc_list = [], []\n","  for epoch in tqdm(range(args['epochs'])):\n","    trained_model = train(args, model, device, train_loader, optimizer, epoch)\n","    train_acc = test(trained_model, train_loader, loader='Train', device=device)\n","    val_acc = test(trained_model, val_loader, loader='Val', device=device)\n","    if (val_acc > best_acc):\n","      best_acc = val_acc\n","      best_epoch = epoch\n","      best_model = copy.deepcopy(trained_model)\n","      wait = 0\n","    else:\n","      wait += 1\n","    if (wait > patience):\n","      print(f'early stopped on epoch: {epoch}')\n","      break\n","    train_acc_list.append(train_acc)\n","    val_acc_list.append(val_acc)\n","\n","  return val_acc_list, train_acc_list, best_model, best_epoch"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"XpI7V4HmigVt"},"source":["# @title Set random seed\n","# @markdown Executing `set_seed(seed=seed)` you are setting the seed\n","\n","# for DL its critical to set the random seed so that students can have a\n","# baseline to compare their results to expected results.\n","# Read more here: https://pytorch.org/docs/stable/notes/randomness.html\n","\n","# Call `set_seed` function in the exercises to ensure reproducibility.\n","import random\n","import torch\n","\n","def set_seed(seed=None, seed_torch=True):\n","  if seed is None:\n","    seed = np.random.choice(2 ** 32)\n","  random.seed(seed)\n","  np.random.seed(seed)\n","  if seed_torch:\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.benchmark = False\n","    torch.backends.cudnn.deterministic = True\n","\n","  print(f'Random seed {seed} has been set.')\n","\n","\n","# In case that `DataLoader` is used\n","def seed_worker(worker_id):\n","  worker_seed = torch.initial_seed() % 2**32\n","  np.random.seed(worker_seed)\n","  random.seed(worker_seed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"hKsWLItqigVw"},"source":["# @title Set device (GPU or CPU). Execute `set_device()`\n","# especially if torch modules used.\n","\n","# inform the user if the notebook uses GPU or CPU.\n","\n","def set_device():\n","  device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","  if device != \"cuda\":\n","    print(\"WARNING: For this notebook to perform best, \"\n","        \"if possible, in the menu under `Runtime` -> \"\n","        \"`Change runtime type.`  select `GPU` \")\n","  else:\n","    print(\"GPU is enabled in this notebook.\")\n","\n","  return device"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"xiJSuO4NigVz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628285686129,"user_tz":240,"elapsed":9,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"85e52e8d-e075-4a8b-a3c7-9b2648242b6b"},"source":["SEED = 2021\n","set_seed(seed=SEED)\n","DEVICE = set_device()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n","GPU is enabled in this notebook.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"kYJEIec4igV1"},"source":["# @title Dataloaders for the Dataset\n","## Dataloaders for the Dataset\n","batch_size = 128\n","classes = ('cat', 'dog', 'wild')\n","\n","train_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","\n","\n","####################################################\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","\n","##Dataloaders for the  Original Dataset\n","img_train_data, img_val_data,_ = torch.utils.data.random_split(img_dataset,\n","                                                               [100, 100, 14430])\n","\n","#Creating train_loader and Val_loader\n","train_loader = torch.utils.data.DataLoader(img_train_data,\n","                                           batch_size=batch_size,\n","                                           worker_init_fn=seed_worker,\n","                                           num_workers=2,\n","                                           generator=g_seed)\n","val_loader = torch.utils.data.DataLoader(img_val_data,\n","                                         batch_size=1000,\n","                                         num_workers=2,\n","                                         worker_init_fn=seed_worker,\n","                                         generator=g_seed)\n","\n","#creating test dataset\n","test_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","img_test_dataset = ImageFolder(data_path/'val', transform=test_transform)\n","\n","\n","####################################################\n","\n","## Dataloaders for the  Random Dataset\n","\n","# splitting randomized data into training and validation data\n","data_path = pathlib.Path('.')/'afhq_random_32x32/afhq_random' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","random_img_train_data, random_img_val_data,_ = torch.utils.data.random_split(img_dataset, [100,100,14430])\n","\n","#Randomized train and validation dataloader\n","rand_train_loader = torch.utils.data.DataLoader(random_img_train_data,\n","                                                batch_size=batch_size,\n","                                                num_workers=2,\n","                                                worker_init_fn=seed_worker,\n","                                                generator=g_seed)\n","rand_val_loader = torch.utils.data.DataLoader(random_img_val_data,\n","                                              batch_size=1000,\n","                                              num_workers=2,\n","                                              worker_init_fn=seed_worker,\n","                                              generator=g_seed)\n","\n","####################################################\n","\n","## Dataloaders for the Partially Random Dataset\n","\n","# Splitting data between training and validation dataset for partially randomized data\n","data_path = pathlib.Path('.')/'afhq_10_32x32/afhq_10' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","partially_random_train_data, partially_random_val_data, _ = torch.utils.data.random_split(img_dataset, [100,100,14430])\n","\n","#Training and Validation loader for partially randomized data\n","partial_rand_train_loader = torch.utils.data.DataLoader(partially_random_train_data,\n","                                                        batch_size=batch_size,\n","                                                        num_workers=2,\n","                                                        worker_init_fn=seed_worker,\n","                                                        generator=g_seed)\n","partial_rand_val_loader = torch.utils.data.DataLoader(partially_random_val_data,\n","                                                      batch_size=1000,\n","                                                      num_workers=2,\n","                                                      worker_init_fn=seed_worker,\n","                                                      generator=g_seed)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"NRqtfO7RigV3"},"source":["---\n","# Section 1: L1 and L2 Regularization\n","\n","*Time estimate: ~30 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"cONB-tBCigV5","colab":{"base_uri":"https://localhost:8080/","height":578,"referenced_widgets":["8e37abf5ce144f94911a73c420e42721","abb7491e1f53491bb8f57ff19fb378b2","25a7337f010e443bbb66aa92cd7b472c","a6942f2eebc941979153ebbbdb8e4a66","f63ebcb988aa41b59649d07071b94b0f","5e62597c1d5b47d4a9328b9a3597d782"]},"executionInfo":{"status":"ok","timestamp":1628285686495,"user_tz":240,"elapsed":15,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"74ec4b2d-bc47-4193-db72-fb885660bc8a"},"source":["# @title Video 1: L1 and L2 regression\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV19h41167H7\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"oQNdloKdysM\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 1: L1 and L2 regression')\n","\n","display(out)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8e37abf5ce144f94911a73c420e42721","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"aNJjgBzsigV6"},"source":["Some of you might have already come across L1 and L2 regularization before in other courses. L1 and L2 are the most common types of regularization. These update the general cost function by adding another term known as the regularization term.\n","\n","***Cost function = Loss (say, binary cross entropy) + Regularization term***\n","\n","This regularization term makes the parameters smaller, giving simpler models that will overfit less."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"JgLBirDPigV7"},"source":["Discuss among your teammates whether the above assumption is good or bad?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"hPCXMRpHigV8"},"source":["## Section 1.1: Unregularized Model"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"xfUpHTl5igV-"},"source":["# @markdown #### Dataloaders for Regularization\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","\n","# Splitting dataset\n","reg_train_data, reg_val_data,_ = torch.utils.data.random_split(img_dataset,\n","                                                               [30, 100, 14500])\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","# Creating train_loader and Val_loader\n","reg_train_loader = torch.utils.data.DataLoader(reg_train_data,\n","                                               batch_size=batch_size,\n","                                               worker_init_fn=seed_worker,\n","                                               num_workers=2,\n","                                               generator=g_seed)\n","reg_val_loader = torch.utils.data.DataLoader(reg_val_data,\n","                                             batch_size=1000,\n","                                             worker_init_fn=seed_worker,\n","                                             num_workers=2,\n","                                             generator=g_seed)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"RBHtK32YigV_"},"source":["Now let's train a model without any regularization and keep it aside as our benchmark for this section."]},{"cell_type":"code","metadata":{"execution":{},"id":"qp12xV__igV_","colab":{"base_uri":"https://localhost:8080/","height":511,"referenced_widgets":["2d1d8242db36413d9baad3d02e138f60","3574179a2b7d4772b0c58521ead1d740","a20d775092cc490eb260fabcbf394675","69af4d90945c490abf8fdb89f5327aea","e4179e89dc344c8e8d80585e34758dae","28e5fdb9b3524cd08e69af086b570207","801809c4fe0b43c39a5bc352b37fb270","f5e49bdb6edc47dd85626b98922d46ed"]},"executionInfo":{"status":"ok","timestamp":1628285751127,"user_tz":240,"elapsed":64480,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"b696520f-ea99-401f-8c46-03a55fea0bf5"},"source":["# Set the arguments\n","args = {\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","\n","# Train the model\n","val_acc_unreg, train_acc_unreg, param_norm_unreg, _ = main(args,\n","                                                           model,\n","                                                           reg_train_loader,\n","                                                           reg_val_loader,\n","                                                           img_test_dataset)\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_unreg, label='Val Accuracy', c='red', ls='dashed')\n","plt.plot(train_acc_unreg, label='Train Accuracy', c='red', ls='solid')\n","plt.axhline(y=max(val_acc_unreg), c='green', ls='dashed')\n","plt.title('Unregularized Model')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()\n","print(f\"maximum Validation Accuracy reached: {max(val_acc_unreg)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"2d1d8242db36413d9baad3d02e138f60","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=150.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":413},"needs_background":"light"}},{"output_type":"stream","text":["maximum Validation Accuracy reached: 50.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"zJvuEJF4igWB"},"source":["## Section 1.2: L1 Regularization"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"9Sz7ucfeigWD"},"source":["L1 (or \"LASSO\") Regularization uses a penalty which is the sum of the absolute value of all the weights in the DLN, resulting in the following loss function ($L$ is the usual Cross Entropy loss):\n","\n","\\begin{equation}\n","L_R=L + \\lambda \\sum \\left| w^{(r)}_{ij} \\right|\n","\\end{equation}\n","\n","where $r$ denotes the layer, and $ij$ the specific weight in that layer.\n","\n","At a high level, L1 Regularization is similar to L2 Regularization since it leads to smaller weights (you will see the analogy in the next subsection). It results in the following weight update equation when using Stochastic Gradient Descent:\n","\n","\\begin{equation}\n","w^{(r)}_{ij}←w^{(r)}_{ij}−\\eta \\lambda \\text{sgn}\\left(w^{(r)}_{ij}\\right)−\\eta \\frac{\\partial L}{\\partial w_{ij}^{(r)}} \n","\\end{equation}\n","\n","where  $\\text{sgn}(\\cdot)$ is the sign function, such that\n","\n","\\begin{equation}\n","\\text{sgn}(w) = \n","\\left\\{\n","  \\begin{array}{ll}\n","  +1 & \\mbox{if  } w > 0 \\\\\n","  -1 & \\mbox{if  } w < 0 \\\\\n","  0 & \\mbox{if  } w = 0\n","  \\end{array}\n","\\right.\n","\\end{equation}"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"wfcL3BsIigWE"},"source":["### Coding Exercise 1.1: L1 Regularization\n","\n","Write a function which calculates the L1 norm of all the tensors of a Pytorch model."]},{"cell_type":"code","metadata":{"execution":{},"id":"Dbg_GT-AigWF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628285751510,"user_tz":240,"elapsed":389,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"49676b9a-ef38-442c-c13f-7e60035fd1c8"},"source":["def l1_reg(model):\n","  \"\"\"\n","    Inputs: Pytorch model\n","    This function calculates the l1 norm of the all the tensors in the model\n","  \"\"\"\n","  l1 = 0.0\n","  ####################################################################\n","  # Fill in all missing code below (...),\n","  # then remove or comment the line below to test your function\n","  # raise NotImplementedError(\"Complete the l1_reg function\")\n","  ####################################################################\n","  for param in model.parameters():\n","    l1 += torch.sum(torch.abs(param))\n","    print(l1)\n","\n","  return l1\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 1.1: L1 Regularization')\n","\n","set_seed(seed=SEED)\n","## uncomment to test\n","net = nn.Linear(20, 20)\n","print(f\"L1 norm of the model: {l1_reg(net)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n","tensor(46.1721, grad_fn=<AddBackward0>)\n","tensor(48.4451, grad_fn=<AddBackward0>)\n","L1 norm of the model: 48.445133209228516\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"abMKO7uWigWG"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_f9f318de.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"CL4hszBgigWH"},"source":["```\n","Random seed 2021 has been set.\n","L1 norm of the model: 48.445133209228516\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"M_-fYRnYigWI"},"source":["Now, let's train a classifier which uses L1 regularization. Tune the hyperparameter `lambda1` such that the validation accuracy is higher than that of the unregularized model."]},{"cell_type":"code","metadata":{"execution":{},"id":"MdYEZM2nigWJ","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["7e02d87203c84d4480e092103d21c7c7","79311011bb05414ebdf66f6024f46d63","3e0b2112b5a64465ae9f36ede63add1c","21a4380b8fab442a82021024bd8b71fc","7126b5b8fe3d4c638239efb26b1ca3f9","6ec6335331f94479922eb79d094588a9","9c8cafd4571349ccbcdbea2edc5e66f5","d0635a66ba0c4483beacbc85fdf53a3f"]},"executionInfo":{"status":"ok","timestamp":1628285820062,"user_tz":240,"elapsed":68595,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"264ff5ed-b753-45a8-845c-de38cfb157ed"},"source":["# Set the arguments\n","args1 = {\n","    'test_batch_size': 1000,\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","    'lambda1': 0.001  # <<<<<<<< Tune the hyperparameter lambda\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","\n","# Train the model\n","val_acc_l1reg, train_acc_l1reg, param_norm_l1reg, _ = main(args1,\n","                                                           model,\n","                                                           reg_train_loader,\n","                                                           reg_val_loader,\n","                                                           img_test_dataset,\n","                                                           reg_function1=l1_reg)\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_l1reg, label='Val Accuracy L1 Regularized',\n","         c='red', ls='dashed')\n","plt.plot(train_acc_l1reg, label='Train Accuracy L1 regularized',\n","         c='red', ls='solid')\n","plt.axhline(y=max(val_acc_l1reg), c='green', ls='dashed')\n","plt.title('L1 regularized model')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()\n","print(f\"maximum Validation Accuracy reached: {max(val_acc_l1reg)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7e02d87203c84d4480e092103d21c7c7","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=150.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["tensor(3549.1733, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3550.3066, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3731.9399, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3733.2932, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3740.8076, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3741.1348, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3547.2114, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3548.3440, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3729.9580, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3731.3113, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3738.8257, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3739.1528, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3543.3135, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3544.4446, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3726.0203, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3727.3735, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3734.8882, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3735.2153, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3537.5088, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3538.6377, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3720.1565, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3721.5093, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3729.0247, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3729.3516, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3529.8323, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3530.9585, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3712.4031, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3713.7554, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3721.2720, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3721.5989, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3520.3247, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3521.4478, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3702.8020, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3704.1536, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3711.6726, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3711.9995, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3509.0298, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3510.1492, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3691.3977, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3692.7483, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3700.2710, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3700.5979, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3495.9888, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3497.1038, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3678.2329, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3679.5823, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3687.1106, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3687.4373, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3481.2529, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3482.3630, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3663.3601, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3664.7078, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3672.2444, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3672.5710, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3464.8774, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3465.9829, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3646.8362, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3648.1821, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3655.7302, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3656.0566, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3446.9187, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3448.0193, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3628.7185, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3630.0623, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3637.6257, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3637.9521, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3427.4189, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3428.5144, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3609.0508, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3610.3921, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3617.9746, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3618.3008, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3406.4312, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3407.5210, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3587.8862, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3589.2290, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3596.8350, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3597.1609, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3384.0232, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3385.1072, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3565.2942, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3566.6399, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3574.2739, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3574.5996, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3360.2593, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3361.3369, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3541.3408, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3542.6897, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3550.3567, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3550.6824, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3335.1802, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3336.2507, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3516.0684, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3517.4204, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3525.1255, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3525.4509, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3308.8430, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3309.9065, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3489.5349, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3490.8896, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3498.6379, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3498.9712, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3281.3186, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3282.3748, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3461.8118, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3463.1692, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3470.9666, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3471.3223, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3252.6699, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3253.7192, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3432.9629, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3434.3228, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3442.1743, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3442.5530, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3222.9399, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3223.9829, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3403.0322, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3404.3943, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3412.3054, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3412.7070, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3192.1760, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3193.2129, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3372.0645, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3373.4285, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3381.4045, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3381.8293, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3160.4504, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3161.4814, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3340.1362, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3341.5027, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3349.5483, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3349.9961, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3127.8337, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3128.8591, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3307.3127, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3308.6821, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3316.8020, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3317.2725, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3094.3755, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3095.3945, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3273.6494, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3275.0215, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3283.2200, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3283.7129, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3060.1013, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3061.1135, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3239.1758, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3240.5503, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3248.8330, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3249.3481, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3025.0979, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3026.1028, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3203.9700, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3205.3474, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3213.7183, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3214.2549, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2989.4121, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2990.4097, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3168.0789, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3169.4590, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3177.9216, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3178.4795, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2953.1223, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2954.1133, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3131.5901, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3132.9758, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3141.5342, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3142.1123, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2916.2637, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2917.2485, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3094.5391, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3095.9324, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3104.5908, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3105.1887, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2878.9116, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2879.8901, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3056.9934, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3058.3940, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3067.1638, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3067.7805, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2841.1506, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2842.1235, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3019.0403, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3020.4480, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3029.3425, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3029.9775, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2803.0398, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2804.0068, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2980.7439, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2982.1584, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2991.1824, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2991.8347, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2764.6289, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2765.5898, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2942.1519, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2943.5728, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2952.7305, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2953.3992, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2726.0132, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2726.9680, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2903.3591, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2904.7861, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2914.0867, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2914.7710, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2687.2349, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2688.1829, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2864.4153, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2865.8508, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2875.3020, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2876.0010, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2648.3687, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2649.3101, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2825.3960, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2826.8396, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2836.4521, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2837.1648, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2609.4880, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2610.4236, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2786.3743, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2787.8257, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2797.6035, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2798.3291, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2570.6328, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2571.5627, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2747.3809, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2748.8394, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2758.7859, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2759.5234, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2531.8413, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2532.7659, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2708.4600, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2709.9250, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2720.0459, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2720.7944, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2493.1785, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2494.0979, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2669.6753, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2671.1467, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2681.4468, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2682.2053, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2454.7070, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2455.6228, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2631.0896, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2632.5671, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2643.0552, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2643.8230, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2416.4443, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2417.3579, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2592.7144, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2594.2012, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2604.8811, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2605.6572, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2378.4397, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2379.3511, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2554.5979, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2556.0942, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2566.9690, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2567.7527, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2340.7505, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2341.6602, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2516.8008, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2518.3076, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2529.3784, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2530.1687, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2303.4133, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2304.3220, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2479.3655, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2480.8828, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2492.1514, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2492.9475, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2266.5034, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2267.4114, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2442.3655, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2443.8928, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2455.3604, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2456.1616, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2230.0967, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2231.0044, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2405.8770, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2407.4148, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2419.0859, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2419.8916, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2194.2148, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2195.1221, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2369.9165, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2371.4678, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2383.3516, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2384.1611, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2158.8547, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2159.7627, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2334.4924, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2336.0571, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2348.1555, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2348.9680, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2124.0232, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2124.9324, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2299.6040, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2301.1819, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2313.4958, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2314.3110, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2089.7764, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2090.6870, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2265.3035, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2266.8945, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2279.4246, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2280.2417, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2056.1709, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2057.0837, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2231.6479, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2233.2520, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2245.9983, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2246.8171, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2023.2681, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2024.1840, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2198.7004, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2200.3174, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2213.2803, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2214.1001, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1991.0763, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1991.9960, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2166.4636, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2168.0930, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2181.2720, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2182.0928, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1959.6449, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1960.5684, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2134.9868, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2136.6287, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2150.0234, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2150.8445, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1928.9680, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1929.8948, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2104.2644, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2105.9187, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2119.5283, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2120.3496, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1899.0692, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1899.9996, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2074.3147, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2075.9810, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2089.8125, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2090.6338, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1870.0146, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1870.9490, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2045.2042, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2046.8824, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2060.9363, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2061.7573, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1841.8857, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1842.8239, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2017.0117, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2018.7015, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2032.9764, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2033.7971, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1814.6960, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1815.6375, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1989.7537, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1991.4548, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2005.9496, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(2006.7698, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1788.4116, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1789.3561, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1963.3967, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1965.1090, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1979.8217, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1980.6411, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1763.0476, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1763.9949, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1937.9554, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1939.6785, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1954.6072, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1955.4259, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1738.6345, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1739.5845, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1913.4639, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1915.1975, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1930.3402, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1931.1581, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1715.1455, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1716.0988, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1889.8998, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1891.6437, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1906.9983, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1907.8153, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1692.6544, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1693.6117, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1867.3281, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1869.0820, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1884.6475, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1885.4635, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1671.1506, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1672.1125, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1845.7358, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1847.4995, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1863.2740, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1864.0890, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1650.6021, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1651.5695, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1825.0959, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1826.8691, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1842.8506, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1843.6646, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1630.9902, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1631.9636, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1805.3844, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1807.1669, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1823.3529, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1824.1658, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1612.3806, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1613.3595, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1786.6669, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1788.4583, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1804.8466, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1805.6583, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1594.8115, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1595.7953, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1768.9884, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1770.7886, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1787.3768, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1788.1875, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1578.2467, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1579.2346, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1752.3036, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1754.1123, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1770.8982, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1771.7078, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1562.6610, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1563.6526, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1736.5939, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1738.4109, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1755.3922, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1756.2007, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1548.1274, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1549.1228, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1721.9279, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1723.7529, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1740.9310, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1741.7385, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1534.5851, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1535.5847, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1708.2450, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1710.0780, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1727.4539, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1728.2603, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1522.0444, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1523.0480, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1695.5570, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1697.3977, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1714.9690, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1715.7743, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1510.5737, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1511.5813, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1683.9296, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1685.7777, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1703.5421, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1704.3464, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1500.0784, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1501.0902, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1673.2678, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1675.1238, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1693.0789, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1693.8822, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1490.5676, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1491.5835, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1663.5829, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1665.4496, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1683.5931, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1684.3955, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1482.0884, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1483.1085, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1654.9154, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1656.7928, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1675.1224, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1675.9238, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1474.6017, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1475.6261, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1647.2340, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1649.1221, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1667.6355, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1668.4360, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1468.1118, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1469.1403, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1640.5410, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1642.4393, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1661.1343, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1661.9338, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1462.5890, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1463.6219, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1634.8038, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1636.7122, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1655.5864, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1656.3850, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1458.0430, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1459.0796, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1630.0320, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1631.9501, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1651.0049, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1651.8026, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1454.4292, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1455.4695, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1626.1836, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1628.1112, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1647.3458, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1648.1426, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1451.7039, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1452.7485, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1623.2137, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1625.1506, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1644.5627, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1645.3585, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1449.8134, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1450.8619, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1621.0731, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1623.0190, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1642.6064, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1643.4012, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1448.7224, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1449.7743, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1619.7281, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1621.6829, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1641.4432, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1642.2435, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1448.4294, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1449.4846, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1619.1737, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1621.1370, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1641.0682, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1641.8771, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1448.8750, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1449.9332, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1619.3542, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1621.3257, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1641.4255, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1642.2429, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1450.0132, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1451.0739, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1620.2202, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1622.1997, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1642.4661, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1643.2919, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1451.7852, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1452.8480, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1621.7181, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1623.7067, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1644.1373, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1644.9714, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1454.0935, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1455.1584, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1623.7505, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1625.7478, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1646.3407, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1647.1830, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1456.8931, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1457.9600, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1626.2687, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1628.2758, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1649.0288, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1649.8793, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1460.1235, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1461.1918, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1629.2107, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1631.2279, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1652.1390, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1652.9976, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1463.7791, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1464.8480, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1632.5717, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1634.5995, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1655.6666, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1656.5331, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1467.7606, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1468.8304, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1636.2493, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1638.2885, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1659.5095, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1660.3838, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1472.0146, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1473.0854, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1640.1932, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1642.2435, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1663.6210, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1664.5029, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1476.5305, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1477.6027, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1644.3921, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1646.4531, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1667.9850, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1668.8746, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1481.2651, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1482.3389, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1648.8048, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1650.8763, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1672.5610, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1673.4583, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1486.1101, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1487.1848, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1653.3202, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1655.4020, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1677.2374, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1678.1421, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1491.0112, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1492.0874, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1657.8853, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1659.9771, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1681.9620, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1682.8740, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1495.8806, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1496.9581, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1662.4158, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1664.5172, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1686.6499, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1687.5692, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1500.6968, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1501.7762, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1666.8871, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1668.9980, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1691.2766, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1692.2031, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1505.4602, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1506.5417, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1671.2961, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1673.4163, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1695.8389, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1696.7725, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1510.0509, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1511.1339, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1675.5222, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1677.6512, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1700.2158, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1701.1565, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1514.4236, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1515.5079, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1679.5227, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1681.6604, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1704.3651, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1705.3127, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1518.5159, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1519.6012, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1683.2345, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1685.3806, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1708.2236, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1709.1781, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1522.3250, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1523.4108, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1686.6573, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1688.8116, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1711.7910, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1712.7522, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1525.8188, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1526.9045, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1689.7592, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1691.9214, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1715.0353, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1716.0032, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1528.9702, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1530.0555, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1692.5110, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1694.6808, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1717.9282, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1718.9027, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1531.7584, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1532.8433, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1694.8972, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1697.0745, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1720.4547, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1721.4358, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1534.1589, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1535.2427, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1696.8910, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1699.0754, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1722.5868, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1723.5743, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1536.1228, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1537.2051, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1698.4406, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1700.6320, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1724.2725, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1725.2664, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1537.6021, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1538.6830, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1699.4996, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1701.6978, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1725.4675, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1726.4678, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1538.5704, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1539.6504, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1700.0444, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1702.2491, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1726.1466, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1727.1531, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1539.0179, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1540.0964, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1700.0596, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1702.2711, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1726.2949, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1727.3075, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1538.9236, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1539.9999, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1699.5254, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1701.7446, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1725.8932, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1726.9117, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1538.2892, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1539.3632, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1698.4489, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1700.6755, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1724.9471, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1725.9718, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1537.1013, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1538.1725, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1696.8168, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1699.0505, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1723.4435, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1724.4740, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1535.3589, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1536.4271, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1694.6241, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1696.8649, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1721.3776, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1722.4139, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1533.0712, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1534.1360, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1691.8806, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1694.1281, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1718.7588, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1719.8009, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1530.2539, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1531.3159, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1688.6051, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1690.8590, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1715.6061, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1716.6539, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1526.8948, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1527.9536, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1684.7910, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1687.0511, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1711.9130, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1712.9664, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1522.9800, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1524.0350, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1680.4116, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1682.6779, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1707.6527, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1708.7117, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1518.5220, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1519.5728, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1675.4788, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1677.7507, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1702.8372, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1703.9016, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1513.5049, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1514.5508, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1669.9840, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1672.2616, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1697.4579, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1698.5278, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1507.9426, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1508.9833, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1663.9381, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1666.2211, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1691.5258, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1692.6010, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1501.8733, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1502.9083, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1657.3818, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1659.6699, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1685.0814, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1686.1620, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1495.3131, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1496.3423, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1650.3296, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1652.6226, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1678.1394, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1679.2251, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1488.2791, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1489.3021, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1642.7981, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1645.0957, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1670.7163, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1671.8073, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1480.7742, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1481.7909, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1634.7922, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1637.0944, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1662.8173, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1663.9132, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1472.7856, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1473.7957, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1626.2996, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1628.6058, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1654.4296, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1655.5305, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1464.3179, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1465.3206, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1617.3258, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1619.6361, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1645.5592, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1646.6652, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1455.3615, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1456.3562, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1607.8582, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1610.1722, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1636.1932, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1637.3041, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1445.9586, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1446.9453, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1597.9401, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1600.2577, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1626.3755, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1627.4912, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1436.1438, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1437.1222, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1587.6069, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1589.9280, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1616.1412, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1617.2617, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1425.9211, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1426.8917, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1576.8604, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1579.1844, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1605.4918, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1606.6171, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1415.2869, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1416.2500, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1565.6958, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1568.0228, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1594.4229, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1595.5527, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1404.2593, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1405.2147, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1554.1367, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1556.4670, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1582.9585, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1584.0930, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1392.8590, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1393.8064, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1542.2019, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1544.5356, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1571.1171, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1572.2561, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1381.0657, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1382.0050, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1529.8708, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1532.2078, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1558.8779, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1560.0215, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1368.8894, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1369.8204, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1517.1587, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1519.4987, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1546.2563, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1547.4044, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1356.3911, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1357.3140, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1504.1233, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1506.4661, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1533.3114, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1534.4639, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1343.5872, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1344.5023, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1490.7800, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1493.1252, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1520.0571, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1521.2140, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1330.4674, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1331.3751, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1477.1125, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1479.4602, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1506.4774, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1507.6385, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1317.0524, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1317.9526, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1463.1450, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1465.4948, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1492.5961, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1493.7616, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1303.3630, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1304.2556, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1448.8984, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1451.2501, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1478.4343, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1479.6040, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1289.4094, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1290.2943, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1434.3862, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1436.7395, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1464.0055, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1465.1794, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1275.1885, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1276.0657, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1419.6053, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1421.9607, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1449.3074, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1450.4855, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1260.7434, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1261.6128, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1404.5986, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1406.9559, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1434.3822, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(1435.5645, device='cuda:0', grad_fn=<AddBackward0>)\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":413},"needs_background":"light"}},{"output_type":"stream","text":["maximum Validation Accuracy reached: 53.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"AjV5uYn7igWN"},"source":["What value of `lambda1` hyperparameter, worked for L1 Regularization? (Note that the $\\lambda$ in the equations is the `lambda1` in the code for clarity)"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"IXbLvZ9migWV"},"source":["## Section 1.3: L2 / Ridge Regularization"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"1CjCRFBHigWY"},"source":["L2 Regularization, sometimes referred to as “Weight Decay”, is widely used. It works by adding a quadratic penalty term to the Cross Entropy Loss Function $L$, which results in a new Loss Function $L_R$  given by:\n","\n","\\begin{equation}\n","L_R = L + \\lambda \\sum \\left( w^{(r)}_{ij} \\right)^2\n","\\end{equation}\n","\n","where, again, $r$ denotes the layer, and $ij$ the specific weight in that layer.\n","\n","In order to get further insight into L2 Regularization, we investigate its effect on the Gradient Descent based update equations for the weight and bias parameters. Taking the derivative on both sides of the above equation, we obtain\n","\n","\\begin{equation}\n","\\frac{\\partial L_R}{\\partial w^{(r)}_{ij}}=\\frac{\\partial L}{\\partial w^{(r)}_{ij}} + 2\\lambda w^{(r)}_{ij}\n","\\end{equation}\n","\n","Thus the weight update rule becomes:\n","\n","\\begin{equation}\n","w^{(r)}_{ij}←w^{(r)}_{ij}−η\\frac{\\partial L}{\\partial w^{(r)}_{ij}}−2 \\eta \\lambda w^{(r)}_{ij}=(1−2 \\eta \\lambda)w^{(r)}_{ij} − \\eta \\frac{\\partial L}{\\partial w^{(r)}_{ij}}\n","\\end{equation}\n","\n","where, $\\eta$ is learning rate."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"rFQ2rmI-igWd"},"source":["### Coding Exercise 1.2: L2 Regularization\n","\n","Write a function which calculates the L2 norm of all the tensors of a Pytorch model. (What did we call this before?)"]},{"cell_type":"code","metadata":{"execution":{},"id":"V6TNUf3qigWe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628285820274,"user_tz":240,"elapsed":38,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"5e87ccf7-fd9e-4be3-d581-1dd04457ee25"},"source":["def l2_reg(model):\n","\n","  \"\"\"\n","    Inputs: Pytorch model\n","    This function calculates the l2 norm of the all the tensors in the model\n","  \"\"\"\n","\n","  l2 = 0.0\n","  ####################################################################\n","  # Fill in all missing code below (...),\n","  # then remove or comment the line below to test your function\n","  raise NotImplementedError(\"Complete the l2_reg function\")\n","  ####################################################################\n","  for param in model.parameters():\n","    l2 += ...\n","\n","  return l2\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 1.2: L2 Regularization')\n","\n","set_seed(SEED)\n","## uncomment to test\n","# net = nn.Linear(20, 20)\n","# print(f\"L2 norm of the model: {l2_reg(net)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"d1uQDFmbigWf"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_8505e24d.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"t1kLkmshigWg"},"source":["```\n","Random seed 2021 has been set.\n","L2 norm of the model: 7.328375816345215\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"uA8E8uaWigWh"},"source":["Now we'll train a classifier which uses L2 regularization. Tune the hyperparameter `lambda` such that the val accuracy is higher than that of the unregularized model."]},{"cell_type":"code","metadata":{"execution":{},"id":"l9IvgAmiigWi","colab":{"base_uri":"https://localhost:8080/","height":412,"referenced_widgets":["5c78fd1ee86d44e59c2ca35987f0d791","4bb7fb714e3f497486245bf5db7cd867","571fd23edc8a4c7aac82e73c6dfbc269","bd6c6ab837ae452a85615c3594bd1a9e","25e7066a882a42cbb0cdd41610bd9af2","19e114b12ba14408804a20093a4ba478","2db85781cdd24c58945518e2303163e1","099b4f7c578e49518e746d647fd0270a"]},"executionInfo":{"status":"error","timestamp":1628285913766,"user_tz":240,"elapsed":341,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"abbb3d59-0250-4123-b092-05b4fc1ae78f"},"source":["# Set the arguments\n","args2 = {\n","    'test_batch_size': 1000,\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","    'lambda2': 0.001  # <<<<<<<< Tune the hyperparameter lambda\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","\n","# Train the model\n","val_acc_l2reg, train_acc_l2reg, param_norm_l2reg, model = main(args2,\n","                                                               model,\n","                                                               train_loader,\n","                                                               val_loader,\n","                                                               img_test_dataset,\n","                                                               reg_function2=l2_reg)\n","\n","## Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_l2reg, label='Val Accuracy L2 regularized',\n","         c='red', ls='dashed')\n","plt.plot(train_acc_l2reg, label='Train Accuracy L2 regularized',\n","         c='red', ls='solid')\n","plt.axhline(y=max(val_acc_l2reg), c='green', ls='dashed')\n","plt.title('L2 Regularized Model')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()\n","print(f\"maximum Validation Accuracy reached: {max(val_acc_l2reg)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5c78fd1ee86d44e59c2ca35987f0d791","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=150.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"error","ename":"NotImplementedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-836c6e7bd518>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m                                                                \u001b[0mval_loader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m                                                                \u001b[0mimg_test_dataset\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m                                                                reg_function2=l2_reg)\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m## Train and Test accuracy plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-3cd7c0e52c2a>\u001b[0m in \u001b[0;36mmain\u001b[0;34m(args, model, train_loader, val_loader, test_data, reg_function1, reg_function2, criterion)\u001b[0m\n\u001b[1;32m    130\u001b[0m     trained_model = train(args, model, train_loader, optimizer, epoch,\n\u001b[1;32m    131\u001b[0m                           \u001b[0mreg_function1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreg_function1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m                           reg_function2=reg_function2)\n\u001b[0m\u001b[1;32m    133\u001b[0m     \u001b[0mtrain_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrained_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Train'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0mval_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrained_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Val'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-3cd7c0e52c2a>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(args, model, train_loader, optimizer, epoch, reg_function1, reg_function2, criterion)\u001b[0m\n\u001b[1;32m     69\u001b[0m     \u001b[0;31m# L2 regularization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mreg_function1\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mreg_function2\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m       \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'lambda2'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mreg_function2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     72\u001b[0m     \u001b[0;31m# No regularization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mreg_function1\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mreg_function2\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-39-24c52b6ac624>\u001b[0m in \u001b[0;36ml2_reg\u001b[0;34m(model)\u001b[0m\n\u001b[1;32m     10\u001b[0m   \u001b[0;31m# Fill in all missing code below (...),\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;31m# then remove or comment the line below to test your function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Complete the l2_reg function\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;31m####################################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mparam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotImplementedError\u001b[0m: Complete the l2_reg function"]}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"_9jq-oD2igWj"},"source":["What value `lambda2` worked for L2 Regularization? (Note that the $\\lambda$ in the equations is the `lambda2` in the code for clarity)"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"XjGzfqg5igWl"},"source":["Now, let's run a model with both L1 and L2 regularization terms."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"QpqZyIU9igWn","colab":{"base_uri":"https://localhost:8080/","height":511,"referenced_widgets":["98e1388beda54365beba888698b17030","fa1b98be189e40af86a8b061317103c8","8e19c60a036b46cfaa13e7993fa0c1b4","777285a005154489b45676f27ec56ede","7743e0b0af2c457dbd1c5c37bf5c1f87","ff92b97de52a49eebb5e425bcded721b","cd6e52bc9c374ae6b5c6bdc487af6fe6","fe5835fef6a5489ab82bee4c5063050d"]},"executionInfo":{"status":"error","timestamp":1628285924432,"user_tz":240,"elapsed":314,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"97fcc438-2de7-40d5-938f-3a9d1b98190a"},"source":["# @markdown Visualize all of them together (Run Me!)\n","\n","# @markdown `lambda1=0.001` and `lambda2=0.001`\n","\n","args3 = {\n","    'test_batch_size': 1000,\n","    'epochs': 150,\n","    'lr': 5e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","    'lambda1': 0.001,\n","    'lambda2': 0.001\n","}\n","\n","# Intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNet()\n","val_acc_l1l2reg, train_acc_l1l2reg, param_norm_l1l2reg, _ = main(args3,\n","                                                                 model,\n","                                                                 train_loader,\n","                                                                 val_loader,\n","                                                                 img_test_dataset,\n","                                                                 reg_function1=l1_reg,\n","                                                                 reg_function2=l2_reg)\n","\n","plt.figure()\n","\n","plt.plot(val_acc_l2reg, c='red', ls='dashed')\n","plt.plot(train_acc_l2reg,\n","         label=f\"L2 regularized, $\\lambda_2$={args2['lambda2']}\",\n","         c='red', ls='solid')\n","plt.axhline(y=max(val_acc_l2reg), c='red', ls='dashed')\n","\n","plt.plot(val_acc_l1reg, c='green', ls = 'dashed')\n","plt.plot(train_acc_l1reg,\n","         label=f\"L1 regularized, $\\lambda_1$={args1['lambda1']}\",\n","         c='green', ls='solid')\n","plt.axhline(y=max(val_acc_l1reg), c='green', ls='dashed')\n","\n","plt.plot(val_acc_unreg, c='blue', ls = 'dashed')\n","plt.plot(train_acc_unreg,\n","         label='Unregularized', c='blue', ls='solid')\n","plt.axhline(y=max(val_acc_unreg), c='blue', ls='dashed')\n","\n","plt.plot(val_acc_l1l2reg, c='orange', ls='dashed')\n","plt.plot(train_acc_l1l2reg,\n","         label=f\"L1+L2 regularized, $\\lambda_1$={args3['lambda1']}, $\\lambda_2$={args3['lambda2']}\",\n","         c='orange', ls='solid')\n","plt.axhline(y=max(val_acc_l1l2reg), c='orange', ls = 'dashed')\n","\n","plt.xlabel('epoch')\n","plt.ylabel('Accuracy (%)')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"98e1388beda54365beba888698b17030","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=150.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["tensor(3549.1733, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3550.3066, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3731.9399, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3733.2932, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3740.8076, device='cuda:0', grad_fn=<AddBackward0>)\n","tensor(3741.1348, device='cuda:0', grad_fn=<AddBackward0>)\n"],"name":"stdout"},{"output_type":"error","ename":"NotImplementedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-b3fe5b737fdb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m                                                                  \u001b[0mimg_test_dataset\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m                                                                  \u001b[0mreg_function1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ml1_reg\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m                                                                  reg_function2=l2_reg)\n\u001b[0m\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-3cd7c0e52c2a>\u001b[0m in \u001b[0;36mmain\u001b[0;34m(args, model, train_loader, val_loader, test_data, reg_function1, reg_function2, criterion)\u001b[0m\n\u001b[1;32m    130\u001b[0m     trained_model = train(args, model, train_loader, optimizer, epoch,\n\u001b[1;32m    131\u001b[0m                           \u001b[0mreg_function1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreg_function1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m                           reg_function2=reg_function2)\n\u001b[0m\u001b[1;32m    133\u001b[0m     \u001b[0mtrain_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrained_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Train'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0mval_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrained_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Val'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-3cd7c0e52c2a>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(args, model, train_loader, optimizer, epoch, reg_function1, reg_function2, criterion)\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0;31m# Both L1 and L2 regularizations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m       \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'lambda1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mreg_function1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'lambda2'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mreg_function2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m     \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-39-24c52b6ac624>\u001b[0m in \u001b[0;36ml2_reg\u001b[0;34m(model)\u001b[0m\n\u001b[1;32m     10\u001b[0m   \u001b[0;31m# Fill in all missing code below (...),\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;31m# then remove or comment the line below to test your function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Complete the l2_reg function\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;31m####################################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mparam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotImplementedError\u001b[0m: Complete the l2_reg function"]}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"oy9wwAfsigWo"},"source":["Now, let's visualize what these different regularization does to the parameters of the model. We observe the effect by computing the size (technically, the Frobenius norm) of the model parameters"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"tAwgkDMbigWo","colab":{"base_uri":"https://localhost:8080/","height":654},"executionInfo":{"status":"error","timestamp":1628285928941,"user_tz":240,"elapsed":718,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"2f6a117b-8b59-420d-db97-1b40fcfcb9ce"},"source":["# @markdown #### Visualize Norm of the Models (Train Me!)\n","plt.figure()\n","plt.plot(param_norm_unreg, label='Unregularized', c='blue')\n","plt.plot(param_norm_l1reg, label='L1 Regularized', c='green')\n","plt.plot(param_norm_l2reg, label='L2 Regularized', c='red')\n","plt.plot(param_norm_l1l2reg, label='L1+L2 Regularized', c='orange')\n","plt.xlabel('epoch')\n","plt.ylabel('Parameter Norms')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-f5e0d953b5b0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparam_norm_unreg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Unregularized'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparam_norm_l1reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'L1 Regularized'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparam_norm_l2reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'L2 Regularized'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparam_norm_l1l2reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'L1+L2 Regularized'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'orange'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'epoch'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'param_norm_l2reg' is not defined"]},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABFwAAAM8CAYAAABqKrQdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd5RdZbk/8O9OCFJDiTRFKSqQ0CIRLlWKF1ABERSuNGnSS+g1dASkhCZNIkWKFBvKRSkWBEFReuhcJCDSpSYQINm/P/bkd+ZAgJQzs8/MfD5rzZo5z3vO8KylazF+ffbzFmVZBgAAAIDW6Vd3AwAAAAC9jcAFAAAAoMUELgAAAAAtJnABAAAAaDGBCwAAAECLCVwAAAAAWkzgAgAAANBiAhcAAACAFhO4AAAAALSYwAUAAACgxQQuAAAAAC0mcAEAAABosT4buBRFcVlRFJfV3QcAAADQ+8xQdwM1WmK55ZZbLsnmdTcCAAAAtK1iWj7UZydcAAAAALqKwAUAAACgxQQuAAAAAC0mcAEAAABoMYELAAAAQIsJXAAAAABaTOACAAAA0GICFwAAAIAWE7gAAAAAtJjABQAAAKDFBC4AAAAALSZwAQAAAGgxgQsAAABAiwlcAAAAAFpM4AIAAADQYgIXAAAAgBYTuAAAAAC0mMAFAAAAoMUELgAAAAAtJnABAAAAaDGBCwAAAECLCVwAAAAAWkzgAgAAANBiAhcAAACAFhO4AAAAALSYwAUAAACgxQQuAAAAAC0mcAEAAABoMYELAAAAQIsJXAAAAABaTOACAAAA0GICFwAAAKDLlGXy3nt1d9H9BC4AAABAy739dnLBBcmyyyZnnVV3N91P4AIAAAC0zAsvJEcdlSy0ULL99sn99yenn55MmFB3Z91rhrobAAAAAHq+0aOTU09NLrssGT+++eyFF5IHHkiWWaae3uogcAEAAACmycSJyfXXJyNHJjfd9MHzz3wm2WOP5HvfS+aaq/v7q1NLApeiKGZJsnqSYUmW6/j+2Y7jo8qyPPIjPjvnZD47f8fxtmVZXtSKHgEAAIDWGDcuueSS5LTTkocf/uD5Cisk++yTbLxxMmBA9/fXDlo14bJCkuum8bPfTHJhi/oAAAAAusizz1YLcM89N3n55eazfv2qgGXvvZOVVkqKop4e20UrHyl6Jcldnb5OTWNS5eM8l+Tujs/dmeQXLewLAAAAmA53313tZ7niiuTdd5vPZp+9emRojz2SRRapp7921KrA5ZayLOfuXCiK4oQp/Owl739sqOjrMRgAAADUbOLE5Nprq6DlT3/64PnCCyfDhyfbbZcMHNjd3bW/lgQuZVlO8+VO0/NZAAAAoLXefDO56KLqKufHH//g+SqrVI8NffObSf/+3d5ej+GWIgAAACDPPpuceWZyzjnJq682n/Xvn2yySRW0rLBCPf31NAIXAAAA6MMeeKC61vnSS5N33mk+m3POZMcdk913r654ZsoJXAAAAKCPKctqL8vJJyfXTebO4c99Ltlrr2SbbZLZZuvu7nqHXhm4FEVx5xS8bYkubwQAAADayLvvJj/7WRW03HXXB89XXDHZf/9kww3tZ5levTJwAQAAABreeCMZNSo57bTkqaeaz4qiWoC7337JyivX019v1CsDl7Ish33cezqmYJbrhnYAAACgFs88Uy3CPffc5LXXms9mminZdttqEe4XvlBPf71ZrwxcAAAAoC+7//7klFOSyy+vHiPqbJ55qiW4u+xS/UzXELgAAABAL1CWye9/X+1nuf76D55/4QvJvvsm3/1uMvPM3d9fXyNwAQAAgB7s3XeTq65KTjopuffeD56vumq1n2WDDZJ+/bq/v75K4AIAAAA90NixyY9/nIwcmYwZ03zWr1+y8cbVRMuKK9bTX1/XssClKIq5knS+NGpSbjZLURSf7FR/uyzLN9/32c7nnc32vrNxZVmOm/5uAQAAoGd66aXkhz+svl5+uflsllmS7bZL9tor+dzn6umPSlGWZWt+UVE8mWShKXjrxWVZbvO+z05pE0eVZXnk1HU2eUVR3Lnccsstd+edd7bi1wEAAECXGjOmmmYZNSoZ975RhE9+Mtlzz2TXXZNBg+rprxcrpuVDHikCAACANnbffcmJJyZXXJFMmNB8tvDC1X6WbbetpltoHy0LXMqyXHg6PjtNaREAAAD0RmWZ/PnPyQ9+kPz2tx88X3bZ5MADk002SWYwStGW/McCAAAAbWLixOSaa6qg5W9/++D5mmtWQcs66ySF0YW2JnABAACAmo0fn1x6aXW18yOPNJ8VRXXj0IEHJssvX09/TD2BCwAAANTk9deT885LTjst+fe/m89mnDHZeutqR8tii9XTH9NO4AIAAADd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igAAYCqUZXLRRdVS3M5hy8CBydlnJ7feKmwBwIQLAABMsUcfrR4f+uMfm+ubbJKcfnqywAL19AVA+zHhAgAAH2P8+OToo6vJlc5hy0ILJddem1x1lbAFgGYmXAAA4CPcdlvyve9VVz5P0r9/svfeyZFHJrPOWltrALQxgQsAAEzG668nhxxS7WUpy0Z9+eWTH/0oGTq0vt4AaH8CFwAAeJ/f/CbZZZfkmWcatVlnTY47Ltltt2rCBQA+isAFAAA6PPdcMnx4tZOls69/PTnnnOSzn62nLwB6HktzAQDo88oyueCCZPDg5rBlnnmSn/60WowrbAFgaphwAQCgT3v88WSnnZI//KG5vvXWySmnJIMG1dMXAD2bCRcAAPqk995LTjyxuuq5c9iyyCLJDTckF10kbAFg2plwAQCgz7nzzuqq53vuadT69Uv23be66nmWWWprDYBeQuACAECfMW5ccsQRyciRycSJjfrQocmoUcmwYfX1BkDvInABAKBPuPHGalfLP//ZqM00U3LUUcneeycDBtTXGwC9j8AFAIBe7eWXq0eFLr64ub7WWsl55yWf/3w9fQHQu1maCwBAr1SW1ZXOgwc3hy1zzVVdAX3TTcIWALqOCRcAAHqdp55Kdtklue665vqmmyann57MP389fQHQd5hwAQCg15gwITnzzGTIkOawZcEFk1//OrnySmELAN3DhAsAAL3C6NHVVc9/+1ujVhTJrrsmxx2XDBxYX28A9D0CFwAAerS3364ClRNOSN59t1EfPLi66nnllevrDYC+S+ACAECPddttyfbbJw8/3KgNGJAcemhy0EHJJz5RX28A9G0CFwAAepw330wOOST54Q+r24gmWWmlaqplyJD6egOAROACAEAPc8MNyY47JmPGNGqzzVY9UrTLLkk/10IA0AYELgAA9AivvJLss09y0UXN9a9+NTnvvOSzn62lLQCYLIELAABt75e/rG4beu65Rm3uuZPTTku23LK6jQgA2onABQCAtvX888nuuyc/+1lzfZNNkjPPTOabr56+AODjCFwAAGg7ZZlcckmy117Vo0STzD9/cvbZyUYb1dcbAEwJgQsAAG3lqaeSnXZKfve75vp22yUnn5zMNVc9fQHA1BC4AADQFiZOTM49NznwwOra50kWXjj50Y+StdeurTUAmGoCFwAAavfoo8n3vpfcckujVhTJHnsk3/9+de0zAPQkAhcAAGrz3nvJKackRxyRjB/fqC+xRPLjHycrr1xfbwAwPQQuAADU4t57q70sd93VqPXvnxx0UDJiRDLTTPX1BgDTS+ACAEC3Gj8+OfbY5IQTqgmXSb74xeSCC5KhQ+vrDQBaReACAEC3uf32ZPvtk4ceatQ+8YnkqKOSffdNZvDXKQC9hH+lAQDQ5caOTQ49NDnjjKQsG/VVV01GjUoWX7y+3gCgKwhcAADoUjfdlOywQ/Lkk43abLNVjxTtskvSr19trQFAlxG4AADQJV59Ndlvv+q2oc7WXTc577xkoXQB7toAACAASURBVIXq6QsAuoPABQCAlrv22mSnnZJ//7tRm2uu5LTTkq22Soqivt4AoDsY4AQAoGX+858qUNlgg+aw5dvfTh58MPnud4UtAPQNJlwAAGiJX/6y2sny/PON2rzzJmefnXzrW/X1BQB1MOECAMB0efHF5DvfSTbeuDls2WKLaqpF2AJAX2TCBQCAaXb11cluu1WhyyQLLJCce27yjW/U1xcA1M2ECwAAU+3556u9LJtu2hy2bL118sADwhYAMOECAMAUK8vk8suTPfesFuROsuCCyY9+lHzta/X1BgDtxIQLAABT5N//TjbcMNlyy+awZYcdktGjhS0A0JkJFwAAPlJZJhdfnOy9d/Lqq436Qgslo0Yl//3f9fUGAO3KhAsAAB/q6aeT9dZLtt22OWzZddfk/vuFLQDwYUy4AADwAWVZTa/su2/yxhuN+qKLJj/+cbLGGrW1BgA9ggkXAACaPPlkss46yY47NsKWokiGD0/uu0/YAgBTwoQLAABJkokTk3POSQ48MBk7tlFfbLHkgguSVVaprzcA6GlMuAAAkP/7v2SttZLdd2+ELf36Jfvtl9xzj7AFAKaWCRcAgD5swoTkzDOTQw5J3nqrUR88OLnwwuS//qu+3gCgJxO4AAD0UY88kmy3XXLbbY1a//7JAQckhx+ezDRTfb0BQE8ncAEA6GMmTEhOOy0ZMSJ5++1Gfemlq6mWYcPq6w0AeguBCwBAH/Loo8m22zZPtcwwQ/VI0aGHJjPOWF9vANCbCFwAAPqAiROTM85IDj64eapl6NBqqmXo0Pp6A4DeSOACANDLPf54tavlllsatRlmSA47rApgBgyorzcA6K0ELgAAvdTEiclZZyUHHZSMG9eoL7NMcvHFploAoCv1q7sBAABa74knkrXWSvbcsxG29O9f3T70978LWwCgq5lwAQDoRSZOTM47L9l//2Ts2EZ9qaWSiy5yAxEAdBcTLgAAvcSYMck66yS77toIW/r1q24g+sc/hC0A0J1MuAAA9HBlmYwaley7b/LGG4364MHVrpbll6+vNwDoq0y4AAD0YE8/nXz1q8mOOzbCln79kgMOSO66S9gCAHUx4QIA0AOVZbWTZa+9ktdfb9QXW6yqr7RSXZ0BAIkJFwCAHueZZ5L110+2264RthRF9UjRPfcIWwCgHZhwAQDoIcoyueSS6qrn115r1D//+WqqZZVVamsNAHgfEy4AAD3As88mG26YbL11c9gyfHhy773CFgBoNyZcAADaWFkmP/1psvvuySuvNOqLLppccEGy+ur19QYAfDgTLgAAber555NvfSvZYovmsGX33ZP77hO2AEA7a6vApSiK1YqiuLIoin8VRTG+KIoXiqK4sSiKzeruDQCgO115ZbLkkskvf9moLbxw8oc/JGeemcw6a22tAQBToG0Cl6IoTkjy5ySbJvl0knFJ5kzy30kuL4riF0VReAQKAOjVXnwx2XTT5DvfSV5+uVHfeedqqmXNNevrDQCYcm0RuBRFsVOSAzteXpHkM2VZzpVk9iTbJBmbZKMkJ9bSIABAN/j5z6uplquvbtQ+85nkhhuSc85JZp+9vt4AgKlTe+DSMbVyVMfLu5JsUZblv5KkLMvxZVlenGS/jvM9iqJYtIY2AQC6zMsvJ5ttlnz729WEyyTf+14yenSy9tr19QYATJvaA5ckw5LM1/HzKWVZTpzMe85P8mqqW5W27K7GAAC62jXXVFMtV1zRqH3608lvf5ucf34ycGB9vQEA064dApeFOv384OTeUJblhCSPdrxcp8s7AgDoYv/5T7LVVsk3v1ndRjTJNttUUy1f/WptrQEALdBuS2j7T8HZUt3RCABAV7n22mTHHZNnn23UFligmmhZb736+gIAWqcdApcnO/28VJI73/+GoihmTPKFjpdzFEUxa1mWYz/sFxZF8YHfMRlLTE2TAADT69VXk732Si6+uLm+1VbJ6acnc81VT18AQOu1wyNFdyWZNEh74Idc/bxHks5PMHuaGQDoUX7722SppZrDlvnmS371q+QnPxG2AEBvU/uES1mW7xVFcXSSs5IMTnJt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5p03ufLK5JprhC0AAD2VCRcAqMETTyQ77VQ9KtTZNtskp5ySzD13LW0BANAiJlwAoBu9914ycmSy9NLNYcsiiyQ33phceKGwBQCgNzDhAgDd5L77ku23T/7xj0atX79kr72So49OZp21vt4AAGgtgQsAdLG3306OOSY58cRqwmWSZZaprnpefvn6egMAoGsIXACgC91yS7LDDskjjzRqM86YHH54csAByYAB9fUGAEDXEbgAQBd4/fXkwAOTc89trq+6anL++ckSS9TTFwAA3cPSXABosd/8JhkypDlsmX325Oyzk5tvFrYAAPQFJlwAoEWefTYZPjy5+urm+gYbVGHLggvW0xcAAN3PhAsATKeJE5NzzqkmVzqHLfPMk1xxRXLNNcIWAIC+xoQLAEyH++5Ldtop+etfm+tbb52cckoyaFA9fQEAUC8TLgAwDcaNSw46KBk2rDls+cIXkt//PrnoImELAEBfZsIFAKbS736X7LJL8uSTjdqAAcnBB1dfM81UW2sAALQJgQsATKHnnkv22iu58srm+pe/XN1INHhwPX0BANB+PFIEAB9j4sTkvPOqpbidw5a55kp+/OPkj38UtgAA0MyECwB8hNGjkx13TG6/vbm+1VbJyScn885bT18AALQ3Ey4AMBnjxlX7WL74xeaw5fOfT268MfnJT4QtAAB8OBMuAPA+11+f7Lpr8sQTjdqAAcmBByaHHJLMPHN9vQEA0DMIXACgw/PPJ3vvnfz0p831VVetdrgMGVJPXwAA9DweKQKgz5s4MTn//GopbuewZc45q/rNNwtbAACYOiZcAOjT7r23enzottua61tskZxySjLffPX0BQBAz2bCBYA+6fXXq8eHhg1rDls+97nkhhuSSy8VtgAAMO1MuADQp5RlcuWVyT77JM8+26gPGJDsv38yYoSluAAATD+BCwB9xiOPJLvtlvz+9831tdZKzjqr2uECAACt4JEiAHq9ceOSQw9Nll66OWyZf/5qSe5NNwlbAABoLRMuAPRqv/lNssceyZgxjVq/flXtqKOSOeaorzcAAHovgQsAvdKTTyZ77lkFLp2ttFJy9tnJ0KG1tAUAQB/hkSIAepXx45PjjkuGDGkOWwYNSkaNSm69VdgCAEDXM+ECQK9x3XXJ8OHJ448313fYITn++Cp0AQCA7iBwAaDH+7//S/baK7n22ub6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\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":414},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"i6tiUkWTigWp"},"source":["In the above plots, you should have seen that even after the model achieves 100% train accuracy the val accuracies are fluctuating. This suggests that the model is still trying to learn something. Why would this be the case?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"TNPMGG7DigWq"},"source":["---\n","# Section 2: Dropout\n","\n","*Time estimate: ~25 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"EuVjdT_LigWr"},"source":["# @title Video 2: Dropout\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1gU4y1G7V2\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"UZfUzawej3A\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 2: Dropout')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"kkEmEh4xigWs"},"source":["In dropout, we literally drop out (zero out) some neurons during training. Throughout training, on each iteration, standard dropout zeros out some fraction (usually 1/2) of the nodes in each layer before calculating the subsequent layer. Randomly selecting different subsets to dropout introduces noise into the process and reduces overfitting.\n","\n","<center><img src=\"https://d2l.ai/_images/dropout2.svg\" alt=\"Dropout\" width=\"600\"/></center>\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"qWAucFg1igWx"},"source":["Now let's revisit the toy dataset that we generated above to visualize how the dropout stabilizes training on a noisy dataset. We will slightly modify the architecture we used above to add dropout layers."]},{"cell_type":"code","metadata":{"execution":{},"id":"-LOvT0d7igWy"},"source":["# Network Class - 2D\n","class NetDropout(nn.Module):\n","  def __init__(self):\n","    super(NetDropout, self).__init__()\n","\n","    self.fc1 = nn.Linear(1, 300)\n","    self.fc2 = nn.Linear(300, 500)\n","    self.fc3 = nn.Linear(500, 1)\n","    # We add two dropout layers\n","    self.dropout1 = nn.Dropout(0.4)\n","    self.dropout2 = nn.Dropout(0.2)\n","\n","  def forward(self, x):\n","    x = F.leaky_relu(self.dropout1(self.fc1(x)))\n","    x = F.leaky_relu(self.dropout2(self.fc2(x)))\n","    output = self.fc3(x)\n","    return output"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"5ILVw5P1igWz"},"source":["# @markdown #### Run to train the default network\n","set_seed(seed=SEED)\n","# creating train data\n","X = torch.rand((10, 1))\n","X.sort(dim = 0)\n","Y = 2*X + 2*torch.empty((X.shape[0], 1)).normal_(mean=0, std=1)  # adding small error in the data\n","\n","X = X.unsqueeze_(1)\n","Y = Y.unsqueeze_(1)\n","\n","# creating test dataset\n","X_test = torch.linspace(0, 1, 40)\n","X_test = X_test.reshape((40, 1, 1))\n","\n","# train the network on toy dataset\n","model = Net()\n","criterion = nn.MSELoss()\n","optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","max_epochs = 10000\n","iters = 0\n","\n","running_predictions = np.empty((40, (int)(max_epochs/500 + 1)))\n","\n","train_loss = []\n","test_loss = []\n","model_norm = []\n","\n","for epoch in tqdm(range(max_epochs)):\n","\n","  #training\n","  model_norm.append(calculate_frobenius_norm(model))\n","  model.train()\n","  optimizer.zero_grad()\n","  predictions = model(X)\n","  loss = criterion(predictions,Y)\n","  loss.backward()\n","  optimizer.step()\n","\n","  train_loss.append(loss.data)\n","  model.eval()\n","  Y_test = model(X_test)\n","  loss = criterion(Y_test, 2*X_test)\n","  test_loss.append(loss.data)\n","\n","  if (epoch % 500 == 0 or epoch == max_epochs - 1):\n","    running_predictions[:, iters] = Y_test[:, 0, 0].detach().numpy()\n","    iters += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"-a6aLXvligWz"},"source":["# train the network on toy dataset\n","\n","# Intialize the model\n","set_seed(seed=SEED)\n","model = NetDropout()\n","criterion = nn.MSELoss()\n","optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","max_epochs = 10000\n","iters = 0\n","\n","running_predictions_dp = np.empty((40, (int)(max_epochs / 500)))\n","\n","train_loss_dp = []\n","test_loss_dp = []\n","model_norm_dp = []\n","\n","for epoch in tqdm(range(max_epochs)):\n","\n","  # training\n","  model_norm_dp.append(calculate_frobenius_norm(model))\n","  model.train()\n","  optimizer.zero_grad()\n","  predictions = model(X)\n","  loss = criterion(predictions, Y)\n","  loss.backward()\n","  optimizer.step()\n","\n","  train_loss_dp.append(loss.data)\n","  model.eval()\n","  Y_test = model(X_test)\n","  loss = criterion(Y_test, 2*X_test)\n","  test_loss_dp.append(loss.data)\n","\n","  if (epoch % 500 == 0 or epoch == max_epochs):\n","    running_predictions_dp[:, iters] = Y_test[:, 0, 0].detach().numpy()\n","    iters += 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"zm6pfmOiigW1"},"source":["Now that we have finished training, let's see how the model has evolved over the training process."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"wS7Tv7mXigW2"},"source":["# @markdown Animation! (Run Me!)\n","set_seed(seed=SEED)\n","\n","fig = plt.figure(figsize=(8, 6))\n","ax = plt.axes()\n","def frame(i):\n","  ax.clear()\n","  ax.scatter(X[:, 0, :].numpy(), Y[:, 0, :].numpy())\n","  plot = ax.plot(X_test[:, 0, :].detach().numpy(),\n","                 running_predictions_dp[:, i])\n","  title = f\"Epoch: {i*500}\"\n","  plt.title(title)\n","  ax.set_xlabel(\"X axis\")\n","  ax.set_ylabel(\"Y axis\")\n","  return plot\n","\n","\n","anim = animation.FuncAnimation(fig, frame, frames=range(20),\n","                               blit=False, repeat=False,\n","                               repeat_delay=10000)\n","html_anim = HTML(anim.to_html5_video());\n","plt.close()\n","display(html_anim)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"D1uS5svhigW2"},"source":["# @markdown Plot the train and test losses\n","plt.figure()\n","plt.plot(test_loss_dp, label='test loss dropout', c='blue', ls='dashed')\n","plt.plot(test_loss, label='test loss', c='red', ls='dashed')\n","plt.ylabel('loss')\n","plt.xlabel('epochs')\n","plt.title('dropout vs without dropout')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"N6nzQlvsigW2"},"source":["# @markdown Plot the train and test losses\n","plt.figure()\n","plt.plot(train_loss_dp, label='train loss dropout', c='blue', ls='dashed')\n","plt.plot(train_loss, label='train loss', c='red', ls='dashed')\n","plt.ylabel('loss')\n","plt.xlabel('epochs')\n","plt.title('dropout vs without dropout')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"-tK8ALJgigW3"},"source":["# @markdown Plot model weights with epoch\n","plt.figure()\n","plt.plot(model_norm_dp, label='dropout')\n","plt.plot(model_norm, label='no dropout')\n","plt.ylabel('norm of the model')\n","plt.xlabel('epochs')\n","plt.legend()\n","plt.title('Size of the model vs Epochs')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"usRn4hTPigW4"},"source":["Do you think this performed better than the initial model?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"lwJTjmvXigW5"},"source":["## Section 2.1: Dropout Implementation Caveats"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"6GpuqidQigW5"},"source":["\n","*  Dropout is used only during training, during testing the complete model weights are used and hence it is important to use model.eval() before testing the model. \n","\n","* Dropout reduces the capacity of the model during training and hence as a general practice wider networks are used when using dropout. If you are using a dropout with a random probability of 0.5 then you might want to double the number of hidden neurons in that layer."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"x6QKgpNbigW6"},"source":["Now, let's see how dropout fares on the Animal Faces Dataset. We first modify the existing model to include dropout and then train the model."]},{"cell_type":"code","metadata":{"execution":{},"id":"JMVluO-vigW6"},"source":["# Network Class - Animal Faces\n","class AnimalNetDropout(nn.Module):\n","  def __init__(self):\n","    super(AnimalNetDropout, self).__init__()\n","    self.fc1 = nn.Linear(3*32*32, 248)\n","    self.fc2 = nn.Linear(248, 210)\n","    self.fc3 = nn.Linear(210, 3)\n","    self.dropout1 = nn.Dropout(p=0.5)\n","    self.dropout2 = nn.Dropout(p=0.3)\n","\n","  def forward(self, x):\n","    x = x.view(x.shape[0], -1)\n","    x = F.leaky_relu(self.dropout1(self.fc1(x)))\n","    x = F.leaky_relu(self.dropout2(self.fc2(x)))\n","    x = self.fc3(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"6jFI5uDMigW6"},"source":["# Set the arguments\n","args = {\n","    'test_batch_size': 1000,\n","    'epochs': 200,\n","    'lr': 5e-3,\n","    'batch_size': 32,\n","    'momentum': 0.9,\n","    'device': DEVICE,\n","    'log_interval': 100\n","}\n","\n","# intialize the model\n","set_seed(seed=SEED)\n","model = AnimalNetDropout()\n","\n","# Train the model with Dropout\n","val_acc_dropout, train_acc_dropout, _, model_dp = main(args,\n","                                                       model,\n","                                                       train_loader,\n","                                                       val_loader,\n","                                                       img_test_dataset)\n","\n","# intialize the BigAnimalNet model\n","set_seed(seed=SEED)\n","model = BigAnimalNet()\n","\n","# Train the model\n","val_acc_big, train_acc_big, _, model_big = main(args,\n","                                                model,\n","                                                train_loader,\n","                                                val_loader,\n","                                                img_test_dataset)\n","\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_big, label='Val - Big', c='blue', ls='dashed')\n","plt.plot(train_acc_big, label='Train - Big', c='blue', ls='solid')\n","plt.plot(val_acc_dropout, label='Val - DP', c='magenta', ls='dashed')\n","plt.plot(train_acc_dropout, label='Train - DP', c='magenta', ls='solid')\n","plt.title('Dropout')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Bu9LbWBGigW7"},"source":["When do you think dropouts can perform bad and do you think their placement within a model matters?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"E4huVaS2igW7"},"source":["---\n","# Section 3: Data Augmentation\n","\n","*Time estimate: ~15 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"0Q0xsk3digW8","colab":{"base_uri":"https://localhost:8080/","height":578,"referenced_widgets":["897a6faca9cd4de4ad0837be88789eb3","1ff5fdd8f92e440b992a88b7d6a45492","ee60180df7f949a897a700cc118695c8","5edd6239c5d448a4bf153502c9933cb1","3564650cf38b459c9557ab9aa9ddd619","42389806d27940e6baeabc8236621de5"]},"executionInfo":{"status":"ok","timestamp":1628285947983,"user_tz":240,"elapsed":169,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"420fd95f-a23f-4cef-ae4e-dc84e3defd34"},"source":["# @title Video 3: Data Augmentation\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Xw411d7Pz\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"nm44FhjL3xc\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 3: Data Augmentation')\n","\n","display(out)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"897a6faca9cd4de4ad0837be88789eb3","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"eHbwhI8zigW9"},"source":["Data augmentation is often used to increase the number of training samples. Now we will explore the effects of data augmentation on regularization. Here regularization is achieved by adding noise into training data after every epoch.\n","\n","Pytorch's torchvision module provides a few built-in data augmentation techniques, which we can use on image datasets. Some of the techniques we most frequently use are:\n","\n","\n","*   Random Crop\n","*   Random Rotate\n","*   Vertical Flip\n","*   Horizontal Flip\n","\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"q1If3H1figW-"},"source":["# @markdown ####  Data Loader without Data Augmentation\n","\n","# For reproducibility\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","\n","train_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","\n","# Splitting dataset\n","img_train_data, img_val_data,_ = torch.utils.data.random_split(img_dataset, [250,100,14280])\n","\n","# Creating train_loader and Val_loader\n","train_loader = torch.utils.data.DataLoader(img_train_data,\n","                                           batch_size=batch_size,\n","                                           num_workers=2,\n","                                           worker_init_fn=seed_worker,\n","                                           generator=g_seed)\n","val_loader = torch.utils.data.DataLoader(img_val_data,\n","                                         batch_size=1000,\n","                                         num_workers=2,\n","                                         worker_init_fn=seed_worker,\n","                                         generator=g_seed)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"EDXAZKYvigW-"},"source":["Define a DataLoader using [torchvision.transforms](https://pytorch.org/docs/stable/torchvision/transforms.html) which randomly augments the data for us. "]},{"cell_type":"code","metadata":{"execution":{},"id":"RFGImKajigW_"},"source":["# Data Augmentation using transforms\n","new_transforms = transforms.Compose([\n","                                     transforms.RandomHorizontalFlip(p=0.1),\n","                                     transforms.RandomVerticalFlip(p=0.1),\n","                                     transforms.ToTensor(),\n","                                     transforms.Normalize((0.5, 0.5, 0.5),\n","                                                          (0.5, 0.5, 0.5))\n","                                     ])\n","\n","data_path = pathlib.Path('.')/'afhq'  # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=new_transforms)\n","# Splitting dataset\n","new_train_data, _,_ = torch.utils.data.random_split(img_dataset,\n","                                                    [250, 100, 14280])\n","\n","# For reproducibility\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","# Creating train_loader and Val_loader\n","new_train_loader = torch.utils.data.DataLoader(new_train_data,\n","                                               batch_size=batch_size,\n","                                               worker_init_fn=seed_worker,\n","                                               generator=g_seed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"umRDkwJ4igW_","colab":{"base_uri":"https://localhost:8080/","height":130,"referenced_widgets":["bd842c6968f54df49c2cbb822b492073","d6135f2ac9464892bb421542d381b006","d782c978bcbf4316aef9ad740284e7ff","4d1681f4eee14b71b1ded51151f86acb","c5560f4730df472ea5d7d3cdc0da9273","1cf3cb1ec000473a98c0b10697bf071a","645d2f9305f7434e82bbaa56c61bd092","26686231d1e94af98726061f83fbca4e","65d860c2729446c984e104dec376b550","d820d42516bc44b8b1768c3cdaf5273a","0907524d1976418cbb2e75fdd1f36fc9","1c045699c9f04e4ab40ba101e67bfccf","38deb085f2864baab77d3b96ffadd97e","eb6139eb4cab427baea5d0d43e6949c4","a2c4ba00bff84344a315dbe35cfba17f","b80389e6d91a40b4bf306d3030c995be"]},"outputId":"e14f578c-da97-4969-c873-c07aa08ca0ef"},"source":["# Set the arguments\n","args = {\n","    'epochs': 250,\n","    'lr': 1e-3,\n","    'momentum': 0.99,\n","    'device': DEVICE,\n","}\n","\n","# Intialize the model\n","set_seed(seed=SEED)\n","model_aug = AnimalNet()\n","\n","# train the model\n","val_acc_dataaug, train_acc_dataaug, param_norm_datadug, _ = main(args,\n","                                                                 model_aug,\n","                                                                 new_train_loader,\n","                                                                 val_loader,\n","                                                                 img_test_dataset)\n","# Intialize the model\n","set_seed(seed=SEED)\n","model_pure = AnimalNet()\n","\n","val_acc_pure, train_acc_pure, param_norm_pure, _, = main(args,\n","                                                         model_pure,\n","                                                         train_loader,\n","                                                         val_loader,\n","                                                         img_test_dataset)\n","\n","\n","# Train and Test accuracy plot\n","plt.figure()\n","plt.plot(val_acc_pure, label='Val Accuracy Pure',\n","         c='red', ls='dashed')\n","plt.plot(train_acc_pure, label='Train Accuracy Pure',\n","         c='red', ls='solid')\n","plt.plot(val_acc_dataaug, label='Val Accuracy data augment',\n","         c='blue', ls='dashed')\n","plt.plot(train_acc_dataaug, label='Train Accuracy data augment',\n","         c='blue', ls='solid')\n","plt.axhline(y=max(val_acc_pure), c='red', ls='dashed')\n","plt.axhline(y=max(val_acc_dataaug), c='blue', ls='dashed')\n","plt.title('Data Augmentation')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"bd842c6968f54df49c2cbb822b492073","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=250.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"65d860c2729446c984e104dec376b550","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=250.0), HTML(value='')))"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"execution":{},"id":"Ld1j3oExigXB"},"source":["# Plot together: without and with augmenetation\n","plt.figure()\n","plt.plot(param_norm_pure, c='red', label='Without Augmentation')\n","plt.plot(param_norm_datadug, c='blue', label='With Augmentation')\n","plt.title('Norm of parameters as a function of training epoch')\n","plt.xlabel('epoch')\n","plt.ylabel('Norm of model parameters')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"gszeIfYgigXC"},"source":["Can you think of more ways of augmenting training data? (Think of other problems beyond object recogition.)"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"dm8M21NligXD"},"source":["### Think! 3.1: Thought Question\n","Why does it work better to regularize an overparameterized ANN than to start with a smaller one? Think about  the regularization  methods you know.\n","Each group has a 10 min discussion."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"MKF_bMKVigXD"},"source":["# @title Student Response\n","from ipywidgets import widgets\n","\n","\n","text=widgets.Textarea(\n","   value='Type your answer here and click on `Submit!`',\n","   placeholder='Type something',\n","   description='',\n","   disabled=False\n",")\n","\n","button = widgets.Button(description=\"Submit!\")\n","\n","display(text,button)\n","\n","def on_button_clicked(b):\n","   atform.add_answer('q1', text.value)\n","   print(\"Submission successful!\")\n","\n","\n","button.on_click(on_button_clicked)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ccf5Y9BBigXE"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_519e352b.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"u4mOc67higXE"},"source":["---\n","# Section 4: Stochastic Gradient Descent\n","\n","*Time estimate: ~20 mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"P5NCyLGeigXF"},"source":["# @title Video 4: SGD\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1nM4y1K7wP\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"rjzlFvJhNqE\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 4: SGD')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"z4FCLJcuigXG"},"source":["## Section 4.1: Learning Rate\n","In this section, we will see how learning rate can act as regularizer while training a neural network. In summary:\n","\n","\n","*   Smaller learning rates regularize less. They slowly converge to deep minima. \n","*   Larger learning rates regularizes more by missing local minima and converging to broader, flatter minima, which often generalize better.\n","\n","But beware, a very large learning rate may result in overshooting or finding a really bad local minimum.\n","\n","\n","\n","In the block below, we will train the Animal Net model with different learning rates and see how that affects the regularization."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"-AjrgzseigXI"},"source":["# @markdown #### Generating Data Loaders\n","\n","# For reproducibility\n","g_seed = torch.Generator()\n","g_seed.manual_seed(SEED)\n","\n","batch_size = 128\n","train_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","     ])\n","\n","data_path = pathlib.Path('.')/'afhq' # using pathlib to be compatible with all OS's\n","img_dataset = ImageFolder(data_path/'train', transform=train_transform)\n","img_train_data, img_val_data, = torch.utils.data.random_split(img_dataset, [11700,2930])\n","\n","full_train_loader = torch.utils.data.DataLoader(img_train_data,\n","                                                batch_size=batch_size,\n","                                                num_workers=2,\n","                                                worker_init_fn=seed_worker,\n","                                                generator=g_seed)\n","full_val_loader = torch.utils.data.DataLoader(img_val_data,\n","                                              batch_size=1000,\n","                                              num_workers=2,\n","                                              worker_init_fn=seed_worker,\n","                                              generator=g_seed)\n","\n","test_transform = transforms.Compose([\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))    # [TO-DO]\n","     ])\n","img_test_dataset = ImageFolder(data_path/'val', transform=test_transform)\n","# img_test_loader = DataLoader(img_test_dataset, batch_size=batch_size,shuffle=False, num_workers=1)\n","classes = ('cat', 'dog', 'wild')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"iXwjMSS2igXJ"},"source":["# Set the arguments\n","args = {\n","    'test_batch_size': 1000,\n","    'epochs': 350,\n","    'batch_size': 32,\n","    'momentum': 0.99,\n","    'device': DEVICE\n","}\n","\n","learning_rates = [5e-4, 1e-3, 5e-3]\n","acc_dict = {}\n","\n","for i, lr in enumerate(learning_rates):\n","  # Initialize the model\n","  set_seed(seed=SEED)\n","  model = AnimalNet()\n","  # Learning rate\n","  args['lr'] = lr\n","  # Train the model\n","  val_acc, train_acc, param_norm, _ = main(args,\n","                                           model,\n","                                           train_loader,\n","                                           val_loader,\n","                                           img_test_dataset)\n","  # store the outputs\n","  acc_dict[f'val_{i}'] = val_acc\n","  acc_dict[f'train_{i}'] = train_acc\n","  acc_dict[f'param_norm_{i}'] = param_norm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"nNTc_jvaigXJ"},"source":["# @markdown Plot Train and Validation accuracy (Run me)\n","\n","plt.figure()\n","for i, lr in enumerate(learning_rates):\n","  plt.plot(acc_dict[f'val_{i}'], linestyle='dashed',\n","          label=f'lr={lr:0.1e} - validation')\n","  plt.plot(acc_dict[f'train_{i}'], label=f'{lr:0.1e} - train')\n","\n","  print(f\"Maximum Test Accuracy obtained with lr={lr:0.1e}: {max(acc_dict[f'val_{i}'])}\")\n","\n","plt.title('Optimal Learning Rate')\n","plt.ylabel('Accuracy (%)')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"eV-SozhHigXK"},"source":["# @markdown Plot parametric norms (Run me)\n","plt.figure()\n","\n","for i, lr in enumerate(learning_rates):\n","  plt.plot(acc_dict[f'param_norm_{i}'],label=f'lr={lr:0.2e}')\n","\n","plt.legend()\n","plt.xlabel('epoch')\n","plt.ylabel('parameter norms')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Umcd7Xz8igXM"},"source":["In the model above, we observe something different from what we expected. Why do you think this is happening?"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"f4kh6rtWigXN"},"source":["---\n","# Section 5: Hyperparameter Tuning\n","\n","*Time estimate: ~5 mins*\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"6ZWyPMSeigXP"},"source":["# @title Video 5: Hyperparameter tuning\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1E44y127Sn\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"HgkiKRYc-3A\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 5: Hyperparameter tuning')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"lgQ_yVwOigXR"},"source":["\n","\n","Hyper-Parameter tuning is often difficult and time consuming.  It is a key part of training any Deep Learning model to give good generalization. There are a few techniques that we can use to guide us during the search. \n","\n","\n","\n","*   Grid Search: Try all possible combinations of hyperparameters\n","*   Random Search: Randomly try different combinations of hyperparameters\n","*   Coordinate-wise Gradient Descent: Start at one set of hyperparameters and try changing one at a time, accept any changes that reduce your validation error\n","*   Bayesian Optimization/ Auto ML:  Start from a set of hyperparameters that have worked well on a similar problem, and then do some sort of local exploration (e.g., gradient descent) from there.\n","\n","There are lots of choices, like what range to explore over, which parameter to optimize first, etc. Some hyperparameters don’t matter much (people use a dropout of either 0.5 or 0, but not much else).  Others can matter a lot more (e.g., size and depth of the neural net). The key is to see what worked on similar problems.\n","\n","One can automate the process of tuning the network Architecture using \"Neural Architecture Search\", which designs new architectures using a few building blocks (Linear, Convolutional, Convolution Layers, etc.) and optimizes the design based on performance using a wide range of techniques such as Grid Search, Reinforcement Learning, GD, Evolutionary Algorithms, etc. This obviously requires very high computer power. Read this [article](https://lilianweng.github.io/lil-log/2020/08/06/neural-architecture-search.html) to learn more about NAS.    \n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"xbiRzhk4igXS"},"source":["## Think! 5: Overview of regularization techniques\n","\n","Which regularization technique today do you think had the biggest effect on the network? Why might do you think so? Can you apply all of the regularization methods on the same network?"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"o_Fhxh68igXT"},"source":["# @title Student Response\n","from ipywidgets import widgets\n","\n","\n","text=widgets.Textarea(\n","   value='Type your answer here and click on `Submit!`',\n","   placeholder='Type something',\n","   description='',\n","   disabled=False\n",")\n","\n","button = widgets.Button(description=\"Submit!\")\n","\n","display(text,button)\n","\n","def on_button_clicked(b):\n","   atform.add_answer('q2', text.value)\n","   print(\"Submission successful!\")\n","\n","\n","button.on_click(on_button_clicked)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"zzQT0rd8igXT"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W1D5_Regularization/solutions/W1D5_Tutorial2_Solution_a308b739.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"XQPg2-a3igXU"},"source":["---\n","# Summary\n","\n","Congratulations! The first week of NMA-DL has ended! In this tutorial, you learned more techniques of regulariation, i.e., L1 and L2 regularization, Dropout, and Data Augmenetation. Finally, you have seen the learning rate of SGD can act as a reularizer. An iteresting paper can be found [here](https://arxiv.org/abs/1611.03530). \n","\n","If you have time left, see the bonus material on *Adversarial Attacks*!"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"5TcEZjEgigXV","executionInfo":{"status":"error","timestamp":1628286333374,"user_tz":240,"elapsed":170,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"19ea9388-192b-497b-fa95-61e046136ca5","colab":{"base_uri":"https://localhost:8080/","height":257}},"source":["# @title Airtable Submission Link\n","from IPython import display as IPydisplay\n","IPydisplay.HTML(\n","   f\"\"\"\n"," <div>\n","   <a href= \"{atform.url()}\" target=\"_blank\">\n","   <img src=\"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/static/SurveyButton.png?raw=1\"\n"," alt=\"button link end of day Survey\" style=\"width:410px\"></a>\n","   </div>\"\"\" )"],"execution_count":1,"outputs":[{"output_type":"stream","text":["ERROR:root:An unexpected error occurred while tokenizing input\n","The following traceback may be corrupted or invalid\n","The error message is: ('EOF in multi-line string', (1, 9))\n","\n"],"name":"stderr"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-3238490b328f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m    \u001b[0;34m<\u001b[0m\u001b[0mimg\u001b[0m \u001b[0msrc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/static/SurveyButton.png?raw=1\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m  \u001b[0malt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"button link end of day Survey\"\u001b[0m \u001b[0mstyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"width:410px\"\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m    </div>\"\"\" )\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'atform' is not defined"]}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"FplzN3RfigXW"},"source":["---\n","# Bonus: Adversarial  Attacks\n","\n","*Time estimate: ~15 mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"Lp6sc1v1igXX"},"source":["# @title Video 6: Adversarial Attacks\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV19o4y1X74u\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"LzPPoiKi5jE\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 6: Adversarial Attacks')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"OVOXspDCigXY"},"source":["Designing perturbations to the input data to trick a machine learning model is called an \"adversarial attack\". These attacks are an inevitable consequence of learning in high dimensional space with complex decision boundaries. Depending on the application, these attacks can be very dangerous.\n","\n","\n","<img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/static/AdversarialAttacks_w1d5t2.png\">\n","\n","Hence, it is important for us to build models which can defend against such attacks. One possible way to do it is by regularizing the networks, which smooths the decision boundaries. A few ways of building models robust to such attacks are:\n","\n","\n","\n","*   [Defensive Distillation](https://deepai.org/machine-learning-glossary-and-terms/defensive-distillation) : Models trained via distillation are less prone to such attacks as they are trained on soft labels as there is an element of randomness in the training process.\n","*   [Feature Squeezing](https://evademl.org/squeezing/): Identifies adversarial attacks for on-line classifiers whose model is being used by comparing model's perdiction before and after squeezing the input. \n","* [SGD](https://arxiv.org/abs/1706.06083) You can also pick weight to minimize what the adversary is trying to maximize via SGD.\n","\n","\n","Read more about adversarial attacks [here](https://openai.com/blog/adversarial-example-research/)\n"]}]}