{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Copy of W3D2_Tutorial1","provenance":[{"file_id":"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/W3D2_BasicReinforcementLearning/student/W3D2_Tutorial1.ipynb","timestamp":1629221861873}],"collapsed_sections":[],"toc_visible":true},"kernel":{"display_name":"Python 3","language":"python","name":"python3"},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"bd2880c6e019444f811c9066f9ce89ca":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_90658f44edab435a8db7d63aca45aea9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_1b20de0e19be4509855ac841dd9cf030","IPY_MODEL_b3ca1aab530a4107bd1ab689e7140112"]}},"90658f44edab435a8db7d63aca45aea9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1b20de0e19be4509855ac841dd9cf030":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=BWz3scQN50M\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/BWz3scQN50M?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52e1348b90>"],"image/jpeg":"\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_3c6a09ab30364f7b9a7ed8f665fedda5","_model_module":"@jupyter-widgets/output"}},"b3ca1aab530a4107bd1ab689e7140112":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV18V411p7iK\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV18V411p7iK&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52e2b0bbd0>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_3516d536ab8848868676520e1ca29b2e","_model_module":"@jupyter-widgets/output"}},"3c6a09ab30364f7b9a7ed8f665fedda5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3516d536ab8848868676520e1ca29b2e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"30f777ccd7574be8b4253a38fb68db2d":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_816ec0521dc34d6e858493006e648e29","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_372ecd825de942838f00f3b1ab48ecb2","IPY_MODEL_210f563a277a4dfc92743e79018dcf0b"]}},"816ec0521dc34d6e858493006e648e29":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"372ecd825de942838f00f3b1ab48ecb2":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=h6TxAALY5Fc\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/h6TxAALY5Fc?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52e1348b90>"],"image/jpeg":"\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_f8913ec3afd741959d219c81fd9ef961","_model_module":"@jupyter-widgets/output"}},"210f563a277a4dfc92743e79018dcf0b":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1k54y1E7Zn\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1k54y1E7Zn&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52df3db750>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_429f8e03cd3241c5969e44cae9c088db","_model_module":"@jupyter-widgets/output"}},"f8913ec3afd741959d219c81fd9ef961":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"429f8e03cd3241c5969e44cae9c088db":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bd2c9c21db394116a404bc6116e5300f":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_9bc6100537da4f448cb41773b6ab93f6","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_294b6f0897ec4d8bb1bdfbeec4266d53","IPY_MODEL_21566329e8dc46d38d76d5be407c7703"]}},"9bc6100537da4f448cb41773b6ab93f6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"294b6f0897ec4d8bb1bdfbeec4266d53":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=cLCoNBmYUns\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/cLCoNBmYUns?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52e1348b90>"],"image/jpeg":"\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_75535c01168447ea8e043b306f967a52","_model_module":"@jupyter-widgets/output"}},"21566329e8dc46d38d76d5be407c7703":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1Lv411E7CB\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1Lv411E7CB&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52d32f6810>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_7d53207600fe403ca5b947cdcebddba0","_model_module":"@jupyter-widgets/output"}},"75535c01168447ea8e043b306f967a52":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7d53207600fe403ca5b947cdcebddba0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"89bd5a1fedc543e7ba817aaebc8296c7":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_0a10fd47d6914d4ba4b045c06459ec7f","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_662221d611d743a5b80f40ddce904513","IPY_MODEL_066fb89ef89f40fd8681026313a15f88"]}},"0a10fd47d6914d4ba4b045c06459ec7f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"662221d611d743a5b80f40ddce904513":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=HAxR4SuaZs4\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/HAxR4SuaZs4?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52e1348b90>"],"image/jpeg":"\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_1cb6cafd1d0e48aeab5e69a42a608051","_model_module":"@jupyter-widgets/output"}},"066fb89ef89f40fd8681026313a15f88":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV15f4y157zA\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV15f4y157zA&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52d4acc890>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_1a4b5ff626954666a27b59f711cfa6ce","_model_module":"@jupyter-widgets/output"}},"1cb6cafd1d0e48aeab5e69a42a608051":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1a4b5ff626954666a27b59f711cfa6ce":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f8c3e7440cf748a5b87c999eb53890c4":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_afc0bbcc57624f8fa558415c5fb9aff8","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d9c708454efc44bea28dcb42700e010f","IPY_MODEL_b0f07600759149b99834c2c2394e8f0d"]}},"afc0bbcc57624f8fa558415c5fb9aff8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d9c708454efc44bea28dcb42700e010f":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=Y4TweUYnexU\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/Y4TweUYnexU?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52d2f9d890>"],"image/jpeg":"\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_808933c85be24ced9d0cb37da6006542","_model_module":"@jupyter-widgets/output"}},"b0f07600759149b99834c2c2394e8f0d":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1iU4y1n7M6\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1iU4y1n7M6&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52d3006a90>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_50ce53d0f239427086fcbf55f759ee88","_model_module":"@jupyter-widgets/output"}},"808933c85be24ced9d0cb37da6006542":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"50ce53d0f239427086fcbf55f759ee88":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6631ff1e3d694252836dd3754fb5bfe1":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_72b09efe76be4f80a4837253689a9682","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_9cdaacfbb2f14b01a743a1d114084b3a","IPY_MODEL_a0818933caaa4982ad6e96b220c107a9"]}},"72b09efe76be4f80a4837253689a9682":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9cdaacfbb2f14b01a743a1d114084b3a":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=7_MYePyYhrM\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/7_MYePyYhrM?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52d3e4ab50>"],"image/jpeg":"\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_5456de0265ec429eb0999ef11778eb33","_model_module":"@jupyter-widgets/output"}},"a0818933caaa4982ad6e96b220c107a9":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1sg411M7cn\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1sg411M7cn&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52d330ea10>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_0294c5d239464620816f725a4123e0f7","_model_module":"@jupyter-widgets/output"}},"5456de0265ec429eb0999ef11778eb33":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0294c5d239464620816f725a4123e0f7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6af257ba56d04f1bb2919cff490fe50f":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_5c6e2790c97f4ea2af59889cc20492bb","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_64ea84f5a69447ecbd1cb386258c0151","IPY_MODEL_0e2c52f139124bfab89b75fd4a0afe0e"]}},"5c6e2790c97f4ea2af59889cc20492bb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"64ea84f5a69447ecbd1cb386258c0151":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=5kBtiW88QVw\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/5kBtiW88QVw?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52d3e4ab50>"],"image/jpeg":"/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABALDBoYFhsaGRoeHRsfIyomIiIiIjIrMSguMjc1MjI3LzI3QlBCNThLPS0tRWFFS1NWW1xbNUFlbWRYbFBZW1cBERISGRYZMBsbMFc/NUJXV1dXV1dXV1dXWldXXVdXV1dXV1deV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXXf/AABEIAWgB4AMBIgACEQEDEQH/xAAbAAEAAgMBAQAAAAAAAAAAAAAABAUBAwYHAv/EAEoQAAEDAgMEBgYGBwYGAgMAAAEAAgMEERIhMQUTQVEGImFxktIUFzJTgZEjQqGxwdEHFTNScuHwVGJzk7LCFiRDgqLxNIMlRHT/xAAYAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/EACwRAQEAAgICAQIFAgcAAAAAAAABAhEhMQMSQVFxEyJhgfAyoQQjQpHB0eH/2gAMAwEAAhEDEQA/APP0REBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97T+J/kT1cVvvafxP8iDkEXX+rit97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\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_d9350396f1764af896cee793a0ef388a","_model_module":"@jupyter-widgets/output"}},"0e2c52f139124bfab89b75fd4a0afe0e":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1Nq4y1X7AF\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1Nq4y1X7AF&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52d301b110>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_f7bb702e92274fc39b5b28dfa7b529b4","_model_module":"@jupyter-widgets/output"}},"d9350396f1764af896cee793a0ef388a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f7bb702e92274fc39b5b28dfa7b529b4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c51f37165c7446ecb5b43683258a72f8":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7a6b4d746268473d8f00358f425ee1e1","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_54fb9e81d01c44dbb15f62e937d35ae5","IPY_MODEL_d1d46ecff8af4aaf907809833ddedd6c"]}},"7a6b4d746268473d8f00358f425ee1e1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"54fb9e81d01c44dbb15f62e937d35ae5":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=dKaOpgor5Ek\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/dKaOpgor5Ek?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f52d2c60b50>"],"image/jpeg":"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\n"},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_a07625dbae664869ad14463203429198","_model_module":"@jupyter-widgets/output"}},"d1d46ecff8af4aaf907809833ddedd6c":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1WM4y1T7G5\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1WM4y1T7G5&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7f52d2c605d0>"]},"metadata":{"tags":[]}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_6dc27249cb234a859e2834fa20246ce1","_model_module":"@jupyter-widgets/output"}},"a07625dbae664869ad14463203429198":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6dc27249cb234a859e2834fa20246ce1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"execution":{},"id":"7XsiTCqGMIR3"},"source":["# Tutorial 1: Introduction to Reinforcement Learning\n","\n","**Week 3, Day 2: Basic Reinforcement Learning (RL)**\n","\n","**By Neuromatch Academy**\n","\n","__Content creators:__  Matthew Sargent, Anoop Kulkarni, Sowmya Parthiban, Feryal Behbahani, Jane Wang\n","\n","__Content reviewers:__ Ezekiel Williams, Mehul Rastogi, Lily Cheng, Roberto Guidotti, Arush Tagade, Kelson Shilling-Scrivo\n","\n","__Content editors:__ Spiros Chavlis \n","\n","__Production editors:__ Spiros Chavlis"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"-lg1Lb3WMIR-"},"source":["**Our 2021 Sponsors, including Presenting Sponsor Facebook Reality Labs**\n","\n","<p align='center'><img src='https://github.com/NeuromatchAcademy/widgets/blob/master/sponsors.png?raw=True'/></p>"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"DKwPEWaXMIR_"},"source":["---\n","# Tutorial Objectives\n","\n","By the end of the tutorial, you should be able to:\n","\n","1. Within the RL framework, be able to identify the different components: environment, agent, states, and actions. \n","2. Understand the Bellman equation and components involved. \n","3. Implement tabular value-based model-free learning (Q-learning and SARSA).\n","4. Discuss real-world applications and ethical issues of RL.\n","\n","By completing the Bonus sections, you should be able to:\n","1. Run a DQN agent and experiment with different hyperparameters.\n","2. Have a high-level understanding of other (nonvalue-based) RL methods."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"fn7t0HMGMISB","colab":{"base_uri":"https://localhost:8080/","height":521},"executionInfo":{"status":"ok","timestamp":1629221904882,"user_tz":240,"elapsed":126,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"e19709f2-e09f-4f41-9b7a-f2538f790ea5"},"source":["# @title Tutorial slides\n","\n","# @markdown These are the slides for the videos in this tutorial\n","\n","# @markdown If you want to locally download the slides, click [here](https://osf.io/m3kqy/download)\n","from IPython.display import IFrame\n","IFrame(src=f\"https://mfr.ca-1.osf.io/render?url=https://osf.io/m3kqy/?direct%26mode=render%26action=download%26mode=render\", width=854, height=480)"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://mfr.ca-1.osf.io/render?url=https://osf.io/m3kqy/?direct%26mode=render%26action=download%26mode=render\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.IFrame at 0x7f538ed8ab90>"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Gt500wgWMISC"},"source":["---\n","# Setup\n","\n","Run the following *Setup* cells in order to set up needed functions. Don't worry about the code for now!\n","\n","**Note:** There is an issue with some images not showing up if you're using a Safari browser. Please switch to Chrome if this is the case."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"x1arn1zAMISE","executionInfo":{"status":"ok","timestamp":1629222055588,"user_tz":240,"elapsed":150726,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Install requirements\n","from IPython.display import clear_output\n","# @markdown we install the acme library, see [here](https://github.com/deepmind/acme) for more info\n","\n","# @markdown WARNING: There may be errors and warnings reported during the installation.\n","# @markdown However, they should be ignored.\n","!apt-get install -y xvfb ffmpeg --quiet\n","!pip install --upgrade pip --quiet\n","!pip install imageio --quiet\n","!pip install imageio-ffmpeg\n","!pip install gym --quiet\n","!pip install enum34 --quiet\n","!pip install dm-env --quiet\n","!pip install pandas --quiet\n","!pip install keras-nightly==2.5.0.dev2021020510 --quiet\n","!pip install grpcio==1.34.0 --quiet\n","!pip install tensorflow --quiet\n","!pip install typing --quiet\n","!pip install einops --quiet\n","!pip install dm-acme --quiet\n","!pip install dm-acme[reverb] --quiet\n","!pip install dm-acme[tf] --quiet\n","!pip install dm-acme[envs] --quiet\n","!pip install dm-env --quiet\n","\n","!pip install git+https://github.com/NeuromatchAcademy/evaltools --quiet\n","from evaltools.airtable import AirtableForm\n","\n","# generate airtable form\n","atform = AirtableForm('appn7VdPRseSoMXEG','W3D2_T1','https://portal.neuromatchacademy.org/api/redirect/to/3e77471d-4de0-4e43-a026-9cfb603b5197')\n","clear_output()"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"wFqiLg6AMISH","executionInfo":{"status":"ok","timestamp":1629222062230,"user_tz":240,"elapsed":6655,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Import modules\n","import gym\n","import enum\n","import copy\n","import time\n","import acme\n","import torch\n","import base64\n","import dm_env\n","import IPython\n","import imageio\n","import warnings\n","import itertools\n","import collections\n","\n","import numpy as np\n","import pandas as pd\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","\n","import tensorflow.compat.v2 as tf\n","\n","from acme import specs\n","from acme import wrappers\n","from acme.utils import tree_utils\n","from acme.utils import loggers\n","from torch.autograd import Variable\n","from torch.distributions import Categorical\n","from typing import Callable, Sequence\n","\n","tf.enable_v2_behavior()\n","warnings.filterwarnings('ignore')\n","np.set_printoptions(precision=3, suppress=1)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"lcAv7EQBMISI","executionInfo":{"status":"ok","timestamp":1629222062384,"user_tz":240,"elapsed":160,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Figure settings\n","import ipywidgets as widgets       # interactive display\n","%matplotlib inline\n","%config InlineBackend.figure_format = 'retina'\n","plt.style.use(\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content/master/nma.mplstyle\")\n","mpl.rc('image', cmap='Blues')"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"-xwgTaQ3MISJ","executionInfo":{"status":"ok","timestamp":1629222062386,"user_tz":240,"elapsed":12,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Helper Functions\n","# @markdown Implement helpers for value visualisation\n","\n","map_from_action_to_subplot = lambda a: (2, 6, 8, 4)[a]\n","map_from_action_to_name = lambda a: (\"up\", \"right\", \"down\", \"left\")[a]\n","\n","\n","def plot_values(values, colormap='pink', vmin=-1, vmax=10):\n","  plt.imshow(values, interpolation=\"nearest\",\n","             cmap=colormap, vmin=vmin, vmax=vmax)\n","  plt.yticks([])\n","  plt.xticks([])\n","  plt.colorbar(ticks=[vmin, vmax])\n","\n","\n","def plot_state_value(action_values, epsilon=0.1):\n","  q = action_values\n","  fig = plt.figure(figsize=(4, 4))\n","  vmin = np.min(action_values)\n","  vmax = np.max(action_values)\n","  v = (1 - epsilon) * np.max(q, axis=-1) + epsilon * np.mean(q, axis=-1)\n","  plot_values(v, colormap='summer', vmin=vmin, vmax=vmax)\n","  plt.title(\"$v(s)$\")\n","\n","\n","def plot_action_values(action_values, epsilon=0.1):\n","  q = action_values\n","  fig = plt.figure(figsize=(8, 8))\n","  fig.subplots_adjust(wspace=0.3, hspace=0.3)\n","  vmin = np.min(action_values)\n","  vmax = np.max(action_values)\n","  dif = vmax - vmin\n","  for a in [0, 1, 2, 3]:\n","    plt.subplot(3, 3, map_from_action_to_subplot(a))\n","\n","    plot_values(q[..., a], vmin=vmin - 0.05*dif, vmax=vmax + 0.05*dif)\n","    action_name = map_from_action_to_name(a)\n","    plt.title(r\"$q(s, \\mathrm{\" + action_name + r\"})$\")\n","\n","  plt.subplot(3, 3, 5)\n","  v = (1 - epsilon) * np.max(q, axis=-1) + epsilon * np.mean(q, axis=-1)\n","  plot_values(v, colormap='summer', vmin=vmin, vmax=vmax)\n","  plt.title(\"$v(s)$\")\n","\n","\n","def plot_stats(stats, window=10):\n","  plt.figure(figsize=(16,4))\n","  plt.subplot(121)\n","  xline = range(0, len(stats.episode_lengths), window)\n","  plt.plot(xline, smooth(stats.episode_lengths, window=window))\n","  plt.ylabel('Episode Length')\n","  plt.xlabel('Episode Count')\n","  plt.subplot(122)\n","  plt.plot(xline, smooth(stats.episode_rewards, window=window))\n","  plt.ylabel('Episode Return')\n","  plt.xlabel('Episode Count')"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"pqG4rsHvMISL","executionInfo":{"status":"ok","timestamp":1629222062567,"user_tz":240,"elapsed":189,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Helper functions\n","def smooth(x, window=10):\n","  return x[:window*(len(x)//window)].reshape(len(x)//window, window).mean(axis=1)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"ljF9BAbzMISM","executionInfo":{"status":"ok","timestamp":1629222062569,"user_tz":240,"elapsed":12,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set random seed\n","\n","# @markdown Executing `set_seed(seed=seed)` you are setting the seed\n","\n","# for DL its critical to set the random seed so that students can have a\n","# baseline to compare their results to expected results.\n","# Read more here: https://pytorch.org/docs/stable/notes/randomness.html\n","\n","# Call `set_seed` function in the exercises to ensure reproducibility.\n","import random\n","import torch\n","\n","def set_seed(seed=None, seed_torch=True):\n","  if seed is None:\n","    seed = np.random.choice(2 ** 32)\n","  random.seed(seed)\n","  np.random.seed(seed)\n","  if seed_torch:\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.benchmark = False\n","    torch.backends.cudnn.deterministic = True\n","\n","  print(f'Random seed {seed} has been set.')\n","\n","\n","# In case that `DataLoader` is used\n","def seed_worker(worker_id):\n","  worker_seed = torch.initial_seed() % 2**32\n","  np.random.seed(worker_seed)\n","  random.seed(worker_seed)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"hzTrbNCUMISN","executionInfo":{"status":"ok","timestamp":1629222062571,"user_tz":240,"elapsed":12,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set device (GPU or CPU). Execute `set_device()`\n","# especially if torch modules used.\n","\n","# inform the user if the notebook uses GPU or CPU.\n","\n","def set_device():\n","  device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","  if device != \"cuda\":\n","    print(\"WARNING: For this notebook to perform best, \"\n","        \"if possible, in the menu under `Runtime` -> \"\n","        \"`Change runtime type.`  select `GPU` \")\n","  else:\n","    print(\"GPU is enabled in this notebook.\")\n","\n","  return device"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"-MiwbkcQMISO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629222062842,"user_tz":240,"elapsed":282,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"cd13aa83-a13e-40d1-a82e-3784e5cb2817"},"source":["SEED = 2021\n","set_seed(seed=SEED)\n","DEVICE = set_device()"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n","WARNING: For this notebook to perform best, if possible, in the menu under `Runtime` -> `Change runtime type.`  select `GPU` \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"OSB93wCTMISP"},"source":["---\n","# Section 1: Introduction to Reinforcement Learning\n","\n","*Time estimate: ~15mins*"]},{"cell_type":"code","metadata":{"execution":{},"id":"LFOdM8TDMISP","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["bd2880c6e019444f811c9066f9ce89ca","90658f44edab435a8db7d63aca45aea9","1b20de0e19be4509855ac841dd9cf030","b3ca1aab530a4107bd1ab689e7140112","3c6a09ab30364f7b9a7ed8f665fedda5","3516d536ab8848868676520e1ca29b2e"]},"executionInfo":{"status":"ok","timestamp":1629222062846,"user_tz":240,"elapsed":29,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"ef19d67b-93a9-4336-d313-28434e69a974"},"source":["# @title Video 1: Introduction to RL\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV18V411p7iK\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"BWz3scQN50M\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 1: Introduction to RL')\n","\n","display(out)"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"bd2880c6e019444f811c9066f9ce89ca","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"y0emLSM7MISR"},"source":["## Acme: a research framework for reinforcement learning\n","\n","**Acme** is a library of reinforcement learning (RL) agents and agent building blocks by Google DeepMind. Acme strives to expose simple, efficient, and readable agents, that serve both as reference implementations of popular algorithms and as strong baselines, while still providing enough flexibility to do novel research. The design of Acme also attempts to provide multiple points of entry to the RL problem at differing levels of complexity.\n","\n","For more information see the github's repository [deepmind/acme](https://github.com/deepmind/acme)."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"inY6oplSMISU"},"source":["---\n","# Section 2: General Formulation of RL Problems and Gridworlds\n","\n","*Time estimate: ~30mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"opOrzqR0MISV","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["30f777ccd7574be8b4253a38fb68db2d","816ec0521dc34d6e858493006e648e29","372ecd825de942838f00f3b1ab48ecb2","210f563a277a4dfc92743e79018dcf0b","f8913ec3afd741959d219c81fd9ef961","429f8e03cd3241c5969e44cae9c088db"]},"executionInfo":{"status":"ok","timestamp":1629222063173,"user_tz":240,"elapsed":341,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"ba81e682-8b17-41cf-a1b4-3f048f2a5290"},"source":["# @title Video 2: General Formulation and MDPs\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1k54y1E7Zn\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"h6TxAALY5Fc\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 2: General Formulation and MDPs')\n","\n","display(out)"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"30f777ccd7574be8b4253a38fb68db2d","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"UHDvQwDrMISY"},"source":["The agent interacts with the environment in a loop corresponding to the following diagram. The environment defines a set of <font color='blue'>**actions**</font>  that an agent can take.  The agent takes an action informed by the <font color='redorange'>**observations**</font> it receives, and will get a <font color='green'>**reward**</font> from the environment after each action. The goal in RL is to find an agent whose actions maximize the total accumulation of rewards obtained from the environment. \n","\n","<center><img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/RL_loop.png\" width=\"500\" /></center>\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"9bUhXZTcMISY"},"source":["## Section 2.1: The Environment\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"fzCQn7IdMISZ"},"source":["\n","For this practical session we will focus on a **simple grid world** environment,which consists of a 9 x 10 grid of either wall or empty cells, depicted in black and white, respectively. The smiling agent starts from an initial location and needs to navigate to reach the goal square.\n","\n","<center><img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/tabular_RL_loop.png\" width=\"500\" /></center>\n","\n","Below you will find an implementation of this Gridworld as a `dm_env.Environment`.\n","\n","There is no coding in this section, but if you want, you can look over the provided code so that you can familiarize yourself with an example of how to set up a **grid world** environment.\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"UIqSR0hbMISa","executionInfo":{"status":"ok","timestamp":1629222063751,"user_tz":240,"elapsed":584,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Implement GridWorld { form-width: \"30%\" }\n","# @markdown *Double-click* to inspect the contents of this cell.\n","\n","class ObservationType(enum.IntEnum):\n","  STATE_INDEX = enum.auto()\n","  AGENT_ONEHOT = enum.auto()\n","  GRID = enum.auto()\n","  AGENT_GOAL_POS = enum.auto()\n","\n","\n","class GridWorld(dm_env.Environment):\n","\n","  def __init__(self,\n","               layout,\n","               start_state,\n","               goal_state=None,\n","               observation_type=ObservationType.STATE_INDEX,\n","               discount=0.9,\n","               penalty_for_walls=-5,\n","               reward_goal=10,\n","               max_episode_length=None,\n","               randomize_goals=False):\n","    \"\"\"Build a grid environment.\n","\n","    Simple gridworld defined by a map layout, a start and a goal state.\n","\n","    Layout should be a NxN grid, containing:\n","      * 0: empty\n","      * -1: wall\n","      * Any other positive value: value indicates reward; episode will terminate\n","\n","    Args:\n","      layout: NxN array of numbers, indicating the layout of the environment.\n","      start_state: Tuple (y, x) of starting location.\n","      goal_state: Optional tuple (y, x) of goal location. Will be randomly\n","        sampled once if None.\n","      observation_type: Enum observation type to use. One of:\n","        * ObservationType.STATE_INDEX: int32 index of agent occupied tile.\n","        * ObservationType.AGENT_ONEHOT: NxN float32 grid, with a 1 where the\n","          agent is and 0 elsewhere.\n","        * ObservationType.GRID: NxNx3 float32 grid of feature channels.\n","          First channel contains walls (1 if wall, 0 otherwise), second the\n","          agent position (1 if agent, 0 otherwise) and third goal position\n","          (1 if goal, 0 otherwise)\n","        * ObservationType.AGENT_GOAL_POS: float32 tuple with\n","          (agent_y, agent_x, goal_y, goal_x)\n","      discount: Discounting factor included in all Timesteps.\n","      penalty_for_walls: Reward added when hitting a wall (should be negative).\n","      reward_goal: Reward added when finding the goal (should be positive).\n","      max_episode_length: If set, will terminate an episode after this many\n","        steps.\n","      randomize_goals: If true, randomize goal at every episode.\n","    \"\"\"\n","    if observation_type not in ObservationType:\n","      raise ValueError('observation_type should be a ObservationType instace.')\n","    self._layout = np.array(layout)\n","    self._start_state = start_state\n","    self._state = self._start_state\n","    self._number_of_states = np.prod(np.shape(self._layout))\n","    self._discount = discount\n","    self._penalty_for_walls = penalty_for_walls\n","    self._reward_goal = reward_goal\n","    self._observation_type = observation_type\n","    self._layout_dims = self._layout.shape\n","    self._max_episode_length = max_episode_length\n","    self._num_episode_steps = 0\n","    self._randomize_goals = randomize_goals\n","    if goal_state is None:\n","      # Randomly sample goal_state if not provided\n","      goal_state = self._sample_goal()\n","    self.goal_state = goal_state\n","\n","  def _sample_goal(self):\n","    \"\"\"Randomly sample reachable non-starting state.\"\"\"\n","    # Sample a new goal\n","    n = 0\n","    max_tries = 1e5\n","    while n < max_tries:\n","      goal_state = tuple(np.random.randint(d) for d in self._layout_dims)\n","      if goal_state != self._state and self._layout[goal_state] == 0:\n","        # Reachable state found!\n","        return goal_state\n","      n += 1\n","    raise ValueError('Failed to sample a goal state.')\n","\n","  @property\n","  def layout(self):\n","    return self._layout\n","\n","  @property\n","  def number_of_states(self):\n","    return self._number_of_states\n","\n","  @property\n","  def goal_state(self):\n","    return self._goal_state\n","\n","  @property\n","  def start_state(self):\n","    return self._start_state\n","\n","  @property\n","  def state(self):\n","    return self._state\n","\n","  def set_state(self, x, y):\n","    self._state = (y, x)\n","\n","  @goal_state.setter\n","  def goal_state(self, new_goal):\n","    if new_goal == self._state or self._layout[new_goal] < 0:\n","      raise ValueError('This is not a valid goal!')\n","    # Zero out any other goal\n","    self._layout[self._layout > 0] = 0\n","    # Setup new goal location\n","    self._layout[new_goal] = self._reward_goal\n","    self._goal_state = new_goal\n","\n","  def observation_spec(self):\n","    if self._observation_type is ObservationType.AGENT_ONEHOT:\n","      return specs.Array(\n","          shape=self._layout_dims,\n","          dtype=np.float32,\n","          name='observation_agent_onehot')\n","    elif self._observation_type is ObservationType.GRID:\n","      return specs.Array(\n","          shape=self._layout_dims + (3,),\n","          dtype=np.float32,\n","          name='observation_grid')\n","    elif self._observation_type is ObservationType.AGENT_GOAL_POS:\n","      return specs.Array(\n","          shape=(4,), dtype=np.float32, name='observation_agent_goal_pos')\n","    elif self._observation_type is ObservationType.STATE_INDEX:\n","      return specs.DiscreteArray(\n","          self._number_of_states, dtype=int, name='observation_state_index')\n","\n","  def action_spec(self):\n","    return specs.DiscreteArray(4, dtype=int, name='action')\n","\n","  def get_obs(self):\n","    if self._observation_type is ObservationType.AGENT_ONEHOT:\n","      obs = np.zeros(self._layout.shape, dtype=np.float32)\n","      # Place agent\n","      obs[self._state] = 1\n","      return obs\n","    elif self._observation_type is ObservationType.GRID:\n","      obs = np.zeros(self._layout.shape + (3,), dtype=np.float32)\n","      obs[..., 0] = self._layout < 0\n","      obs[self._state[0], self._state[1], 1] = 1\n","      obs[self._goal_state[0], self._goal_state[1], 2] = 1\n","      return obs\n","    elif self._observation_type is ObservationType.AGENT_GOAL_POS:\n","      return np.array(self._state + self._goal_state, dtype=np.float32)\n","    elif self._observation_type is ObservationType.STATE_INDEX:\n","      y, x = self._state\n","      return y * self._layout.shape[1] + x\n","\n","  def reset(self):\n","    self._state = self._start_state\n","    self._num_episode_steps = 0\n","    if self._randomize_goals:\n","      self.goal_state = self._sample_goal()\n","    return dm_env.TimeStep(\n","        step_type=dm_env.StepType.FIRST,\n","        reward=None,\n","        discount=None,\n","        observation=self.get_obs())\n","\n","  def step(self, action):\n","    y, x = self._state\n","\n","    if action == 0:  # up\n","      new_state = (y - 1, x)\n","    elif action == 1:  # right\n","      new_state = (y, x + 1)\n","    elif action == 2:  # down\n","      new_state = (y + 1, x)\n","    elif action == 3:  # left\n","      new_state = (y, x - 1)\n","    else:\n","      raise ValueError(\n","          'Invalid action: {} is not 0, 1, 2, or 3.'.format(action))\n","\n","    new_y, new_x = new_state\n","    step_type = dm_env.StepType.MID\n","    if self._layout[new_y, new_x] == -1:  # wall\n","      reward = self._penalty_for_walls\n","      discount = self._discount\n","      new_state = (y, x)\n","    elif self._layout[new_y, new_x] == 0:  # empty cell\n","      reward = 0.\n","      discount = self._discount\n","    else:  # a goal\n","      reward = self._layout[new_y, new_x]\n","      discount = 0.\n","      new_state = self._start_state\n","      step_type = dm_env.StepType.LAST\n","\n","    self._state = new_state\n","    self._num_episode_steps += 1\n","    if (self._max_episode_length is not None and\n","        self._num_episode_steps >= self._max_episode_length):\n","      step_type = dm_env.StepType.LAST\n","    return dm_env.TimeStep(\n","        step_type=step_type,\n","        reward=np.float32(reward),\n","        discount=discount,\n","        observation=self.get_obs())\n","\n","  def plot_grid(self, add_start=True):\n","    plt.figure(figsize=(4, 4))\n","    plt.imshow(self._layout <= -1, interpolation='nearest')\n","    ax = plt.gca()\n","    ax.grid(0)\n","    plt.xticks([])\n","    plt.yticks([])\n","    # Add start/goal\n","    if add_start:\n","      plt.text(\n","          self._start_state[1],\n","          self._start_state[0],\n","          r'$\\mathbf{S}$',\n","          fontsize=16,\n","          ha='center',\n","          va='center')\n","    plt.text(\n","        self._goal_state[1],\n","        self._goal_state[0],\n","        r'$\\mathbf{G}$',\n","        fontsize=16,\n","        ha='center',\n","        va='center')\n","    h, w = self._layout.shape\n","    for y in range(h - 1):\n","      plt.plot([-0.5, w - 0.5], [y + 0.5, y + 0.5], '-w', lw=2)\n","    for x in range(w - 1):\n","      plt.plot([x + 0.5, x + 0.5], [-0.5, h - 0.5], '-w', lw=2)\n","\n","  def plot_state(self, return_rgb=False):\n","    self.plot_grid(add_start=False)\n","    # Add the agent location\n","    plt.text(\n","        self._state[1],\n","        self._state[0],\n","        u'😃',\n","        # fontname='symbola',\n","        fontsize=18,\n","        ha='center',\n","        va='center',\n","    )\n","    if return_rgb:\n","      fig = plt.gcf()\n","      plt.axis('tight')\n","      plt.subplots_adjust(0, 0, 1, 1, 0, 0)\n","      fig.canvas.draw()\n","      data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n","      w, h = fig.canvas.get_width_height()\n","      data = data.reshape((h, w, 3))\n","      plt.close(fig)\n","      return data\n","\n","  def plot_policy(self, policy):\n","    action_names = [\n","        r'$\\uparrow$', r'$\\rightarrow$', r'$\\downarrow$', r'$\\leftarrow$'\n","    ]\n","    self.plot_grid()\n","    plt.title('Policy Visualization')\n","    h, w = self._layout.shape\n","    for y in range(h):\n","      for x in range(w):\n","        # if ((y, x) != self._start_state) and ((y, x) != self._goal_state):\n","        if (y, x) != self._goal_state:\n","          action_name = action_names[policy[y, x]]\n","          plt.text(x, y, action_name, ha='center', va='center')\n","\n","  def plot_greedy_policy(self, q):\n","    greedy_actions = np.argmax(q, axis=2)\n","    self.plot_policy(greedy_actions)\n","\n","\n","def build_gridworld_task(task,\n","                         discount=0.9,\n","                         penalty_for_walls=-5,\n","                         observation_type=ObservationType.STATE_INDEX,\n","                         max_episode_length=200):\n","  \"\"\"Construct a particular Gridworld layout with start/goal states.\n","\n","  Args:\n","      task: string name of the task to use. One of {'simple', 'obstacle',\n","        'random_goal'}.\n","      discount: Discounting factor included in all Timesteps.\n","      penalty_for_walls: Reward added when hitting a wall (should be negative).\n","      observation_type: Enum observation type to use. One of:\n","        * ObservationType.STATE_INDEX: int32 index of agent occupied tile.\n","        * ObservationType.AGENT_ONEHOT: NxN float32 grid, with a 1 where the\n","          agent is and 0 elsewhere.\n","        * ObservationType.GRID: NxNx3 float32 grid of feature channels.\n","          First channel contains walls (1 if wall, 0 otherwise), second the\n","          agent position (1 if agent, 0 otherwise) and third goal position\n","          (1 if goal, 0 otherwise)\n","        * ObservationType.AGENT_GOAL_POS: float32 tuple with\n","          (agent_y, agent_x, goal_y, goal_x).\n","      max_episode_length: If set, will terminate an episode after this many\n","        steps.\n","  \"\"\"\n","  tasks_specifications = {\n","      'simple': {\n","          'layout': [\n","              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n","          ],\n","          'start_state': (2, 2),\n","          'goal_state': (7, 2)\n","      },\n","      'obstacle': {\n","          'layout': [\n","              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n","              [-1, 0, 0, 0, 0, 0, -1, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n","          ],\n","          'start_state': (2, 2),\n","          'goal_state': (2, 8)\n","      },\n","      'random_goal': {\n","          'layout': [\n","              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, -1, -1, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1],\n","              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n","          ],\n","          'start_state': (2, 2),\n","          # 'randomize_goals': True\n","      },\n","  }\n","  return GridWorld(\n","      discount=discount,\n","      penalty_for_walls=penalty_for_walls,\n","      observation_type=observation_type,\n","      max_episode_length=max_episode_length,\n","      **tasks_specifications[task])\n","\n","\n","def setup_environment(environment):\n","  \"\"\"Returns the environment and its spec.\"\"\"\n","\n","  # Make sure the environment outputs single-precision floats.\n","  environment = wrappers.SinglePrecisionWrapper(environment)\n","\n","  # Grab the spec of the environment.\n","  environment_spec = specs.make_environment_spec(environment)\n","\n","  return environment, environment_spec"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"SBhMar14MISh"},"source":["\n","We will use two distinct tabular GridWorlds:\n","* `simple` where the goal is at the bottom left of the grid, little navigation required.\n","* `obstacle` where the goal is behind an obstacle the agent must avoid.\n","\n","You can visualize the grid worlds by running the cell below. \n","\n","Note that **S** indicates the start state and **G** indicates the goal. \n"]},{"cell_type":"code","metadata":{"execution":{},"id":"zXQmKdT9MISh","colab":{"base_uri":"https://localhost:8080/","height":583},"executionInfo":{"status":"ok","timestamp":1629222064266,"user_tz":240,"elapsed":570,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"745a5167-c238-4147-ab01-010ddd3af4d9"},"source":["# Visualise GridWorlds\n","\n","# Instantiate two tabular environments, a simple task, and one that involves\n","# the avoidance of an obstacle.\n","simple_grid = build_gridworld_task(\n","    task='simple', observation_type=ObservationType.GRID)\n","obstacle_grid = build_gridworld_task(\n","    task='obstacle', observation_type=ObservationType.GRID)\n","\n","# Plot them.\n","simple_grid.plot_grid()\n","plt.title('Simple')\n","\n","obstacle_grid.plot_grid()\n","plt.title('Obstacle')"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Obstacle')"]},"metadata":{"tags":[]},"execution_count":13},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":270,"height":264}}},{"output_type":"display_data","data":{"image/png":"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SW9f+5a846/enov++7+nnGfjxo25/vrrc+mll+bb3/5WPvaRDydJVq1alac89Wl5w5vfkt13330hh73d8JIK83LO2WfnuEcdPW1szGTTpk3beEQA0/vqeefloYcdklNf+5ppY2NLrrnmmpz2vvfk55deWjC6HYMjHMzZ2NhYfu35z81111232EMBmNEnT/9EnvmME7Jx4230A1m2E4KDOfvYRz+Sn15wwa0ef+jDDs8rX/XqPOiwB2evvfbKhg0bcsUVV+RH//rDrFv3zXzx85/LueecnQ0bNiz8oIEd0tfOPz/PffYvTxsbD3zgQTn5BS/MEUcelbvuu2923XXXXHXVVbn4oovyL+u+mXPOPiufPP3jufzyyxd45NsfwcGcnfnlL93qsTvd6U759Oe+mBUrVvziseXLl2fVqlXZb7/98ujHHJffefXv5rLLLssHTntfdt9jj4UcMrAD2rRpU176my/K2NjYrZ7beeed8/o3vDm/8eKX3Oq55cuXZ82aNTn4kEPyvOe/IBs3bsynPnl63vSG1y/EsLdbgoM5u+iiW7/+ede77jshNqaz11575ZSXvbxiWAATvP997813v/udKZ9b+/Z35FdPfv6s1rNs2bI85anH5ylPPT699205xB2Kk0aZs9barR77zne+nS98/nOLMBqAqb3/tPdO+fgxxz5y1rEx2VT//zE7jnAwZ/e6931u9djGjRvz5Cc8Ng87/OF5zHGPzciDDsvBhxyaffbZZxFGCOzorr322pxz9llTPvcbL37pAo+GRHAwD8ef8PS87a1/MeVzXz3v3Hz1vHN/cX/NmjV52MOPyLHHPirHn/D0rFmzZqGGCezAfviDH+Smm26a8rlHHH3MlI/33nPzzTfPuO5ly/zqnA8vqTBnRx55VJ729BNnNe8ll1ySj33kw3nFy16ae939rnn+rz4nF154YfEIgR3dz38+9fUyVq1alT333HPK5/7q7W/LqhU7zzgxP4KDeXnn3707z/jlZ85pmZtvvjn/8IHT8rDDDsnoN75RNDKA5Morr5zy8VW77bbAI2EzwcG83OEOd8h73veBfOqzX8hjH/f47LTTTrNe9vLLL88zTzohN954Y+EIgR3ZdJcfv/aaaxZ4JGwmONgqxz7yUfnoJz6VCy+6NB/8p4/kFa98VY56xNHZddddt7jc+gsvzIf/6UMLNEpg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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":270,"height":264}}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"nZN528icMISi"},"source":["In this environment, the agent has four possible  <font color='blue'>**actions**</font>: `up`, `right`, `down`, and `left`.  The <font color='green'>**reward**</font> is `-5` for bumping into a wall, `+10` for reaching the goal, and `0` otherwise. The episode ends when the agent reaches the goal, and otherwise continues. The **discount** on continuing steps, is $\\gamma = 0.9$. \n","\n","Before we start building an agent to interact with this environment, let's first look at the types of objects the environment either returns (e.g., <font color='redorange'>**observations**</font>) or consumes (e.g., <font color='blue'>**actions**</font>). The `environment_spec` will show you the form of the <font color='redorange'>**observations**</font>, <font color='green'>**rewards**</font> and **discounts** that the environment exposes and the form of the <font color='blue'>**actions**</font> that can be taken.\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"-KjqCO0PMISj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629222064267,"user_tz":240,"elapsed":14,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"63165568-51e1-4e03-b860-e4c0ae73281b"},"source":["# @title Look at environment_spec { form-width: \"30%\" }\n","\n","# Note: setup_environment is implemented in the same cell as GridWorld.\n","environment, environment_spec = setup_environment(simple_grid)\n","\n","print('actions:\\n', environment_spec.actions, '\\n')\n","print('observations:\\n', environment_spec.observations, '\\n')\n","print('rewards:\\n', environment_spec.rewards, '\\n')\n","print('discounts:\\n', environment_spec.discounts, '\\n')"],"execution_count":14,"outputs":[{"output_type":"stream","text":["actions:\n"," DiscreteArray(shape=(), dtype=int32, name=action, minimum=0, maximum=3, num_values=4) \n","\n","observations:\n"," Array(shape=(9, 10, 3), dtype=dtype('float32'), name='observation_grid') \n","\n","rewards:\n"," Array(shape=(), dtype=dtype('float32'), name='reward') \n","\n","discounts:\n"," BoundedArray(shape=(), dtype=dtype('float32'), name='discount', minimum=0.0, maximum=1.0) \n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"y5r1SnITMISk"},"source":["\n","We first set the environment to its initial state by calling the `reset()` method which returns the first observation and resets the agent to the starting location.\n"]},{"cell_type":"code","metadata":{"execution":{},"id":"-i6klY3XMISl","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1629222064584,"user_tz":240,"elapsed":327,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"f199a85b-3a98-4b58-fc52-5059edbf2d12"},"source":["environment.reset()\n","environment.plot_state()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":270,"height":244}}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"nWM_WyxqMISl"},"source":["Now we want to take an action to interact with the environment. We do this by passing a valid action to the `dm_env.Environment.step()` method which returns a `dm_env.TimeStep` namedtuple with fields `(step_type, reward, discount, observation)`.\n","\n","Let's take an action and visualise the resulting state of the grid-world. (You'll need to rerun the cell if you pick a new action.)"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"m45xoAVuMISn"},"source":["**Note for kaggle users:** As kaggle does not render the forms automatically the students should be careful to notice the various instructions and manually play around with the values for the variables"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"rReOFVloMISo","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1629223730943,"user_tz":240,"elapsed":328,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"88ccff3c-cc41-48b0-c900-ecfa16698f7b"},"source":["# @title Pick an action and see the state changing\n","action = \"down\" #@param [\"up\", \"right\", \"down\", \"left\"] {type:\"string\"}\n","\n","action_int = {'up': 0,\n","              'right': 1,\n","              'down': 2,\n","              'left':3 }\n","action = int(action_int[action])\n","timestep = environment.step(action)  # pytype: dm_env.TimeStep\n","environment.plot_state()"],"execution_count":25,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":270,"height":244}}}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"5m6I1EubMISq","executionInfo":{"status":"ok","timestamp":1629223740564,"user_tz":240,"elapsed":119,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Run loop  { form-width: \"30%\" }\n","# @markdown This function runs an agent in the environment for a number of\n","# @markdown episodes, allowing it to learn.\n","\n","# @markdown *Double-click* to inspect the `run_loop` function.\n","\n","\n","def run_loop(environment,\n","             agent,\n","             num_episodes=None,\n","             num_steps=None,\n","             logger_time_delta=1.,\n","             label='training_loop',\n","             log_loss=False,\n","             ):\n","  \"\"\"Perform the run loop.\n","\n","  We are following the Acme run loop.\n","\n","  Run the environment loop for `num_episodes` episodes. Each episode is itself\n","  a loop which interacts first with the environment to get an observation and\n","  then give that observation to the agent in order to retrieve an action. Upon\n","  termination of an episode a new episode will be started. If the number of\n","  episodes is not given then this will interact with the environment\n","  infinitely.\n","\n","  Args:\n","    environment: dm_env used to generate trajectories.\n","    agent: acme.Actor for selecting actions in the run loop.\n","    num_steps: number of steps to run the loop for. If `None` (default), runs\n","      without limit.\n","    num_episodes: number of episodes to run the loop for. If `None` (default),\n","      runs without limit.\n","    logger_time_delta: time interval (in seconds) between consecutive logging\n","      steps.\n","    label: optional label used at logging steps.\n","  \"\"\"\n","  logger = loggers.TerminalLogger(label=label, time_delta=logger_time_delta)\n","  iterator = range(num_episodes) if num_episodes else itertools.count()\n","  all_returns = []\n","\n","  num_total_steps = 0\n","  for episode in iterator:\n","    # Reset any counts and start the environment.\n","    start_time = time.time()\n","    episode_steps = 0\n","    episode_return = 0\n","    episode_loss = 0\n","\n","    timestep = environment.reset()\n","\n","    # Make the first observation.\n","    agent.observe_first(timestep)\n","\n","    # Run an episode.\n","    while not timestep.last():\n","      # Generate an action from the agent's policy and step the environment.\n","      action = agent.select_action(timestep.observation)\n","      timestep = environment.step(action)\n","\n","      # Have the agent observe the timestep and let the agent update itself.\n","      agent.observe(action, next_timestep=timestep)\n","      agent.update()\n","\n","      # Book-keeping.\n","      episode_steps += 1\n","      num_total_steps += 1\n","      episode_return += timestep.reward\n","\n","      if log_loss:\n","        episode_loss += agent.last_loss\n","\n","      if num_steps is not None and num_total_steps >= num_steps:\n","        break\n","\n","    # Collect the results and combine with counts.\n","    steps_per_second = episode_steps / (time.time() - start_time)\n","    result = {\n","        'episode': episode,\n","        'episode_length': episode_steps,\n","        'episode_return': episode_return,\n","    }\n","    if log_loss:\n","      result['loss_avg'] = episode_loss/episode_steps\n","\n","    all_returns.append(episode_return)\n","\n","    # Log the given results.\n","    logger.write(result)\n","\n","    if num_steps is not None and num_total_steps >= num_steps:\n","      break\n","  return all_returns"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"VgkdQ9yhMISs","executionInfo":{"status":"ok","timestamp":1629222064762,"user_tz":240,"elapsed":10,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Implement the evaluation loop { form-width: \"30%\" }\n","# @markdown This function runs the agent in the environment for a number of\n","# @markdown episodes, without allowing it to learn, in order to evaluate it.\n","\n","# @markdown *Double-click* to inspect the `evaluate` function.\n","\n","def evaluate(environment: dm_env.Environment,\n","             agent: acme.Actor,\n","             evaluation_episodes: int):\n","  frames = []\n","\n","  for episode in range(evaluation_episodes):\n","    timestep = environment.reset()\n","    episode_return = 0\n","    steps = 0\n","    while not timestep.last():\n","      frames.append(environment.plot_state(return_rgb=True))\n","\n","      action = agent.select_action(timestep.observation)\n","      timestep = environment.step(action)\n","      steps += 1\n","      episode_return += timestep.reward\n","    print(\n","        f'Episode {episode} ended with reward {episode_return} in {steps} steps'\n","    )\n","  return frames\n","\n","def display_video(frames: Sequence[np.ndarray],\n","                  filename: str = 'temp.mp4',\n","                  frame_rate: int = 12):\n","  \"\"\"Save and display video.\"\"\"\n","  # Write the frames to a video.\n","  with imageio.get_writer(filename, fps=frame_rate) as video:\n","    for frame in frames:\n","      video.append_data(frame)\n","\n","  # Read video and display the video.\n","  video = open(filename, 'rb').read()\n","  b64_video = base64.b64encode(video)\n","  video_tag = ('<video  width=\"320\" height=\"240\" controls alt=\"test\" '\n","               'src=\"data:video/mp4;base64,{0}\">').format(b64_video.decode())\n","  return IPython.display.HTML(video_tag)"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"-__jhZFSMISv"},"source":["## Section 2.2: The Agent\n","\n","We will be implementing Tabular & Function Approximation agents. Tabular agents are purely in Python.\n","\n","All agents will share the same interface from the Acme `Actor`. Here we borrow a figure from Acme to show how this interaction occurs:\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"SqK_haD0MISy"},"source":["### Agent interface\n","\n","<br>\n","<center><img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/actor_loop.png\" width=\"500\" /></center>\n","\n","<br>\n","\n","Each agent implements the following functions:\n","\n","```python\n","class Agent(acme.Actor):\n","  def __init__(self, number_of_actions, number_of_states, ...):\n","    \"\"\"Provides the agent the number of actions and number of states.\"\"\"\n","\n","  def select_action(self, observation):\n","    \"\"\"Generates actions from observations.\"\"\"\n","\n","  def observe_first(self, timestep):\n","    \"\"\"Records the initial timestep in a trajectory.\"\"\"\n","  \n","  def observe(self, action, next_timestep):\n","    \"\"\"Records the transition which occurred from taking an action.\"\"\"\n","\n","  def update(self):\n","    \"\"\"Updates the agent's internals to potentially change its behavior.\"\"\"\n","```\n","\n","Remarks on the `observe()` function:\n","\n","1. In the last method, the `next_timestep` provides the `reward`, `discount`, and `observation` that resulted from selecting `action`.\n","\n","2. The `next_timestep.step_type` will be either `MID` or `LAST` and should be used to determine whether this is the last observation in the episode.\n","\n","3. The `next_timestep.step_type` cannot be `FIRST`; such a timestep should only ever be given to `observe_first()`.\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"e1u0jLUZMIS0"},"source":["### Coding Exercise 2.1: Random Agent\n","\n","Below is a partially complete implemention of an agent that follows a random (non-learning) policy. Fill in the ```select_action``` method.\n","\n","The ```select_action``` method should return a random **integer** between 0 and ```self._num_actions``` (not a tensor or an array!)"]},{"cell_type":"code","metadata":{"execution":{},"id":"3nfj0akUMIS3","executionInfo":{"status":"ok","timestamp":1629223904904,"user_tz":240,"elapsed":112,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class RandomAgent(acme.Actor):\n","\n","  def __init__(self, environment_spec):\n","    \"\"\"Gets the number of available actions from the environment spec.\"\"\"\n","    self._num_actions = environment_spec.actions.num_values\n","\n","  def select_action(self, observation):\n","    \"\"\"Selects an action uniformly at random.\"\"\"\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Student exercise: complete the select action method\")\n","    #################################################\n","    # TODO return a random integer beween 0 and self._num_actions.\n","    # HINT: see the reference for how to sample a random integer in numpy:\n","    #   https://numpy.org/doc/1.16/reference/routines.random.html\n","    action = action = np.random.randint(self._num_actions)\n","    return action\n","\n","  def observe_first(self, timestep):\n","    \"\"\"Does not record as the RandomAgent has no use for data.\"\"\"\n","    pass\n","\n","  def observe(self, action, next_timestep):\n","    \"\"\"Does not record as the RandomAgent has no use for data.\"\"\"\n","    pass\n","\n","  def update(self):\n","    \"\"\"Does not update as the RandomAgent does not learn from data.\"\"\"\n","    pass\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 2.1: Random Agent')"],"execution_count":27,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"NO-7pkiNMIS4"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_23bbdfe0.py)\n","\n"]},{"cell_type":"code","metadata":{"execution":{},"id":"_RhNe6brMIS5","colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"status":"ok","timestamp":1629223924146,"user_tz":240,"elapsed":10911,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"7f411b69-2a37-4ff1-c08b-bda990e65017"},"source":["# @title Visualisation of a random agent in GridWorld { form-width: \"30%\" }\n","\n","# Create the agent by giving it the action space specification.\n","agent = RandomAgent(environment_spec)\n","\n","# Run the agent in the evaluation loop, which returns the frames.\n","frames = evaluate(environment, agent, evaluation_episodes=1)\n","\n","# Visualize the random agent's episode.\n","display_video(frames)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Episode 0 ended with reward -115.0 in 102 steps\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<video  width=\"320\" height=\"240\" controls alt=\"test\" src=\"data:video/mp4;base64,\">"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"dL_Xo48QMIS6"},"source":["---\n","# Section 3: The Bellman Equation\n","\n","*Time estimate: ~15mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"SCb5D0PmMIS6","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["bd2c9c21db394116a404bc6116e5300f","9bc6100537da4f448cb41773b6ab93f6","294b6f0897ec4d8bb1bdfbeec4266d53","21566329e8dc46d38d76d5be407c7703","75535c01168447ea8e043b306f967a52","7d53207600fe403ca5b947cdcebddba0"]},"executionInfo":{"status":"ok","timestamp":1629223949366,"user_tz":240,"elapsed":125,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"b6704269-ba5b-4ae7-93b8-40bafaaa9e53"},"source":["# @title Video 3: The Bellman Equation\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Lv411E7CB\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"cLCoNBmYUns\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 3: The Bellman Equation')\n","\n","display(out)"],"execution_count":29,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"bd2c9c21db394116a404bc6116e5300f","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"3CUBoWIoMIS7"},"source":["\n","\n","In this tutorial we focus mainly on <font color='green'>**value based methods**</font>, where agents maintain a value for all state-action pairs and use those estimates to choose actions that maximize that <font color='green'>**value**</font> (instead of maintaining a policy directly, like in <font color='blue'>**policy gradient methods**</font>). \n","\n","We represent the <font color='green'>**action-value function**</font> (otherwise known as $\\color{green}Q$-function associated with following/employing a policy $\\pi$ in a given MDP as:\n","\n","\\begin{equation}\n","\\color{green}Q^{\\color{blue}{\\pi}}(\\color{red}{s},\\color{blue}{a}) = \\mathbb{E}_{\\tau \\sim P^{\\color{blue}{\\pi}}} \\left[ \\sum_t \\gamma^t \\color{green}{r_t}| s_0=\\color{red}s,a_0=\\color{blue}{a} \\right]\n","\\end{equation}\n","\n","where $\\tau = \\{\\color{red}{s_0}, \\color{blue}{a_0}, \\color{green}{r_0}, \\color{red}{s_1}, \\color{blue}{a_1}, \\color{green}{r_1}, \\cdots \\}$\n","\n","\n","Recall that efficient value estimations are based on the famous **_Bellman Expectation Equation_**:\n","\n","\\begin{equation}\n","\\color{green}Q^\\color{blue}{\\pi}(\\color{red}{s},\\color{blue}{a}) =    \\sum_{\\color{red}{s'}\\in \\color{red}{\\mathcal{S}}} \n","\\color{purple}P(\\color{red}{s'} |\\color{red}{s},\\color{blue}{a})\n","\\left(\n","  \\color{green}{R}(\\color{red}{s},\\color{blue}{a}, \\color{red}{s'}) \n","  + \\gamma \\color{green}V^\\color{blue}{\\pi}(\\color{red}{s'}) \n","  \\right)\n","\\end{equation}\n","\n","where $\\color{green}V^\\color{blue}{\\pi}$ is the expected $\\color{green}Q^\\color{blue}{\\pi}$ value for a particular state, i.e. $\\color{green}V^\\color{blue}{\\pi}(\\color{red}{s}) = \\sum_{\\color{blue}{a} \\in \\color{blue}{\\mathcal{A}}} \\color{blue}{\\pi}(\\color{blue}{a} |\\color{red}{s}) \\color{green}Q^\\color{blue}{\\pi}(\\color{red}{s},\\color{blue}{a})$.\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"K5v_YfT0MIS-"},"source":["---\n","# Section 4: Policy Evaluation\n","\n","*Time estimate: ~30mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"4eFDaic-MIS-","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["89bd5a1fedc543e7ba817aaebc8296c7","0a10fd47d6914d4ba4b045c06459ec7f","662221d611d743a5b80f40ddce904513","066fb89ef89f40fd8681026313a15f88","1cb6cafd1d0e48aeab5e69a42a608051","1a4b5ff626954666a27b59f711cfa6ce"]},"executionInfo":{"status":"ok","timestamp":1629224465858,"user_tz":240,"elapsed":259,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"07fdae6d-6807-4c42-91a9-a66137b5d45f"},"source":["# @title Video 4: Policy Evaluation\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV15f4y157zA\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"HAxR4SuaZs4\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 4: Policy Evaluation')\n","\n","display(out)"],"execution_count":30,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"89bd5a1fedc543e7ba817aaebc8296c7","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"E94esORjMIS_"},"source":["### Lecture footnotes: \n","\n","**Episodic vs non-episodic environments:** Up until now, we've mainly been talking about episodic environments, or environments that terminate and reset (resampled) after a finite number of steps. However, there are also *non-episodic* environments, in which an agent cannot count on the environment resetting. Thus, they are forced to learn in a *continual* fashion.\n","\n","**Policy iteration vs value iteration:** Compare the two equations below, noting that the only difference is that in value iteration, the second sum is replaced by a max.\n","\n","*Policy iteration (using Bellman expectation equation)*\n","\\begin{equation}\n","\\color{green}Q_\\color{green}{k}(\\color{red}{s},\\color{blue}{a}) \\leftarrow  \\color{green}{R}(\\color{red}{s},\\color{blue}{a}) +\\gamma \\sum_{\\color{red}{s'}\\in \\color{red}{\\mathcal{S}}} \n","\\color{purple}P(\\color{red}{s'} |\\color{red}{s},\\color{blue}{a})\n","\\sum_{\\color{blue}{a'} \\in \\color{blue}{\\mathcal{A}}} \\color{blue}{\\pi_{k-1}}(\\color{blue}{a'} |\\color{red}{s'}) \\color{green}{Q_{k-1}}(\\color{red}{s'},\\color{blue}{a'})\n","\\end{equation}\n","\n","*Value iteration (using Bellman optimality equation)*\n","\\begin{equation}\n","\\color{green}Q_\\color{green}{k}(\\color{red}{s},\\color{blue}{a}) \\leftarrow  \\color{green}{R}(\\color{red}{s},\\color{blue}{a}) +\\gamma \\sum_{\\color{red}{s'}\\in \\color{red}{\\mathcal{S}}} \n","\\color{purple}P(\\color{red}{s'} |\\color{red}{s},\\color{blue}{a})\n","\\max_{\\color{blue}{a'}} \\color{green}{Q_{k-1}}(\\color{red}{s'},\\color{blue}{a'})\n","\\end{equation}"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"mcp_h9ZjMITA"},"source":["### Coding Exercise 4.1 Policy Evaluation Agent"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"cn_1Vz6vMITA"},"source":["\n","Tabular agents implement a function `q_values()` returning a matrix of Q values\n","of shape: (`number_of_states`, `number_of_actions`)\n","\n","In this section, we will implement a `PolicyEvalAgent` as an ACME actor: given an `evaluation_policy` $\\pi_e$ and a `behaviour_policy` $\\pi_b$, it will use the `behaviour_policy` to choose actions, and it will use the corresponding trajectory data to evaluate the `evaluation_policy` (i.e. compute the Q-values as if you were following the `evaluation_policy`). \n","\n","Algorithm:\n","\n","**Initialize** $Q(\\color{red}{s}, \\color{blue}{a})$ for all $\\color{red}{s}$ ∈ $\\mathcal{\\color{red}S}$ and $\\color{blue}a$ ∈ $\\mathcal{\\color{blue}A}(\\color{red}s)$\n","\n","**Loop forever**:\n","\n","1. $\\color{red}{s} \\gets{}$current (nonterminal) state\n"," \n","2. $\\color{blue}{a} \\gets{} \\text{behaviour_policy }\\pi_b(\\color{red}s)$\n"," \n","3. Take action $\\color{blue}{a}$; observe resulting reward $\\color{green}{r}$, discount $\\gamma$, and state, $\\color{red}{s'}$\n","\n","4. Compute TD-error: $\\delta = \\color{green}R + \\gamma Q(\\color{red}{s'}, \\underbrace{\\pi_e(\\color{red}{s'}}_{\\color{blue}{a'}})) − Q(\\color{red}s, \\color{blue}a)$\n","\n","4. Update Q-value with a small $\\alpha$ step: $Q(\\color{red}s, \\color{blue}a) \\gets Q(\\color{red}s, \\color{blue}a) + \\alpha \\delta$\n","\n","\n","We will use a uniform `random policy` as our `evaluation policy` here, but you could replace this with any policy you want, such as a greedy one."]},{"cell_type":"code","metadata":{"execution":{},"id":"3oDe_yZeMITA","executionInfo":{"status":"ok","timestamp":1629225108593,"user_tz":240,"elapsed":109,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Uniform random policy\n","def random_policy(q):\n","  return np.random.randint(4)"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"OOL0bIAdMITB","executionInfo":{"status":"ok","timestamp":1629225520115,"user_tz":240,"elapsed":140,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class PolicyEvalAgent(acme.Actor):\n","\n","  def __init__(self, environment_spec, evaluated_policy,\n","               behaviour_policy=random_policy, step_size=0.1):\n","\n","    self._state = None\n","    # Get number of states and actions from the environment spec.\n","    self._number_of_states = environment_spec.observations.num_values\n","    self._number_of_actions = environment_spec.actions.num_values\n","    self._step_size = step_size\n","    self._behaviour_policy = behaviour_policy\n","    self._evaluated_policy = evaluated_policy\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Initialize your Q-values!\")\n","    #################################################\n","    # TODO Initialize the Q-values to be all zeros.\n","    # (Note: can also be random, but we use zeros here for reproducibility)\n","    # HINT: This is a table of state and action pairs, so needs to be a 2-D\n","    #   array. See the reference for how to create this in numpy:\n","    #   https://numpy.org/doc/stable/reference/generated/numpy.zeros.html\n","    self._q = np.zeros((self._number_of_states, self._number_of_actions))\n","    self._action = None\n","    self._next_state = None\n","  @property\n","  def q_values(self):\n","    # return the Q values\n","    return self._q\n","\n","  def select_action(self, observation):\n","    # Select an action\n","    return self._behaviour_policy(self._q[observation])\n","\n","  def observe_first(self, timestep):\n","    self._state = timestep.observation\n","\n","  def observe(self, action, next_timestep):\n","    s = self._state\n","    a = action\n","    r = next_timestep.reward\n","    g = next_timestep.discount\n","    next_s = next_timestep.observation\n","\n","    # Compute TD-Error.\n","    self._action = a\n","    self._next_state = next_s\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Need to select the next action\")\n","    #################################################\n","    # TODO Select the next action from the evaluation policy\n","    # HINT: Refer to step 4 of the algorithm above.\n","    next_a = self._evaluated_policy(self._q[next_s])\n","    self._td_error = r + g * self._q[next_s, next_a] - self._q[s, a]\n","\n","  def update(self):\n","    # Updates\n","    s = self._state\n","    a = self._action\n","    # Q-value table update.\n","    self._q[s, a] += self._step_size * self._td_error\n","    # Update the state\n","    self._state = self._next_state\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 4.1 Policy Evaluation Agent')"],"execution_count":33,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"0SsxBLIuMITB"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_b681200a.py)\n","\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"zT-u3EtxMITC","colab":{"base_uri":"https://localhost:8080/","height":612},"executionInfo":{"status":"ok","timestamp":1629225614009,"user_tz":240,"elapsed":1141,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"cdc0972f-c3c4-4a83-9fbb-759a39c1baec"},"source":["# @title Perform policy evaluation { form-width: \"30%\" }\n","# @markdown Here you can visualize the state value and action-value functions for the \"simple\" task.\n","num_steps = 1e3\n","\n","# Create the environment\n","grid = build_gridworld_task(task='simple')\n","environment, environment_spec = setup_environment(grid)\n","\n","# Create the policy evaluation agent to evaluate a random policy.\n","agent = PolicyEvalAgent(environment_spec, evaluated_policy=random_policy)\n","\n","# run experiment and get the value functions from agent\n","returns = run_loop(environment=environment, agent=agent, num_steps=int(num_steps))\n","\n","# get the q-values\n","q = agent.q_values.reshape(grid._layout.shape + (4, ))\n","\n","# visualize value functions\n","print('AFTER {} STEPS ...'.format(num_steps))\n","plot_action_values(q, epsilon=1.)"],"execution_count":34,"outputs":[{"output_type":"stream","text":["AFTER 1000.0 STEPS ...\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 10 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":558},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"1i_wbdoeMITC"},"source":["---\n","# Section 5: Tabular Value-Based Model-Free Learning\n","\n","*Time estimate: ~50mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"PJKlO6IIMITD","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["f8c3e7440cf748a5b87c999eb53890c4","afc0bbcc57624f8fa558415c5fb9aff8","d9c708454efc44bea28dcb42700e010f","b0f07600759149b99834c2c2394e8f0d","808933c85be24ced9d0cb37da6006542","50ce53d0f239427086fcbf55f759ee88"]},"executionInfo":{"status":"ok","timestamp":1629225634899,"user_tz":240,"elapsed":140,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"ee077381-34da-4e94-856c-45a95603d3f0"},"source":["# @title Video 5: Model-Free Learning\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1iU4y1n7M6\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"Y4TweUYnexU\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 5: Model-Free Learning')\n","\n","display(out)"],"execution_count":35,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f8c3e7440cf748a5b87c999eb53890c4","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"5G82FKA8MITD"},"source":["### Lecture footnotes: \n","\n","**On-policy (SARSA) vs off-policy (Q-learning) TD control:** Compare the two equations below and see that the only difference is that for Q-learning, the update is performed assuming that a greedy policy is followed, which is not the one used to collect the data, hence the name *off-policy*. \n","\n","*SARSA*\n","\\begin{equation}\n","\\color{green}Q(\\color{red}{s},\\color{blue}{a}) \\leftarrow  \\color{green}Q(\\color{red}{s},\\color{blue}{a}) +\\alpha(\\color{green}{r} + \\gamma\\color{green}{Q}(\\color{red}{s'},\\color{blue}{a'}) - \\color{green}{Q}(\\color{red}{s},\\color{blue}{a}))\n","\\end{equation}\n","\n","*Q-learning*\n","\\begin{equation}\n","\\color{green}Q(\\color{red}{s},\\color{blue}{a}) \\leftarrow  \\color{green}Q(\\color{red}{s},\\color{blue}{a}) +\\alpha(\\color{green}{r} + \\gamma\\max_{\\color{blue}{a'}} \\color{green}{Q}(\\color{red}{s'},\\color{blue}{a'}) - \\color{green}{Q}(\\color{red}{s},\\color{blue}{a}))\n","\\end{equation}"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"WDesGG5eMITE"},"source":["## Section 5.1: On-policy control: SARSA Agent\n","In this section, we are focusing on control RL algorithms, which perform the **evaluation** and **improvement** of the policy synchronously. That is, the policy that is being evaluated improves as the agent is using it to interact with the environent.\n","\n","\n","The first algorithm we are going to be looking at is SARSA. This is an **on-policy algorithm** -- i.e: the data collection is done by leveraging the policy we're trying to optimize. \n","\n","As discussed during lectures, a greedy policy with respect to a given $\\color{Green}Q$ fails to explore the environment as needed; we will use instead an $\\epsilon$-greedy policy with respect to $\\color{Green}Q$.\n","\n","### SARSA Algorithm\n","\n","**Input:**\n","- $\\epsilon \\in (0, 1)$ the probability of taking a random action , and\n","- $\\alpha > 0$ the step size, also known as learning rate.\n","\n","**Initialize:** $\\color{green}Q(\\color{red}{s}, \\color{blue}{a})$ for all $\\color{red}{s}$ ∈ $\\mathcal{\\color{red}S}$ and $\\color{blue}a$ ∈ $\\mathcal{\\color{blue}A}$\n","\n","**Loop forever:**\n","\n","1. Get $\\color{red}s \\gets{}$current (non-terminal) state\n"," \n","2. Select $\\color{blue}a \\gets{} \\text{epsilon_greedy}(\\color{green}Q(\\color{red}s, \\cdot))$\n"," \n","3. Step in the environment by passing the selected action $\\color{blue}a$\n","\n","4. Observe resulting reward $\\color{green}r$, discount $\\gamma$, and state $\\color{red}{s'}$\n","\n","5. Compute TD error: $\\Delta \\color{green}Q \\gets \n","\\color{green}r + \\gamma \\color{green}Q(\\color{red}{s'}, \\color{blue}{a'}) − \\color{green}Q(\\color{red}s, \\color{blue}a)$, <br> where $\\color{blue}{a'} \\gets \\text{epsilon_greedy}(\\color{green}Q(\\color{red}{s'}, \\cdot))$\n","\n","5. Update $\\color{green}Q(\\color{red}s, \\color{blue}a) \\gets \\color{green}Q(\\color{red}s, \\color{blue}a) + \\alpha \\Delta \\color{green}Q$\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"FqxvVbwQMITE"},"source":["### Coding Exercise 5.1: Implement $\\epsilon$-greedy\n","Below you will find incomplete code for sampling from an $\\epsilon$-greedy policy, to be used later when we implement an agent that learns values according to the SARSA algorithm.\n","\n","\n"]},{"cell_type":"code","metadata":{"execution":{},"id":"FuY7DbVTMITF","executionInfo":{"status":"ok","timestamp":1629230966327,"user_tz":240,"elapsed":110,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["def epsilon_greedy(\n","    q_values_at_s: np.ndarray,  # Q-values in state s: Q(s, a).\n","    epsilon: float = 0.1  # Probability of taking a random action.\n","    ):\n","  \"\"\"Return an epsilon-greedy action sample.\"\"\"\n","  #################################################\n","  # Fill in missing code below (...),\n","  # then remove or comment the line below to test your implementation\n","  #raise NotImplementedError(\"Student exercise: complete epsilon greedy policy function\")\n","  #################################################\n","  # TODO generate a uniform random number and compare it to epsilon to decide if\n","  # the action should be greedy or not\n","  # HINT: Use np.random.random() to generate a random float from 0 to 1.\n","  if epsilon < np.random.random():\n","    #TODO Greedy: Pick action with the largest Q-value.\n","    action = np.argmax(q_values_at_s)   \n","  else:\n","    # Get the number of actions from the size of the given vector of Q-values.\n","    num_actions = np.array(q_values_at_s).shape[-1]\n","    # TODO else return a random action\n","    # HINT: Use np.random.randint() to generate a random integer.\n","    action = np.random.randint(num_actions)\n","\n","  return action\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 5.1: Implement  epsilon-greedy')"],"execution_count":39,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Dnfv60KzMITF"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_7137b538.py)\n","\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"QaMQ9zCRMITG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629230976696,"user_tz":240,"elapsed":174,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"c7cb6599-3a1c-4d4b-c73a-dd18e37167dc"},"source":["# @title Sample action from $\\epsilon$-greedy { form-width: \"30%\" }\n","# @markdown With $\\epsilon=0.5$, you should see that about half the time, you will get back the optimal\n","# @markdown action 3, but half the time, it will be random.\n","\n","# Create fake q-values\n","q_values = np.array([0, 0, 0, 1])\n","\n","# Set epsilon = 0.5\n","epsilon = 0.5\n","action = epsilon_greedy(q_values, epsilon=epsilon)\n","print(action)"],"execution_count":40,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"BAIUMjBVMITG"},"source":["### Coding Exercise 5.2: Run your SARSA agent on the `obstacle` environment\n","\n","This environment is similar to the Cliff-walking example from [Sutton & Barto](http://incompleteideas.net/book/RLbook2018.pdf) and allows us to see the different policies learned by on-policy vs off-policy methods. Try varying the number of steps."]},{"cell_type":"code","metadata":{"execution":{},"id":"AVWKPQKnMITH","executionInfo":{"status":"ok","timestamp":1629231612922,"user_tz":240,"elapsed":128,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class SarsaAgent(acme.Actor):\n","\n","  def __init__(self,\n","               environment_spec: specs.EnvironmentSpec,\n","               epsilon: float,\n","               step_size: float = 0.1\n","               ):\n","\n","    # Get number of states and actions from the environment spec.\n","    self._num_states = environment_spec.observations.num_values\n","    self._num_actions = environment_spec.actions.num_values\n","\n","    # Create the table of Q-values, all initialized at zero.\n","    self._q = np.zeros((self._num_states, self._num_actions))\n","\n","    # Store algorithm hyper-parameters.\n","    self._step_size = step_size\n","    self._epsilon = epsilon\n","\n","    # Containers you may find useful.\n","    self._state = None\n","    self._action = None\n","    self._next_state = None\n","\n","  @property\n","  def q_values(self):\n","    return self._q\n","\n","  def select_action(self, observation):\n","    return epsilon_greedy(self._q[observation], self._epsilon)\n","\n","  def observe_first(self, timestep):\n","    # Set current state.\n","    self._state = timestep.observation\n","\n","  def observe(self, action, next_timestep):\n","    # Unpacking the timestep to lighten notation.\n","    s = self._state\n","    a = action\n","    r = next_timestep.reward\n","    g = next_timestep.discount\n","    next_s = next_timestep.observation\n","    # Compute the action that would be taken from the next state.\n","    next_a = self.select_action(next_s)\n","    # Compute the on-policy Q-value update.\n","    self._action = a\n","    self._next_state = next_s\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Student exercise: complete the on-policy Q-value update\")\n","    #################################################\n","    # TODO complete the line below to compute the temporal difference error\n","    # HINT: see step 5 in the pseudocode above.\n","    self._td_error = r + g * self._q[next_s, next_a] - self._q[s, a]\n","\n","  def update(self):\n","    # Optional unpacking to lighten notation.\n","    s = self._state\n","    a = self._action\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Student exercise: complete value update\")\n","    #################################################\n","    # Update the Q-value table value at (s, a).\n","    # TODO: Update the Q-value table value at (s, a).\n","    # HINT: see step 6 in the pseudocode above, remember that alpha = step_size!\n","    self._q[s, a] += self._step_size * self._td_error\n","    # Update the current state.\n","    self._state = self._next_state\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 5.2: Run your SARSA agent on the obstacle environment')"],"execution_count":42,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"TgsuK3h4MITI"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_4099088a.py)\n","\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"0VbG0XlLMITI","colab":{"base_uri":"https://localhost:8080/","height":876},"executionInfo":{"status":"ok","timestamp":1629231628416,"user_tz":240,"elapsed":8357,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"8a5399f9-7a07-4521-a28e-f20578cffa64"},"source":["# @title Run SARSA agent and visualize value function\n","\n","num_steps = 1e5 # @param {type:\"number\"}\n","num_steps = int(num_steps)\n","\n","# Create the environment.\n","grid = build_gridworld_task(task='obstacle')\n","environment, environment_spec = setup_environment(grid)\n","\n","# Create the agent.\n","agent = SarsaAgent(environment_spec, epsilon=0.1, step_size=0.1)\n","\n","# Run the experiment and get the value functions from agent\n","returns = run_loop(environment=environment, agent=agent, num_steps=num_steps)\n","print('AFTER {0:,} STEPS ...'.format(num_steps))\n","\n","# Get the Q-values and reshape them to recover grid-like structure of states.\n","q_values = agent.q_values\n","grid_shape = grid.layout.shape\n","q_values = q_values.reshape([*grid_shape, -1])\n","\n","# Visualize the value and Q-value tables.\n","plot_action_values(q_values, epsilon=1.)\n","\n","# Visualize the greedy policy.\n","environment.plot_greedy_policy(q_values)"],"execution_count":43,"outputs":[{"output_type":"stream","text":["AFTER 100,000 STEPS ...\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 10 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":558},"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":270,"height":264}}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"_pbnqtX9MITJ"},"source":["##Section 5.2 Off-policy control: Q-learning Agent\n","Reminder: $\\color{green}Q$-learning is a very powerful and general algorithm, that enables control (figuring out the optimal policy/value function) both on and off-policy.\n","\n","**Initialize** $\\color{green}Q(\\color{red}{s}, \\color{blue}{a})$ for all $\\color{red}{s} \\in \\color{red}{\\mathcal{S}}$ and $\\color{blue}{a} \\in \\color{blue}{\\mathcal{A}}$\n","\n","**Loop forever**:\n","\n","1. Get $\\color{red}{s} \\gets{}$current (non-terminal) state\n"," \n","2. Select $\\color{blue}{a} \\gets{} \\text{behaviour_policy}(\\color{red}{s})$\n"," \n","3. Step in the environment by passing the selected action $\\color{blue}{a}$\n","\n","4. Observe resulting reward $\\color{green}{r}$, discount $\\gamma$, and state, $\\color{red}{s'}$\n","\n","5. Compute the TD error: $\\Delta \\color{green}Q \\gets \\color{green}{r} + \\gamma \\color{green}Q(\\color{red}{s'}, \\color{blue}{a'}) − \\color{green}Q(\\color{red}{s}, \\color{blue}{a})$, <br>\n","where $\\color{blue}{a'} \\gets \\arg\\max_{\\color{blue}{\\mathcal A}} \\color{green}Q(\\color{red}{s'}, \\cdot)$\n","\n","6. Update $\\color{green}Q(\\color{red}{s}, \\color{blue}{a}) \\gets \\color{green}Q(\\color{red}{s}, \\color{blue}{a}) + \\alpha \\Delta \\color{green}Q$\n","\n","Notice that the actions $\\color{blue}{a}$ and $\\color{blue}{a'}$ are not selected using the same policy, hence this algorithm being **off-policy**."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"OdeK0F0zMITK"},"source":["### Coding Exercise 5.3: Implement Q-Learning\n"]},{"cell_type":"code","metadata":{"execution":{},"id":"GucqSzLwMITK","executionInfo":{"status":"ok","timestamp":1629231760958,"user_tz":240,"elapsed":129,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["QValues = np.ndarray\n","Action = int\n","# A value-based policy takes the Q-values at a state and returns an action.\n","ValueBasedPolicy = Callable[[QValues], Action]\n","\n","\n","class QLearningAgent(acme.Actor):\n","\n","  def __init__(self,\n","               environment_spec: specs.EnvironmentSpec,\n","               behaviour_policy: ValueBasedPolicy,\n","               step_size: float = 0.1):\n","\n","    # Get number of states and actions from the environment spec.\n","    self._num_states = environment_spec.observations.num_values\n","    self._num_actions = environment_spec.actions.num_values\n","\n","    # Create the table of Q-values, all initialized at zero.\n","    self._q = np.zeros((self._num_states, self._num_actions))\n","\n","    # Store algorithm hyper-parameters.\n","    self._step_size = step_size\n","\n","    # Store behavior policy.\n","    self._behaviour_policy = behaviour_policy\n","\n","    # Containers you may find useful.\n","    self._state = None\n","    self._action = None\n","    self._next_state = None\n","\n","  @property\n","  def q_values(self):\n","    return self._q\n","\n","  def select_action(self, observation):\n","    return self._behaviour_policy(self._q[observation])\n","\n","  def observe_first(self, timestep):\n","    # Set current state.\n","    self._state = timestep.observation\n","\n","  def observe(self, action, next_timestep):\n","    # Unpacking the timestep to lighten notation.\n","    s = self._state\n","    a = action\n","    r = next_timestep.reward\n","    g = next_timestep.discount\n","    next_s = next_timestep.observation\n","\n","    # Compute the TD error.\n","    self._action = a\n","    self._next_state = next_s\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Student exercise: complete the off-policy Q-value update\")\n","    #################################################\n","    # TODO complete the line below to compute the temporal difference error\n","    # HINT: This is very similar to what we did for SARSA, except keep in mind\n","    # that we're now taking a max over the q-values (see lecture footnotes above).\n","    # You will find the function np.max() useful.\n","    self._td_error = r + g * np.max(self._q[next_s]) - self._q[s, a]\n","\n","  def update(self):\n","    # Optional unpacking to lighten notation.\n","    s = self._state\n","    a = self._action\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Student exercise: complete value update\")\n","    #################################################\n","    # Update the Q-value table value at (s, a).\n","    # TODO: Update the Q-value table value at (s, a).\n","    # HINT: see step 6 in the pseudocode above, remember that alpha = step_size!\n","    self._q[s, a] += self._step_size * self._td_error\n","    # Update the current state.\n","    self._state = self._next_state\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 5.3: Implement Q-Learning')"],"execution_count":49,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"vqwoKq7_MITL"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_8c430935.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"FPStVo7eMITM"},"source":["### Run your Q-learning agent on the `obstacle` environment\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"8fNIv23fMITM","colab":{"base_uri":"https://localhost:8080/","height":876},"executionInfo":{"status":"ok","timestamp":1629231773486,"user_tz":240,"elapsed":8363,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"4cd0a816-640e-46d5-8a8b-7d1d0cf4718d"},"source":["# @title Run your Q-learning\n","epsilon =   1. # @param {type:\"number\"}\n","num_steps = 1e5  # @param {type:\"number\"}\n","num_steps = int(num_steps)\n","\n","# environment\n","grid = build_gridworld_task(task='obstacle')\n","environment, environment_spec = setup_environment(grid)\n","\n","# behavior policy\n","behavior_policy = lambda qval: epsilon_greedy(qval, epsilon=epsilon)\n","\n","# agent\n","agent = QLearningAgent(environment_spec, behavior_policy, step_size=0.1)\n","\n","# run experiment and get the value functions from agent\n","returns = run_loop(environment=environment, agent=agent, num_steps=num_steps)\n","\n","# get the q-values\n","q = agent.q_values.reshape(grid.layout.shape + (4,))\n","\n","# visualize value functions\n","print('AFTER {:,} STEPS ...'.format(num_steps))\n","plot_action_values(q, epsilon=0)\n","\n","# visualise the greedy policy\n","grid.plot_greedy_policy(q)\n","plt.show()"],"execution_count":50,"outputs":[{"output_type":"stream","text":["AFTER 100,000 STEPS ...\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 10 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":558},"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":270,"height":264}}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"hUhGoiNrMITM"},"source":["### Experiment with different levels of greediness\n","\n","* The default was $\\epsilon=1.$, what does this correspond to?\n","* Try also $\\epsilon =0.1, 0.5$. What do you observe? Does the behaviour policy affect the training in any way?"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"6B0I__YpMITN","colab":{"base_uri":"https://localhost:8080/","height":876},"executionInfo":{"status":"ok","timestamp":1629231801680,"user_tz":240,"elapsed":9214,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"8f84d96e-3922-4a3c-edf5-883bb2442819"},"source":["# @title Run the cell\n","epsilon = 0.1  # @param {type:\"number\"}\n","num_steps = 1e5  # @param {type:\"number\"}\n","num_steps = int(num_steps)\n","\n","# environment\n","grid = build_gridworld_task(task='obstacle')\n","environment, environment_spec = setup_environment(grid)\n","\n","# behavior policy\n","behavior_policy = lambda qval: epsilon_greedy(qval, epsilon=epsilon)\n","\n","# agent\n","agent = QLearningAgent(environment_spec, behavior_policy, step_size=0.1)\n","\n","# run experiment and get the value functions from agent\n","returns = run_loop(environment=environment, agent=agent, num_steps=num_steps)\n","\n","# get the q-values\n","q = agent.q_values.reshape(grid.layout.shape + (4,))\n","\n","# visualize value functions\n","print('AFTER {:,} STEPS ...'.format(num_steps))\n","plot_action_values(q, epsilon=epsilon)\n","\n","# visualise the greedy policy\n","grid.plot_greedy_policy(q)\n","plt.show()"],"execution_count":52,"outputs":[{"output_type":"stream","text":["AFTER 100,000 STEPS ...\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 10 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":558},"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":270,"height":264}}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"_C8hDkQOMITN"},"source":["---\n","# Section 6: Function Approximation\n","\n","*Time estimate: ~25mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"B0NdB55HMITN","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["6631ff1e3d694252836dd3754fb5bfe1","72b09efe76be4f80a4837253689a9682","9cdaacfbb2f14b01a743a1d114084b3a","a0818933caaa4982ad6e96b220c107a9","5456de0265ec429eb0999ef11778eb33","0294c5d239464620816f725a4123e0f7"]},"executionInfo":{"status":"ok","timestamp":1629228571824,"user_tz":240,"elapsed":403,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"11dca3ca-0d92-472d-8ba9-5f723dcc969d"},"source":["# @title Video 6: Function approximation\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1sg411M7cn\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"7_MYePyYhrM\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 6: Function approximation')\n","\n","display(out)"],"execution_count":36,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6631ff1e3d694252836dd3754fb5bfe1","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ntDuqlASMITO"},"source":["<center><img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/fm_RL_loop.png\" width=\"500\" /></center>\n","\n","So far we only considered look-up tables for value-functions. In all previous cases every state and action pair $(\\color{red}{s}, \\color{blue}{a})$, had an entry in our $\\color{green}Q$-table. Again, this is possible in this environment as the number of states is equal to the number of cells in the grid. But this is not scalable to situations where, say, the goal location changes or the obstacles are in different locations at every episode (consider how big the table could be in this situation?).\n","\n","An example (not covered in this tutorial) is ATARI from pixels, where the number of possible frames an agent can see is exponential in the number of pixels on the screen.\n","\n","<center><img width=\"200\" alt=\"portfolio_view\" src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/atari_pixels.gif\"></center>\n","\n","But what we **really** want is just to be able to *compute* the Q-value, when fed with a particular $(\\color{red}{s}, \\color{blue}{a})$ pair. So if we had a way to get a function to do this work instead of keeping a big table, we'd get around this problem.\n","\n","To address this, we can use **function approximation** as a way to generalize Q-values over some representation of the very large state space, and **train** them to output the values they should. In this section, we will explore $\\color{green}Q$-learning with function approximation, which (although it has been theoretically proven to diverge for some degenerate MDPs) can yield impressive results in very large environments. In particular, we will look at [Neural Fitted Q (NFQ) Iteration](http://ml.informatik.uni-freiburg.de/former/_media/publications/rieecml05.pdf) and [Deep Q-Networks (DQN)](https://www.cs.toronto.edu/~vmnih/docs/dqn.pdf).\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"brZ360rtMITP"},"source":["## Section 6.1 Replay Buffers\n","An important property of off-policy methods like $\\color{green}Q$-learning is that they involve two policies: one for exploration and one that is being optimized (via the $\\color{green}Q$-function updates). This means that we can generate data from the **behavior** policy and insert that data into some form of data storage---usually referred to as **replay**.\n","\n","In order to optimize the $\\color{green}Q$-function we can then sample data from the replay <font color='purple'>**dataset**</font> and use that data to perform an update. An illustration of this learning loop is shown below.\n","\n","<center><img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/agent_loop.png\" width=\"400\" /></center> \n","\n","In the next cell we will show how to implement a simple replay buffer. This can be as simple as a python list containing transition data. In more complicated scenarios we might want to have a more performance-tuned variant, we might have to be more concerned about how large replay is and what to do when its full, and we might want to sample from replay in different ways. But a simple python list can go a surprisingly long way."]},{"cell_type":"code","metadata":{"execution":{},"id":"oMyNbb91MITP","executionInfo":{"status":"ok","timestamp":1629232837299,"user_tz":240,"elapsed":113,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Simple replay buffer\n","\n","# Create a convenient container for the SARS tuples required by deep RL agents.\n","Transitions = collections.namedtuple(\n","    'Transitions', ['state', 'action', 'reward', 'discount', 'next_state'])\n","\n","class ReplayBuffer(object):\n","  \"\"\"A simple Python replay buffer.\"\"\"\n","\n","  def __init__(self, capacity: int = None):\n","    self.buffer = collections.deque(maxlen=capacity)\n","    self._prev_state = None\n","\n","  def add_first(self, initial_timestep: dm_env.TimeStep):\n","    self._prev_state = initial_timestep.observation\n","\n","  def add(self, action: int, timestep: dm_env.TimeStep):\n","    transition = Transitions(\n","        state=self._prev_state,\n","        action=action,\n","        reward=timestep.reward,\n","        discount=timestep.discount,\n","        next_state=timestep.observation,\n","    )\n","    self.buffer.append(transition)\n","    self._prev_state = timestep.observation\n","\n","  def sample(self, batch_size: int) -> Transitions:\n","    # Sample a random batch of Transitions as a list.\n","    batch_as_list = random.sample(self.buffer, batch_size)\n","\n","    # Convert the list of `batch_size` Transitions into a single Transitions\n","    # object where each field has `batch_size` stacked fields.\n","    return tree_utils.stack_sequence_fields(batch_as_list)\n","\n","  def flush(self) -> Transitions:\n","    entire_buffer = tree_utils.stack_sequence_fields(self.buffer)\n","    self.buffer.clear()\n","    return entire_buffer\n","\n","  def is_ready(self, batch_size: int) -> bool:\n","    return batch_size <= len(self.buffer)"],"execution_count":53,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"CFKU50DXMITQ"},"source":["## Section 6.2: NFQ Agent\n","[Neural Fitted Q Iteration](http://ml.informatik.uni-freiburg.de/former/_media/publications/rieecml05.pdf) was one of the first papers to demonstrate how to leverage recent advances in Deep Learning to approximate the Q-value by a neural network.$^1$\n","In other words, the value $\\color{green}Q(\\color{red}{s}, \\color{blue}{a})$ are approximated by the output of a neural network $\\color{green}{Q_w}(\\color{red}{s}, \\color{blue}{a})$ for each possible action $\\color{blue}{a} \\in \\color{blue}{\\mathcal{A}}$.$^2$\n","\n","When introducing function approximations, and neural networks in particular, we need to have a loss to optimize. But looking back at the tabular setting above, you can see that we already have some notion of error: the **TD error**.\n","\n","By training our neural network to output values such that the *TD error is minimized*, we will also satisfy the Bellman Optimality Equation, which is a good sufficient condition to enforce, to obtain an optimal policy.\n","Thanks to automatic differentiation, we can just write the TD error as a loss, e.g., with an $\\ell^2$ loss, but others would work too:\n","\n","\\begin{equation}\n","L(\\color{green}w) = \\mathbb{E}\\left[ \\left( \\color{green}{r} + \\gamma \\max_\\color{blue}{a'} \\color{green}{Q_w}(\\color{red}{s'}, \\color{blue}{a'}) − \\color{green}{Q_w}(\\color{red}{s}, \\color{blue}{a})  \\right)^2\\right].\n","\\end{equation}\n","\n","Then we can compute the gradient with respect to the parameters of the neural network and improve our Q-value approximation incrementally.\n","\n","NFQ builds on $\\color{green}Q$-learning, but if one were to update the Q-values online directly, the training can be unstable and very slow.\n","Instead, NFQ uses a replay buffer, similar to what we see implemented above (Section 6.1), to update the Q-value in a batched setting.\n","\n","When it was introduced, it also was entirely off-policy using a uniformly random policy to collect data, which was prone to instability when applied to more complex environments (e.g. when the input are pixels or the tasks are longer and more complicated).\n","But it is a good stepping stone to the more complex agents used today. Here, we will look at a slightly different and modernised implementation of NFQ.\n","\n","Below you will find an incomplete NFQ agent that takes in observations from a gridworld. Instead of receiving a tabular state, it receives an observation in the form of its (x,y) coordinates in the gridworld, and the (x,y) coordinates of the goal.\n","<br />\n","\n","The goal of this coding exercise is to complete this agent by implementing the loss, using mean squared error.\n","\n","---\n","\n","<sub>$^1$ If you read the NFQ paper, they use a \"control\" notation, where there is a \"cost to minimize\", instead of \"rewards to maximize\", so don't be surprised if signs/max/min do not correspond.</sub>\n","\n","<sub>$^2$ We could feed it $\\color{blue}{a}$ as well and ask $Q_w$ for a single scalar value, but given we have a fixed number of actions and we usually need to take an $argmax$ over them, it's easiest to just output them all in one pass.</sub>\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"tSU-RgLVMITR"},"source":["### Coding Exercise 6.1: Implement NFQ "]},{"cell_type":"code","metadata":{"execution":{},"id":"n_-sOD0-MITR","executionInfo":{"status":"ok","timestamp":1629232878442,"user_tz":240,"elapsed":221,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Create a convenient container for the SARS tuples required by NFQ.\n","Transitions = collections.namedtuple(\n","    'Transitions', ['state', 'action', 'reward', 'discount', 'next_state'])\n","\n","\n","class NeuralFittedQAgent(acme.Actor):\n","\n","  def __init__(self,\n","               environment_spec: specs.EnvironmentSpec,\n","               q_network: nn.Module,\n","               replay_capacity: int = 100_000,\n","               epsilon: float = 0.1,\n","               batch_size: int = 1,\n","               learning_rate: float = 3e-4):\n","\n","    # Store agent hyperparameters and network.\n","    self._num_actions = environment_spec.actions.num_values\n","    self._epsilon = epsilon\n","    self._batch_size = batch_size\n","    self._q_network = q_network\n","\n","    # Container for the computed loss (see run_loop implementation above).\n","    self.last_loss = 0.0\n","\n","    # Create the replay buffer.\n","    self._replay_buffer = ReplayBuffer(replay_capacity)\n","\n","    # Setup optimizer that will train the network to minimize the loss.\n","    self._optimizer = torch.optim.Adam(self._q_network.parameters(),lr = learning_rate)\n","    self._loss_fn = nn.MSELoss()\n","\n","  def select_action(self, observation):\n","    # Compute Q-values.\n","    q_values = self._q_network(torch.tensor(observation).unsqueeze(0))  # Adds batch dimension.\n","    q_values = q_values.squeeze(0)   # Removes batch dimension\n","\n","    # Select epsilon-greedy action.\n","    if self._epsilon < torch.rand(1):\n","      action = q_values.argmax(axis=-1)\n","    else:\n","      action = torch.randint(low=0, high=self._num_actions , size=(1,), dtype=torch.int64)\n","    return action\n","\n","  def q_values(self, observation):\n","    q_values = self._q_network(torch.tensor(observation).unsqueeze(0))\n","    return q_values.squeeze(0).detach()\n","\n","  def update(self):\n","\n","    if not self._replay_buffer.is_ready(self._batch_size):\n","      # If the replay buffer is not ready to sample from, do nothing.\n","      return\n","\n","    # Sample a minibatch of transitions from experience replay.\n","    transitions = self._replay_buffer.sample(self._batch_size)\n","\n","    # Note: each of these tensors will be of shape [batch_size, ...].\n","    s = torch.tensor(transitions.state)\n","    a = torch.tensor(transitions.action,dtype=torch.int64)\n","    r = torch.tensor(transitions.reward)\n","    d = torch.tensor(transitions.discount)\n","    next_s = torch.tensor(transitions.next_state)\n","\n","    # Compute the Q-values at next states in the transitions.\n","    with torch.no_grad():\n","      q_next_s = self._q_network(next_s)  # Shape [batch_size, num_actions].\n","      max_q_next_s = q_next_s.max(axis=-1)[0]\n","      # Compute the TD error and then the losses.\n","      target_q_value = r + d * max_q_next_s\n","\n","    # Compute the Q-values at original state.\n","    q_s = self._q_network(s)\n","\n","    # Gather the Q-value corresponding to each action in the batch.\n","    q_s_a = q_s.gather(1, a.view(-1,1)).squeeze(0)\n","    #################################################\n","    # Fill in missing code below (...),\n","    # then remove or comment the line below to test your implementation\n","    #raise NotImplementedError(\"Student exercise: complete the NFQ Agent\")\n","    #################################################\n","    # TODO Average the squared TD errors over the entire batch using\n","    # self._loss_fn, which is defined above as nn.MSELoss()\n","    # HINT: Take a look at the reference for nn.MSELoss here:\n","    #  https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html\n","    #  What should you put for the input and the target?\n","    loss = self._loss_fn(target_q_value, q_s_a)\n","    # Compute the gradients of the loss with respect to the q_network variables.\n","    self._optimizer.zero_grad()\n","\n","    loss.backward()\n","    # Apply the gradient update.\n","    self._optimizer.step()\n","\n","    # Store the loss for logging purposes (see run_loop implementation above).\n","    self.last_loss = loss.detach().numpy()\n","\n","  def observe_first(self, timestep: dm_env.TimeStep):\n","    self._replay_buffer.add_first(timestep)\n","\n","  def observe(self, action: int, next_timestep: dm_env.TimeStep):\n","    self._replay_buffer.add(action, next_timestep)\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 6.1: Implement NFQ')"],"execution_count":55,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"yWKLBidnMITS"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_f331422f.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"IJR-s7qkMITS"},"source":["### Train and Evaluate the NFQ Agent\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"E-rpdrYdMITT","executionInfo":{"status":"ok","timestamp":1629232902582,"user_tz":240,"elapsed":21121,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Training the NFQ Agent\n","epsilon = 0.4 # @param {type:\"number\"}\n","\n","max_episode_length = 200\n","\n","# Create the environment.\n","grid = build_gridworld_task(\n","    task='simple',\n","    observation_type=ObservationType.AGENT_GOAL_POS,\n","    max_episode_length=max_episode_length)\n","environment, environment_spec = setup_environment(grid)\n","\n","# Define the neural function approximator (aka Q network).\n","q_network = nn.Sequential(nn.Linear(4, 50),\n","                          nn.ReLU(),\n","                          nn.Linear(50, 50),\n","                          nn.ReLU(),\n","                          nn.Linear(50, environment_spec.actions.num_values))\n","# Build the trainable Q-learning agent\n","agent = NeuralFittedQAgent(\n","    environment_spec,\n","    q_network,\n","    epsilon=epsilon,\n","    replay_capacity=100_000,\n","    batch_size=10,\n","    learning_rate=1e-3)\n","\n","returns = run_loop(\n","    environment=environment,\n","    agent=agent,\n","    num_episodes=500,\n","    logger_time_delta=1.,\n","    log_loss=True)"],"execution_count":56,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"-R__xVPLMITT","colab":{"base_uri":"https://localhost:8080/","height":369},"executionInfo":{"status":"ok","timestamp":1629232905009,"user_tz":240,"elapsed":2432,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"24948354-701f-4a13-88c5-424448b275d1"},"source":["# @title Evaluating the agent (set $\\epsilon=0$)\n","# Temporarily change epsilon to be more greedy; remember to change it back.\n","agent._epsilon = 0.0\n","\n","# Record a few episodes.\n","frames = evaluate(environment, agent, evaluation_episodes=5)\n","\n","# Change epsilon back.\n","agent._epsilon = epsilon\n","\n","# Display the video of the episodes.\n","display_video(frames, frame_rate=6)"],"execution_count":57,"outputs":[{"output_type":"stream","text":["Episode 0 ended with reward 10.0 in 5 steps\n","Episode 1 ended with reward 10.0 in 5 steps\n","Episode 2 ended with reward 10.0 in 5 steps\n","Episode 3 ended with reward 10.0 in 5 steps\n","Episode 4 ended with reward 10.0 in 5 steps\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<video  width=\"320\" height=\"240\" controls alt=\"test\" src=\"data:video/mp4;base64,\">"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"vWxHk4FVMITU","colab":{"base_uri":"https://localhost:8080/","height":595},"executionInfo":{"status":"ok","timestamp":1629232905992,"user_tz":240,"elapsed":991,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"1a0b4963-fb99-41d4-dd9d-ff3909c91984"},"source":["# @title Visualise the learned $Q$ values\n","\n","# Evaluate the policy for every state, similar to tabular agents above.\n","\n","environment.reset()\n","pi = np.zeros(grid._layout_dims, dtype=np.int32)\n","q = np.zeros(grid._layout_dims + (4, ))\n","for y in range(grid._layout_dims[0]):\n","  for x in range(grid._layout_dims[1]):\n","    # Hack observation to see what the Q-network would output at that point.\n","    environment.set_state(x, y)\n","    obs = environment.get_obs()\n","    q[y, x] = np.asarray(agent.q_values(obs))\n","    pi[y, x] = np.asarray(agent.select_action(obs))\n","\n","plot_action_values(q)"],"execution_count":58,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 576x576 with 10 Axes>"]},"metadata":{"tags":[],"image/png":{"width":558,"height":558},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"IVapDJiwMITV"},"source":["Compare the Q-values approximated with the neural network with the tabular case in **Section 5.3**. Notice how the neural network is generalizing from the visited states to the unvisited similar states, while in the tabular case we updated the value of each state only when we visited that state."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"eq16kVgIMITW"},"source":["### Compare the greedy and behaviour ($\\epsilon$-greedy) policies"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"hEikqUtbMITW","colab":{"base_uri":"https://localhost:8080/","height":583},"executionInfo":{"status":"ok","timestamp":1629232912672,"user_tz":240,"elapsed":1161,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"711ad429-b8a3-4f32-a97d-4babb82799b2"},"source":["# @title Compare the greedy policy with the agent's policy\n","\n","# @markdown Notice that the agent's behavior policy has a lot more randomness,\n","# @markdown due to the high $\\epsilon$. However, the greedy policy that's learned\n","# @markdown is optimal.\n","\n","environment.plot_greedy_policy(q)\n","plt.figtext(-.08, .95, 'Greedy policy using the learnt Q-values')\n","plt.title('')\n","plt.show()\n","\n","environment.plot_policy(pi)\n","plt.figtext(-.08, .95, \"Policy using the agent's behavior policy\")\n","plt.title('')\n","plt.show()"],"execution_count":59,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":312,"height":273}}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":312,"height":273}}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"yaBco9uoMITX"},"source":["---\n","# Section 7: RL in the real world\n","\n","*Time estimate: ~10mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"yv5s5696MITX","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["6af257ba56d04f1bb2919cff490fe50f","5c6e2790c97f4ea2af59889cc20492bb","64ea84f5a69447ecbd1cb386258c0151","0e2c52f139124bfab89b75fd4a0afe0e","d9350396f1764af896cee793a0ef388a","f7bb702e92274fc39b5b28dfa7b529b4"]},"executionInfo":{"status":"ok","timestamp":1629228973594,"user_tz":240,"elapsed":233,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"26688d64-7c60-499d-8928-62dfdc1b726d"},"source":["# @title Video 7: Real-world applications and ethics\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Nq4y1X7AF\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"5kBtiW88QVw\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 7: Real-world applications and ethics')\n","\n","display(out)"],"execution_count":37,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6af257ba56d04f1bb2919cff490fe50f","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Ye6Ql2yEMITY"},"source":["## Exercise 7: Group discussion\n","\n","Form a group of 2-3 and have discussions (roughly 3 minutes each) of the following questions:\n","\n","1. **Safety**: what are some safety issues that arise in RL that don’t arise with e.g. supervised learning?\n","\n","2. **Generalization**: What happens if your RL agent is presented with data it hasn’t trained on? (“goes out of distribution”)\n","\n","3. How important do you think **interpretability** is in the ethical and safe deployment of RL agents in the real world? \n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"vVh_ftcFMITY"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_99944c89.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"S-YdmkAVMITY"},"source":["---\n","# Summary\n","\n","*Time estimate: ~3mins*"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ueXaO85fMITZ"},"source":["In this tutorial we learn the most important aspects of RL. Within the RL framework, we are able to identify the different components: environment, agent, states, and actions. In addition, we learned and understand the Bellman equation and components involved.We implemented tabular value-based model-free learning (Q-learning and SARSA). Finally, we discussed real-world applications and ethical issues of RL.\n","\n","If you have time left, in Bonus sections you can run a DQN agent and experiment with different hyperparameters (Bounus 1), and you can have a high-level understanding of other (nonvalue-based) RL methods (Bonus 2).\n","\n","See also our *Appendix and further reading* for more information."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"DrRHEIYVMITZ","colab":{"base_uri":"https://localhost:8080/","height":600,"referenced_widgets":["c51f37165c7446ecb5b43683258a72f8","7a6b4d746268473d8f00358f425ee1e1","54fb9e81d01c44dbb15f62e937d35ae5","d1d46ecff8af4aaf907809833ddedd6c","a07625dbae664869ad14463203429198","6dc27249cb234a859e2834fa20246ce1"]},"executionInfo":{"status":"ok","timestamp":1629232917945,"user_tz":240,"elapsed":284,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"7aabd684-a993-497b-c1df-237765394feb"},"source":["# @title Video 8: How to learn more\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1WM4y1T7G5\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"dKaOpgor5Ek\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 8: How to learn more')\n","\n","display(out)"],"execution_count":60,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c51f37165c7446ecb5b43683258a72f8","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"nmanq7ZWMITa","executionInfo":{"status":"aborted","timestamp":1629222065818,"user_tz":240,"elapsed":150,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Airtable Submission Link\n","from IPython import display as IPydisplay\n","IPydisplay.HTML(\n","   f\"\"\"\n"," <div>\n","   <a href= \"{atform.url()}\" target=\"_blank\">\n","   <img src=\"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/static/SurveyButton.png?raw=1\"\n"," alt=\"button link end of day Survey\" style=\"width:410px\"></a>\n","   </div>\"\"\" )"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"nLGYZgMZMITa"},"source":["---\n","# Bonus 1: DQN\n","\n","*Time estimate: ~30mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"-tSeaFnlMITb","executionInfo":{"status":"aborted","timestamp":1629222065820,"user_tz":240,"elapsed":152,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Video 9: Deep Q-Networks (DQN)\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Mo4y1Q7yD\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"HEDoNtV1y-w\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 9: Deep Q-Networks (DQN)')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"b9Ta-55FMITc"},"source":["<center><img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/DQN.jpg\" width=\"500\" /><figcaption>Adopted from <a href=\"https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf\">Mnih et al., 2015</a></figcaption></center> \n","\n","\n","In this section, we will look at an advanced deep RL Agent based on the following publication, [Playing Atari with Deep Reinforcement Learning](https://deepmind.com/research/publications/playing-atari-deep-reinforcement-learning), which introduced the first deep learning model to successfully learn control policies directly from high-dimensional pixel inputs using RL.\n","\n","Here the agent will act directly on a pixel representation of the gridworld. You can find an incomplete implementation below.\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"GHNbCOYoMITc"},"source":["### Bonus Coding Exercise 1: Run a DQN Agent \n"]},{"cell_type":"code","metadata":{"execution":{},"id":"SA3Do9BvMITd","executionInfo":{"status":"aborted","timestamp":1629222065822,"user_tz":240,"elapsed":153,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class DQN(acme.Actor):\n","\n","  def __init__(self,\n","               environment_spec: specs.EnvironmentSpec,\n","               network: nn.Module,\n","               replay_capacity: int = 100_000,\n","               epsilon: float = 0.1,\n","               batch_size: int = 1,\n","               learning_rate: float = 5e-4,\n","               target_update_frequency: int = 10):\n","\n","    # Store agent hyperparameters and network.\n","    self._num_actions = environment_spec.actions.num_values\n","    self._epsilon = epsilon\n","    self._batch_size = batch_size\n","    self._q_network = q_network\n","\n","    # create a second q net with the same structure and initial values, which\n","    # we'll be updating separately from the learned q-network.\n","    self._target_network = copy.deepcopy(self._q_network)\n","\n","    # Container for the computed loss (see run_loop implementation above).\n","    self.last_loss = 0.0\n","\n","    # Create the replay buffer.\n","    self._replay_buffer = ReplayBuffer(replay_capacity)\n","    # Keep an internal tracker of steps\n","    self._current_step = 0\n","\n","    # How often to update the target network\n","    self._target_update_frequency = target_update_frequency\n","    # Setup optimizer that will train the network to minimize the loss.\n","    self._optimizer = torch.optim.Adam(self._q_network.parameters(), lr=learning_rate)\n","    self._loss_fn = nn.MSELoss()\n","\n","  def select_action(self, observation):\n","    # Compute Q-values.\n","    # Sonnet requires a batch dimension, which we squeeze out right after.\n","    q_values = self._q_network(torch.tensor(observation).unsqueeze(0))  # Adds batch dimension.\n","    q_values = q_values.squeeze(0)   # Removes batch dimension\n","\n","    # Select epsilon-greedy action.\n","    if self._epsilon < torch.rand(1):\n","      action = q_values.argmax(axis=-1)\n","    else:\n","      action = torch.randint(low=0, high=self._num_actions , size=(1,), dtype=torch.int64)\n","    return action\n","\n","  def q_values(self, observation):\n","    q_values = self._q_network(torch.tensor(observation).unsqueeze(0))\n","    return q_values.squeeze(0).detach()\n","\n","  def update(self):\n","    self._current_step += 1\n","\n","    if not self._replay_buffer.is_ready(self._batch_size):\n","      # If the replay buffer is not ready to sample from, do nothing.\n","      return\n","\n","    # Sample a minibatch of transitions from experience replay.\n","    transitions = self._replay_buffer.sample(self._batch_size)\n","\n","    # Optionally unpack the transitions to lighten notation.\n","    # Note: each of these tensors will be of shape [batch_size, ...].\n","    s = torch.tensor(transitions.state)\n","    a = torch.tensor(transitions.action,dtype=torch.int64)\n","    r = torch.tensor(transitions.reward)\n","    d = torch.tensor(transitions.discount)\n","    next_s = torch.tensor(transitions.next_state)\n","\n","    # Compute the Q-values at next states in the transitions.\n","    with torch.no_grad():\n","      #################################################\n","      # Fill in missing code below (...),\n","      # then remove or comment the line below to test your implementation\n","      raise NotImplementedError(\"Student exercise: complete the DQN Agent\")\n","      #################################################\n","      #TODO get the value of the next states evaluated by the target network\n","      #HINT: use self._target_network, defined above.\n","      q_next_s = ...  # Shape [batch_size, num_actions].\n","      max_q_next_s = q_next_s.max(axis=-1)[0]\n","      # Compute the TD error and then the losses.\n","      target_q_value = r + d * max_q_next_s\n","\n","    # Compute the Q-values at original state.\n","    q_s = self._q_network(s)\n","\n","    # Gather the Q-value corresponding to each action in the batch.\n","    q_s_a = q_s.gather(1, a.view(-1,1)).squeeze(0)\n","\n","    # Average the squared TD errors over the entire batch\n","    loss = self._loss_fn(target_q_value, q_s_a)\n","\n","    # Compute the gradients of the loss with respect to the q_network variables.\n","    self._optimizer.zero_grad()\n","\n","    loss.backward()\n","    # Apply the gradient update.\n","    self._optimizer.step()\n","\n","    if self._current_step % self._target_update_frequency == 0:\n","      self._target_network.load_state_dict(self._q_network.state_dict())\n","    # Store the loss for logging purposes (see run_loop implementation above).\n","    self.last_loss = loss.detach().numpy()\n","\n","  def observe_first(self, timestep: dm_env.TimeStep):\n","    self._replay_buffer.add_first(timestep)\n","\n","  def observe(self, action: int, next_timestep: dm_env.TimeStep):\n","    self._replay_buffer.add(action, next_timestep)\n","\n","# Create a convenient container for the SARS tuples required by NFQ.\n","Transitions = collections.namedtuple(\n","    'Transitions', ['state', 'action', 'reward', 'discount', 'next_state'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"OnTGG3wGMITe"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_c2f18cc9.py)\n","\n"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"htmiaV4hMITf","executionInfo":{"status":"aborted","timestamp":1629222065823,"user_tz":240,"elapsed":153,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Train and evaluate the DQN agent\n","\n","epsilon = 0.25  # @param {type: \"number\"}\n","num_episodes = 500  # @param {type: \"integer\"}\n","max_episode_length = 50  # @param {type: \"integer\"}\n","\n","grid = build_gridworld_task(\n","    task='simple',\n","    observation_type=ObservationType.GRID,\n","    max_episode_length=max_episode_length)\n","environment, environment_spec = setup_environment(grid)\n","\n","# Build the agent's network.\n","class Permute(nn.Module):\n","  def __init__(self, order: list):\n","    super(Permute,self).__init__()\n","    self.order = order\n","\n","  def forward(self, x):\n","    return x.permute(self.order)\n","\n","q_network = nn.Sequential(Permute([0, 3, 1, 2]),\n","                          nn.Conv2d(3, 32, kernel_size=4,\n","                                    stride=2,padding=1),\n","                          nn.ReLU(),\n","                          nn.Conv2d(32, 64, kernel_size=3,\n","                                    stride=1, padding=1),\n","                          nn.ReLU(),\n","                          nn.MaxPool2d(3, 1),\n","                          nn.Flatten(),\n","                          nn.Linear(384, 50),\n","                          nn.ReLU(),\n","                          nn.Linear(50, environment_spec.actions.num_values)\n","                          )\n","\n","agent = DQN(\n","    environment_spec=environment_spec,\n","    network=q_network,\n","    batch_size=10,\n","    epsilon=epsilon,\n","    target_update_frequency=25)\n","\n","returns = run_loop(\n","    environment=environment,\n","    agent=agent,\n","    num_episodes=num_episodes,\n","    num_steps=100000)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"L_meoNcDMITg","executionInfo":{"status":"aborted","timestamp":1629222065824,"user_tz":240,"elapsed":154,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Visualise the learned $Q$ values\n","# Evaluate the policy for every state, similar to tabular agents above.\n","pi = np.zeros(grid._layout_dims, dtype=np.int32)\n","q = np.zeros(grid._layout_dims + (4,))\n","for y in range(grid._layout_dims[0]):\n","  for x in range(grid._layout_dims[1]):\n","    # Hack observation to see what the Q-network would output at that point.\n","    environment.set_state(x, y)\n","    obs = environment.get_obs()\n","    q[y, x] = np.asarray(agent.q_values(obs))\n","    pi[y, x] = np.asarray(agent.select_action(obs))\n","\n","plot_action_values(q)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"NbeoiY6hMITg","executionInfo":{"status":"aborted","timestamp":1629222065826,"user_tz":240,"elapsed":156,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Compare the greedy policy with the agent's policy\n","\n","environment.plot_greedy_policy(q)\n","plt.figtext(-.08, .95, \"Greedy policy using the learnt Q-values\")\n","plt.title('')\n","plt.show()\n","\n","environment.plot_policy(pi)\n","plt.figtext(-.08, .95, \"Policy using the agent's epsilon-greedy policy\")\n","plt.title('')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"wpGmERg7MITg"},"source":["**Note:** You’ll get a better estimate of the value functions if you increase `num_episodes` and `max_episode_length`, but this will take longer to train. Feel free to play around after the day!"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"S7o66ZnqMITh"},"source":["---\n","# Bonus 2: Beyond Value Based Model-Free Methods\n","\n","*Time estimate: ~25mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"qt2gZUrYMITh","executionInfo":{"status":"aborted","timestamp":1629222065827,"user_tz":240,"elapsed":156,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Video 10: Other RL Methods\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV14w411977Y\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"1N4Jm9loJx4\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 10: Other RL Methods')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"zbDjS54vMITj"},"source":["## Cartpole task\n","\n","Here we switch to training on a different kind of task, which has a continuous action space: Cartpole in [Gym](https://gym.openai.com/). As you recall from the video, policy-based methods are particularly well-suited for these kinds of tasks. We will be exploring two of those methods below.\n","\n","<br>\n","\n","<center><img src=\"https://raw.githubusercontent.com/NeuromatchAcademy/course-content-dl/main/tutorials/W3D2_BasicReinforcementLearning/static/cartpole_task.gif\" height=\"250\" /></center>"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"hQiy0NNLMITj","executionInfo":{"status":"aborted","timestamp":1629222065828,"user_tz":240,"elapsed":157,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Make a CartPole environment, `gym.make('CartPole-v1')`\n","env = gym.make('CartPole-v1')\n","\n","# Set seeds\n","env.seed(SEED)\n","set_seed(SEED)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"6Z8RyRu9MITk"},"source":["## Bonus 2.1: Policy gradient\n","\n","Now we will turn to policy gradient methods. Rather than defining the policy in terms of a value function, i.e. $\\color{blue}\\pi(\\color{red}s) = \\arg\\max_{\\color{blue}a}\\color{green}Q(\\color{red}s, \\color{blue}a)$, we will directly parameterize the policy and write it as the distribution\n","\n","\\begin{equation}\n","\\color{blue}a_t \\sim \\color{blue}\\pi_{\\theta}(\\color{blue}a_t|\\color{red}s_t).\n","\\end{equation}\n","\n","Here $\\theta$ represent the parameters of the policy. We will update the policy parameters using gradient ascent to **maximize** expected future reward.\n","\n","One convenient way to represent the conditional distribution above is as a function that takes a state $\\color{red}s$ and returns a distribution over actions $\\color{blue}a$.\n","\n","Defined below is an agent which implements the REINFORCE algorithm. \n","REINFORCE (Williams 1992) is the simplest model-free general reinforcement learning technique.\n","\n","The **basic idea** is to use probabilistic action choice. If the reward at the end turns out to be high, we make **all** actions in this sequence **more likely** (otherwise, we do the opposite).\n","\n","This strategy could reinforce \"bad\" actions as well, however they will turn out to be part of trajectories with low reward and will likely not get accentuated.\n","\n","From the lectures, we know that we need to compute\n","\n","\\begin{equation}\n","\\nabla J(\\theta) \n","= \\mathbb{E}\n","\\left[\n","  \\sum_{t=0}^T \\color{green} G_t \n","  \\nabla\\log\\color{blue}\\pi_\\theta(\\color{red}{s_t})\n","\\right]\n","\\end{equation}\n","\n","where $\\color{green} G_t$ is the sum over future rewards from time $t$, defined as\n","\n","\\begin{equation}\n","\\color{green} G_t \n","= \\sum_{n=t}^T \\gamma^{n-t} \n","\\color{green} R(\\color{red}{s_t}, \\color{blue}{a_t}, \\color{red}{s_{t+1}}).\n","\\end{equation}\n","\n","The algorithm below will collect the state, action, and reward data in its buffer until it reaches a full trajectory. It will then update its policy given the above gradient (and the Adam optimizer).\n","\n","A policy gradient trains an agent without explicitly mapping the value for every state-action pair in an environment by taking small steps and updating the policy based on the reward associated with that step. In this section, we will build a small network that trains using policy gradient using PyTorch.\n","\n","The agent can receive a reward immediately for an action or it can receive the award at a later time such as the end of the episode. \n","\n","The policy function our agent will try to learn is $\\pi_\\theta(a,s)$, where $\\theta$ is the parameter vector, $s$ is a particular state, and $a$ is an action.\n","\n","Monte-Carlo Policy Gradient approach will be used, which means the agent will run through an entire episode and then update policy based on the rewards obtained."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"DvgDnoGoMITk","executionInfo":{"status":"aborted","timestamp":1629222065829,"user_tz":240,"elapsed":157,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set the hyperparameters for Policy Gradient\n","\n","num_steps = 300\n","\n","learning_rate = 0.01  # @param {type:\"number\"}\n","gamma = 0.99  # @param {type:\"number\"}\n","dropout = 0.6 # @param {type:\"number\"}\n","\n","# @markdown Only used in Policy Gradient Method:\n","hidden_neurons = 128  # @param {type:\"integer\"}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"9npM-XLBMITl"},"source":["### Bonus Coding Exercise 2.1: Creating a simple neural network\n","\n","Below you will find some incomplete code. Fill in the missing code to construct the specified neural network.\n","\n","Let us define a simple feed forward neural network with one hidden layer of 128 neurons and a dropout of 0.6. Let's use Adam as our optimizer and a learning rate of 0.01. Use the hyperparameters already defined rather than using explicit values.\n","\n","Using dropout will significantly improve the performance of the policy. Do compare your results with and without dropout and experiment with other hyper-parameter values as well."]},{"cell_type":"code","metadata":{"execution":{},"id":"U5izPVyyMITl","executionInfo":{"status":"aborted","timestamp":1629222065830,"user_tz":240,"elapsed":158,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class PolicyGradientNet(nn.Module):\n","  def __init__(self):\n","    super(PolicyGradientNet, self).__init__()\n","    self.state_space = env.observation_space.shape[0]\n","    self.action_space = env.action_space.n\n","    #################################################\n","    ## TODO for students: Define two linear layers\n","    ## from the first expression\n","    raise NotImplementedError(\"Student exercise: Create FF neural network.\")\n","    #################################################\n","    # HINT: you can construct linear layers using nn.Linear(); what are the\n","    # sizes of the inputs and outputs of each of the layers? Also remember\n","    # that you need to use hidden_neurons (see hyperparameters section above).\n","    #   https://pytorch.org/docs/stable/generated/torch.nn.Linear.html\n","    self.l1 = ...\n","    self.l2 = ...\n","    self.gamma = ...\n","    # Episode policy and past rewards\n","    self.past_policy = Variable(torch.Tensor())\n","    self.reward_episode = []\n","    # Overall reward and past loss\n","    self.past_reward = []\n","    self.past_loss = []\n","\n","  def forward(self, x):\n","    model = torch.nn.Sequential(\n","        self.l1,\n","        nn.Dropout(p=dropout),\n","        nn.ReLU(),\n","        self.l2,\n","        nn.Softmax(dim=-1)\n","    )\n","    return model(x)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"aXFasLFQMITl"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D2_BasicReinforcementLearning/solutions/W3D2_Tutorial1_Solution_9aaf4a83.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"0QrXGBFaMITm"},"source":["Now let's create an instance of the network we have defined and use Adam as the optimizer using the learning_rate as hyperparameter already defined above."]},{"cell_type":"code","metadata":{"execution":{},"id":"e60kdaAlMITm","executionInfo":{"status":"aborted","timestamp":1629222065830,"user_tz":240,"elapsed":158,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["policy = PolicyGradientNet()\n","pg_optimizer = optim.Adam(policy.parameters(), lr=learning_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"kL0tvKvHMITm"},"source":["### Select Action\n","\n","The `select_action()` function chooses an action based on our policy probability distribution using the PyTorch distributions package.  Our policy returns a probability for each possible action in our action space (move left or move right) as an array of length two such as [0.7, 0.3].  We then choose an action based on these probabilities, record our history, and return our action. "]},{"cell_type":"code","metadata":{"execution":{},"id":"Iezpi_dKMITm","executionInfo":{"status":"aborted","timestamp":1629222065831,"user_tz":240,"elapsed":159,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["def select_action(state):\n","  #Select an action (0 or 1) by running policy model and choosing based on the probabilities in state\n","  state = torch.from_numpy(state).type(torch.FloatTensor)\n","  state = policy(Variable(state))\n","  c = Categorical(state)\n","  action = c.sample()\n","\n","  # Add log probability of chosen action\n","  if policy.past_policy.dim() != 0:\n","    policy.past_policy = torch.cat([policy.past_policy, c.log_prob(action).reshape(1)])\n","  else:\n","    policy.past_policy = (c.log_prob(action).reshape(1))\n","  return action"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"0JEaH3pqMITn"},"source":["### Update policy\n","\n","This function updates the policy."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"F5LzS3BjMITo"},"source":["#### Reward $G_t$\n","We update our policy by taking a sample of the action value function $Q^{\\pi_\\theta} (s_t,a_t)$ by playing through episodes of the game.  $Q^{\\pi_\\theta} (s_t,a_t)$ is defined as the expected return by taking action $a$ in state $s$ following policy $\\pi$.\n","\n","We know that for every step the simulation continues we receive a reward of 1.  We can use this to calculate the policy gradient at each time step, where $r$ is the reward for a particular state-action pair.  Rather than using the instantaneous reward, $r$, we instead use a long term reward $ v_{t} $ where $v_t$ is the discounted sum of all future rewards for the length of the episode.   $v_{t}$ is then,\n","\n","\\begin{equation}\n","\\color{green} G_t \n","= \\sum_{n=t}^T \\gamma^{n-t} \n","\\color{green} R(\\color{red}{s_t}, \\color{blue}{a_t}, \\color{red}{s_{t+1}}).\n","\\end{equation}\n","\n","where $\\gamma$ is the discount factor (0.99).  For example, if an episode lasts 5 steps, the reward for each step will be [4.90, 3.94, 2.97, 1.99, 1].\n","Next we scale our reward vector by substracting the mean from each element and scaling to unit variance by dividing by the standard deviation.  This practice is common for machine learning applications and the same operation as Scikit Learn's __[StandardScaler](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)__.  It also has the effect of compensating for future uncertainty."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"BUbia_-QMITp"},"source":["#### Update Policy: equation\n","After each episode we apply Monte-Carlo Policy Gradient to improve our policy according to the equation:\n","\n","\\begin{equation}\n","\\Delta\\theta_t = \\alpha\\nabla_\\theta \\, \\log \\pi_\\theta (s_t,a_t)G_t\n","\\end{equation}\n","\n","We will then feed our policy history multiplied by our rewards to our optimizer and update the weights of our neural network using stochastic gradient **ascent**.  This should increase the likelihood of actions that got our agent a larger reward."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"EnOooCI8MITp"},"source":["The following function ```update_policy``` updates the network weights and therefore the policy.\n","\n"]},{"cell_type":"code","metadata":{"execution":{},"id":"xh5PtTYOMITq","executionInfo":{"status":"aborted","timestamp":1629222065832,"user_tz":240,"elapsed":159,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["def update_policy():\n","  R = 0\n","  rewards = []\n","\n","  # Discount future rewards back to the present using gamma\n","  for r in policy.reward_episode[::-1]:\n","    R = r + policy.gamma * R\n","    rewards.insert(0, R)\n","\n","  # Scale rewards\n","  rewards = torch.FloatTensor(rewards)\n","  rewards = (rewards - rewards.mean()) / (rewards.std() +\n","                                          np.finfo(np.float32).eps)\n","\n","  # Calculate loss\n","  pg_loss = (torch.sum(torch.mul(policy.past_policy,\n","                              Variable(rewards)).mul(-1), -1))\n","  # Update network weights\n","  # Use zero_grad(), backward() and step() methods of the optimizer instance.\n","  pg_optimizer.zero_grad()\n","  pg_loss.backward()\n","  # Update the weights\n","  for param in policy.parameters():\n","      param.grad.data.clamp_(-1, 1)\n","  pg_optimizer.step()\n","\n","  # Save and intialize episode past counters\n","  policy.past_loss.append(pg_loss.item())\n","  policy.past_reward.append(np.sum(policy.reward_episode))\n","  policy.past_policy = Variable(torch.Tensor())\n","  policy.reward_episode= []"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"dUf3u-CAMITq"},"source":["### Training\n","This is our main policy training loop.  For each step in a training episode, we choose an action, take a step through the environment, and record the resulting new state and reward.  We call update_policy() at the end of each episode to feed the episode history to our neural network and improve our policy."]},{"cell_type":"code","metadata":{"execution":{},"id":"J-h2jEgyMITq","executionInfo":{"status":"aborted","timestamp":1629222065833,"user_tz":240,"elapsed":160,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["def policy_gradient_train(episodes):\n","  running_reward = 10\n","  for episode in range(episodes):\n","    state = env.reset()\n","    done = False\n","\n","    for time in range(1000):\n","      action = select_action(state)\n","      # Step through environment using chosen action\n","      state, reward, done, _ = env.step(action.item())\n","\n","      # Save reward\n","      policy.reward_episode.append(reward)\n","      if done:\n","        break\n","\n","    # Used to determine when the environment is solved.\n","    running_reward = (running_reward * gamma) + (time * (1 - gamma))\n","\n","    update_policy()\n","\n","    if episode % 50 == 0:\n","      print(f\"Episode {episode}\\tLast length: {time:5.0f}\"\n","            f\"\\tAverage length: {running_reward:.2f}\")\n","\n","    if running_reward > env.spec.reward_threshold:\n","      print(f\"Solved! Running reward is now {running_reward} \"\n","            f\"and the last episode runs to {time} time steps!\")\n","      break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"-d0uk-QoMITr"},"source":["### Run the model"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"FzB-xX7xMITr","executionInfo":{"status":"aborted","timestamp":1629222065834,"user_tz":240,"elapsed":160,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["episodes = 500   #@param {type:\"integer\"}\n","policy_gradient_train(episodes)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"dAgB7knvMITr"},"source":["### Plot the results"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"_Q4Sik4CMITu","executionInfo":{"status":"aborted","timestamp":1629222065836,"user_tz":240,"elapsed":162,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Plot the training performance for policy gradient\n","\n","def plot_policy_gradient_training():\n","  window = int(episodes / 20)\n","\n","  fig, ((ax1), (ax2)) = plt.subplots(1, 2, sharey=True, figsize=[15, 4]);\n","  rolling_mean = pd.Series(policy.past_reward).rolling(window).mean()\n","  std = pd.Series(policy.past_reward).rolling(window).std()\n","  ax1.plot(rolling_mean)\n","  ax1.fill_between(range(len(policy.past_reward)),\n","                   rolling_mean-std, rolling_mean+std,\n","                   color='orange', alpha=0.2)\n","  ax1.set_title(f\"Episode Length Moving Average ({window}-episode window)\")\n","  ax1.set_xlabel('Episode'); ax1.set_ylabel('Episode Length')\n","\n","  ax2.plot(policy.past_reward)\n","  ax2.set_title('Episode Length')\n","  ax2.set_xlabel('Episode')\n","  ax2.set_ylabel('Episode Length')\n","\n","  fig.tight_layout(pad=2)\n","  plt.show()\n","\n","plot_policy_gradient_training()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Tjy9GzRqMITv"},"source":["### Bonus Exercise 2.1: Explore different hyperparameters.\n","\n","Try running the model again, by modifying the hyperparameters and observe the outputs. Be sure to rerun the function definition cells in order to pick up on the updated values.\n","\n","What do you see when you \n","\n","1. increase learning rate\n","2. decrease learning rate\n","3. decrease gamma ($\\gamma$)\n","4. increase number of hidden neurons in the network"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"aJyym8IwMITw"},"source":["## Bonus 2.2: Actor-critic\n","\n","Recall the policy gradient\n","\n","\\begin{equation}\n","\\nabla J(\\theta) \n","= \\mathbb{E}\n","\\left[\n","  \\sum_{t=0}^T \\color{green} G_t \n","  \\nabla\\log\\color{blue}\\pi_\\theta(\\color{red}{s_t})\n","\\right]\n","\\end{equation}\n","\n","The policy parameters are updated using Monte Carlo technique and uses random samples. This introduces high variability in log probabilities and cumulative reward values. This leads to noisy gradients and can cause unstable learning.\n","\n","One way to reduce variance and increase stability is subtracting the cumulative reward by a baseline:\n","\n","\\begin{equation}\n","\\nabla J(\\theta) \n","= \\mathbb{E}\n","\\left[\n","   \\sum_{t=0}^T \\color{green} (G_t  - b)\n","  \\nabla\\log\\color{blue}\\pi_\\theta(\\color{red}{s_t})\n","\\right]\n","\\end{equation}\n","\n","Intuitively, reducing cumulative reward will make smaller gradients and thus smaller and more stable (hopefully) updates.\n","\n","From the lecture slides, we know that in Actor Critic Method:\n","1. The “Critic” estimates the value function. This could be the action-value (the Q value) or state-value (the V value).\n","2. The “Actor” updates the policy distribution in the direction suggested by the Critic (such as with policy gradients).\n","\n","Both the Critic and Actor functions are parameterized with neural networks. The \"Critic\" network parameterizes the Q-value."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"II0CM7-DMITw","executionInfo":{"status":"aborted","timestamp":1629222065836,"user_tz":240,"elapsed":162,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set the hyperparameters for Actor Critic\n","\n","learning_rate = 0.01  # @param {type:\"number\"}\n","gamma = 0.99  # @param {type:\"number\"}\n","dropout = 0.6\n","\n","# Only used in Actor-Critic Method\n","hidden_size = 256  # @param {type:\"integer\"}\n","\n","num_steps = 300"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"wLG93YaBMITx"},"source":["### Actor Critic Network"]},{"cell_type":"code","metadata":{"execution":{},"id":"iPhJ4QtvMITx","executionInfo":{"status":"aborted","timestamp":1629222065837,"user_tz":240,"elapsed":162,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class ActorCriticNet(nn.Module):\n","  def __init__(self, num_inputs, num_actions, hidden_size, learning_rate=3e-4):\n","    super(ActorCriticNet, self).__init__()\n","\n","    self.num_actions = num_actions\n","    self.critic_linear1 = nn.Linear(num_inputs, hidden_size)\n","    self.critic_linear2 = nn.Linear(hidden_size, 1)\n","\n","    self.actor_linear1 = nn.Linear(num_inputs, hidden_size)\n","    self.actor_linear2 = nn.Linear(hidden_size, num_actions)\n","\n","    self.all_rewards = []\n","    self.all_lengths = []\n","    self.average_lengths = []\n","\n","  def forward(self, state):\n","    state = Variable(torch.from_numpy(state).float().unsqueeze(0))\n","    value = F.relu(self.critic_linear1(state))\n","    value = self.critic_linear2(value)\n","\n","    policy_dist = F.relu(self.actor_linear1(state))\n","    policy_dist = F.softmax(self.actor_linear2(policy_dist), dim=1)\n","\n","    return value, policy_dist"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"zyvQsxURMITy"},"source":["### Training"]},{"cell_type":"code","metadata":{"execution":{},"id":"Tlz6bPPgMITy","executionInfo":{"status":"aborted","timestamp":1629222065838,"user_tz":240,"elapsed":163,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["def actor_critic_train(episodes):\n","  all_lengths = []\n","  average_lengths = []\n","  all_rewards = []\n","  entropy_term = 0\n","\n","  for episode in range(episodes):\n","    log_probs = []\n","    values = []\n","    rewards = []\n","\n","    state = env.reset()\n","    for steps in range(num_steps):\n","      value, policy_dist = actor_critic.forward(state)\n","      value = value.detach().numpy()[0, 0]\n","      dist = policy_dist.detach().numpy()\n","\n","      action = np.random.choice(num_outputs, p=np.squeeze(dist))\n","      log_prob = torch.log(policy_dist.squeeze(0)[action])\n","      entropy = -np.sum(np.mean(dist) * np.log(dist))\n","      new_state, reward, done, _ = env.step(action)\n","\n","      rewards.append(reward)\n","      values.append(value)\n","      log_probs.append(log_prob)\n","      entropy_term += entropy\n","      state = new_state\n","\n","      if done or steps == num_steps - 1:\n","        qval, _ = actor_critic.forward(new_state)\n","        qval = qval.detach().numpy()[0, 0]\n","        all_rewards.append(np.sum(rewards))\n","        all_lengths.append(steps)\n","        average_lengths.append(np.mean(all_lengths[-10:]))\n","        if episode % 50 == 0:\n","          print(f\"episode: {episode},\\treward: {np.sum(rewards)},\"\n","                f\"\\ttotal length: {steps},\"\n","                f\"\\taverage length: {average_lengths[-1]}\")\n","        break\n","\n","    # compute Q values\n","    qvals = np.zeros_like(values)\n","    for t in reversed(range(len(rewards))):\n","      qval = rewards[t] + gamma * qval\n","      qvals[t] = qval\n","\n","    #update actor critic\n","    values = torch.FloatTensor(values)\n","    qvals = torch.FloatTensor(qvals)\n","    log_probs = torch.stack(log_probs)\n","\n","    advantage = qvals - values\n","    actor_loss = (-log_probs * advantage).mean()\n","    critic_loss = 0.5 * advantage.pow(2).mean()\n","    ac_loss = actor_loss + critic_loss + 0.001 * entropy_term\n","\n","    ac_optimizer.zero_grad()\n","    ac_loss.backward()\n","    ac_optimizer.step()\n","\n","  # Store results\n","  actor_critic.average_lengths = average_lengths\n","  actor_critic.all_rewards = all_rewards\n","  actor_critic.all_lengths = all_lengths"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"XkKX-o9UMITz"},"source":["### Run the model"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"nBywRZTrMITz","executionInfo":{"status":"aborted","timestamp":1629222065839,"user_tz":240,"elapsed":163,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["episodes = 500   # @param {type:\"integer\"}\n","\n","env.reset()\n","\n","num_inputs = env.observation_space.shape[0]\n","num_outputs = env.action_space.n\n","\n","actor_critic = ActorCriticNet(num_inputs, num_outputs, hidden_size)\n","ac_optimizer = optim.Adam(actor_critic.parameters())\n","\n","actor_critic_train(episodes)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"S3bITZCrMITz"},"source":["### Plot the results"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"UIZzW8tiMIT0","executionInfo":{"status":"aborted","timestamp":1629222065840,"user_tz":240,"elapsed":164,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Plot the training performance for Actor Critic\n","def plot_actor_critic_training(actor_critic, episodes):\n","  window = int(episodes / 20)\n","\n","  plt.figure(figsize=(15, 4))\n","  plt.subplot(1, 2, 1)\n","\n","  smoothed_rewards = pd.Series(actor_critic.all_rewards).rolling(window).mean()\n","  std = pd.Series(actor_critic.all_rewards).rolling(window).std()\n","\n","  plt.plot(smoothed_rewards, label='Smoothed rewards')\n","  plt.fill_between(range(len(smoothed_rewards)),\n","                   smoothed_rewards - std, smoothed_rewards + std,\n","                   color='orange', alpha=0.2)\n","\n","  plt.xlabel('Episode')\n","  plt.ylabel('Reward')\n","\n","  plt.subplot(1, 2, 2)\n","  plt.plot(actor_critic.all_lengths, label='All lengths')\n","  plt.plot(actor_critic.average_lengths, label='Average lengths')\n","  plt.xlabel('Episode')\n","  plt.ylabel('Episode length')\n","  plt.legend()\n","\n","  plt.tight_layout()\n","  plt.show()\n","\n","\n","plot_actor_critic_training(actor_critic, episodes)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"shi4rqPmMIT0"},"source":["### Bonus Exercise 2.2.1: Effect of episodes on performance\n","\n","Change the episodes from 500 to 3000 and observe the performance impact."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ZblWNd7eMIT0"},"source":["### Bonus Exercise 2.2.2: Effect of learning rate on performance\n","\n","Modify the hyperparameters related to learning_rate and gamma and observe the impact on the performance.\n","\n","Be sure to rerun the function definition cells in order to pick up on the updated values."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"_kF3brgtMIT1"},"source":["---\n","# Appendix and further reading\n","\n","Books and lecture notes\n","*   [Reinforcement Learning: an Introduction by Sutton & Barto](http://incompleteideas.net/book/RLbook2018.pdf)\n","* [Algorithms for Reinforcement Learning by Csaba Szepesvari](https://sites.ualberta.ca/~szepesva/papers/RLAlgsInMDPs.pdf)\n","\n","Lectures and course \n","*   [RL Course by David Silver](https://www.youtube.com/playlist?list=PLzuuYNsE1EZAXYR4FJ75jcJseBmo4KQ9-)\n","*   [Reinforcement Learning Course | UCL & DeepMind](https://www.youtube.com/playlist?list=PLqYmG7hTraZBKeNJ-JE_eyJHZ7XgBoAyb)\n","*   [Emma Brunskill Stanford RL Course](https://www.youtube.com/playlist?list=PLoROMvodv4rOSOPzutgyCTapiGlY2Nd8u)\n","*   [RL Course on Coursera by Martha White & Adam White](https://www.coursera.org/specializations/reinforcement-learning)\n","\n","More practical:\n","* [Spinning Up in Deep RL by Josh Achiam](https://spinningup.openai.com/en/latest/)\n","*   [Acme white paper](https://arxiv.org/abs/2006.00979) & [Colab tutorial](https://github.com/deepmind/acme/blob/master/examples/tutorial.ipynb)\n","\n"," <br>\n","\n","[Link to the tweet thread with resources recommended by the community](https://twitter.com/FeryalMP/status/1407272291579355136?s=20). \n"," \n","<br>\n","\n","This Colab is based on the [EEML 2020 RL practical](https://colab.research.google.com/github/eemlcommunity/PracticalSessions2020/blob/master/rl/EEML2020_RL_Tutorial.ipynb) by Feryal Behbahani & Gheorghe Comanici. If you are interested in JAX you should try the colab. If you are interested in Tensorflow, there is also a version of the colab for the [MLSS 2020 RL Tutorial](https://github.com/Feryal/rl_mlss_2020) that you can try :)\n"]}]}