{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Copy of W3D3_Tutorial1","provenance":[{"file_id":"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/W3D3_ReinforcementLearningForGames/student/W3D3_Tutorial1.ipynb","timestamp":1629308724267}],"collapsed_sections":[],"toc_visible":true},"kernel":{"display_name":"Python 3","language":"python","name":"python3"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"dbad3c3b9dc2426cb9798ee6da48f11e":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_65e25aff80cd4a88ac3427b519dcd0da","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e342fdf0d76a493091c5a7340dab3f24","IPY_MODEL_462fb397317b490bb84833fed3d4f68c"]}},"65e25aff80cd4a88ac3427b519dcd0da":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e342fdf0d76a493091c5a7340dab3f24":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=5kQ-xGbjlJo\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/5kQ-xGbjlJo?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd1666afd0>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_63d8c763183448ac805fd2c33f0281e3","_model_module":"@jupyter-widgets/output"}},"462fb397317b490bb84833fed3d4f68c":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1Yh411B7EP\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1Yh411B7EP&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd1666ae90>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_7d3ca231486d431bb53cf9a805cccc4f","_model_module":"@jupyter-widgets/output"}},"63d8c763183448ac805fd2c33f0281e3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7d3ca231486d431bb53cf9a805cccc4f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f80e7d20cfa54df4b9659b4dad007bf2":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_a430533c86bc4fb09adcb14d49846fe4","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_c9e6bf98c233430abf20be079b4d5a98","IPY_MODEL_a50f25ecd3054cdbad754f6c58c8237f"]}},"a430533c86bc4fb09adcb14d49846fe4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c9e6bf98c233430abf20be079b4d5a98":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=aH2Hs8f6KrQ\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/aH2Hs8f6KrQ?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd1666afd0>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_e84e398b69cf4d6d9d2bc0d28dcb74bf","_model_module":"@jupyter-widgets/output"}},"a50f25ecd3054cdbad754f6c58c8237f":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1Wy4y1V7bt\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1Wy4y1V7bt&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd16657d10>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_d8c131d61ab043c1a069f96b167a0ace","_model_module":"@jupyter-widgets/output"}},"e84e398b69cf4d6d9d2bc0d28dcb74bf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d8c131d61ab043c1a069f96b167a0ace":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a48b7b080a174e4c837fca13766816bf":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_bc87d51c429649059c4b86139ab997a2","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_bc121e3713c241168ee12bf413c64c5b","IPY_MODEL_55c5eb243311447493898b0bf3f7b203"]}},"bc87d51c429649059c4b86139ab997a2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bc121e3713c241168ee12bf413c64c5b":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=f9lZq0WQJFg\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/f9lZq0WQJFg?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd15edbc50>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_00b7528f4b1349bf8c44e803f223f94f","_model_module":"@jupyter-widgets/output"}},"55c5eb243311447493898b0bf3f7b203":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1pg411j7f7\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1pg411j7f7&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd15edbf10>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_2bbaec3d07194ab49c5683739004afb6","_model_module":"@jupyter-widgets/output"}},"00b7528f4b1349bf8c44e803f223f94f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2bbaec3d07194ab49c5683739004afb6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8ac51c90bdca49f58d839b2391e5f502":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_f35f0ae86907462ebc5664ac532645ac","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_cd02cad7f5894dfd880f1c08a2a17d43","IPY_MODEL_2324bb4dd5bc42baa73328c5f0664aba"]}},"f35f0ae86907462ebc5664ac532645ac":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"cd02cad7f5894dfd880f1c08a2a17d43":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=tvmzVHPBKKs\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/tvmzVHPBKKs?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd1817fdd0>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_677c7f0dd08c47718792788009bcddad","_model_module":"@jupyter-widgets/output"}},"2324bb4dd5bc42baa73328c5f0664aba":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1Ug411j7ig\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1Ug411j7ig&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd1817fc90>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_7c03fc4e3a8441849d0703497b92f2da","_model_module":"@jupyter-widgets/output"}},"677c7f0dd08c47718792788009bcddad":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7c03fc4e3a8441849d0703497b92f2da":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"06897527c7e448e8b2d53f23c2d4940e":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_59e2bbe3af8942ff87e8970a9466adaa","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3d381d3520b54c6d9d51e549d4b20334","IPY_MODEL_2ac018af67c8430eb34004fcb5cadd54"]}},"59e2bbe3af8942ff87e8970a9466adaa":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3d381d3520b54c6d9d51e549d4b20334":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=vj9gKNJ19D8\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/vj9gKNJ19D8?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd0fc76210>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_0b2783cb5dbf4e7eb5f47d4d14eab9dc","_model_module":"@jupyter-widgets/output"}},"2ac018af67c8430eb34004fcb5cadd54":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1hQ4y127GJ\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1hQ4y127GJ&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd0fc76510>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_79c62c09446f48f8b1917e265e44ce3f","_model_module":"@jupyter-widgets/output"}},"0b2783cb5dbf4e7eb5f47d4d14eab9dc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"79c62c09446f48f8b1917e265e44ce3f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9a7271e7bf784c4985d0f9404e170324":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_794ba9ddf352423f8841a5ea0f51457d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_0181c8fc4a19430286a7358922ad8997","IPY_MODEL_2bc078f5b3a64ee5b7ca83345c63cc82"]}},"794ba9ddf352423f8841a5ea0f51457d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0181c8fc4a19430286a7358922ad8997":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=yHtVqT2Nstk\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/yHtVqT2Nstk?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd0fc766d0>"],"image/jpeg":"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UVpEFVFaRBVRWkQVUVpEFVFaRBVVLlao9tImm0Fzes0kgNDgRAPx20+y66EIPOUqRNNoexwrBgaCxji5hbo4c4TB30Om53XTtqbgCXxm4y6NtgAPoAugiCqitIgqorSIKqK0iCqitIgqorSIKqK0iCqitIgqorSIKqK0iCqitIgqorSIKqK0iCqitIgqorSIEIEQIMW1ASQNxutjRK1sphpJHHccJ7VtYUGurXYww6RpOxjt3WVNwcJHiPmNCsKtu17g4mYERAjUQfl4LKjTDG4g9p+Z1KCYWLHh0xwMHwWSwZTDSTuXHUnfwHwCDOFhSfkJgjwKzWuhTwbGnHYQN+xBmDqVKxG5WSAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAscfEhfNukK87u38r/AFJ0hXnd2/lf6kH0gtPaUwPaV836Qrzu7fyv9SdIV53dv5X+pB9IwP6imB7Svm/SFed3b+V/qTpCvO7t/K/1IPpGB7SmB7Svm/SFed3b+V/qTpCvO7t/K/1IPpGB7Sgae0r5v0hXnd2/lf6k6Qrzu7fyv9SD6UApXzTpCvO7t/K/1J0hXnd2/lf6kH0tF806Qrzu7fyv9SdIV53dv5X+pB9LRfNOkK87u38r/UnSFed3b+V/qQfS0XzTpCvO7t/K/wBSdIV53dv5X+pB9LRfNOkK87u38r/UnSFed3b+V/qQfS0XzTpCvO7t/K/1J0hXnd2/lf6kH0tF806Qrzu7fyv9SdIV53dv5X+pB9LRfNOkK87u38r/AFJ0hXnd2/lf6kH0tF806Qrzu7fyv9SdIV53dv5X+pB9LRfNOkK87u38r/UnSFed3b+V/qQfS0XzTpCvO7t/K/1J0hXnd2/lf6kH0tF806Qrzu7fyv8AUnSFed3b+V/qQfS0XzTpCvO7t/K/1J0hXnd2/lf6kH0tF806Qrzu7fyv9SdIV53dv5X+pB9LRfNOkK87u38r/UnSFed3b+V/qQfS0XzTpCvO7t/K/wBSdIV53dv5X+pB9LRfNOkK87u38r/UnSFed3b+V/qQfS0XzTpCvO7t/K/1J0hXnd2/lf6kH0tF806Qrzu7fyv9SdIV53dv5X+pB9LRfNOkK87u38r/AFJ0hXnd2/lf6kH0tF806Qrzu7fyv9SdIV53dv5X+pB9LRfNOkK87u38r/UnSFed3b+V/qQfS0XzTpCvO7t/K/1J0hXnd2/lf6kH0tF806Qrzu7fyv8AUnSFed3b+V/qQfS0XzTpCvO7t/K/1J0hXnd2/lf6kHk0REBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQf/9k=\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_6b79a37ed00748929e2aeac43184e1b2","_model_module":"@jupyter-widgets/output"}},"2bc078f5b3a64ee5b7ca83345c63cc82":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1aq4y1S7o4\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1aq4y1S7o4&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd16649a10>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_f65421fe0ec74905adc7945b78e5649d","_model_module":"@jupyter-widgets/output"}},"6b79a37ed00748929e2aeac43184e1b2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f65421fe0ec74905adc7945b78e5649d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"fdc45ba8e7334b0abcac8623d6984d55":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8258abbddafa4323b5747fa80384d772","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_9d016218f09c4afb86d02f222095b289","IPY_MODEL_91d9c322207a4a05bb8e6c49ec00e85b"]}},"8258abbddafa4323b5747fa80384d772":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9d016218f09c4afb86d02f222095b289":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=DtCWDIlSo18\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/DtCWDIlSo18?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd0fc766d0>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_4d754f7e270f44a48929a6236e1a9d1c","_model_module":"@jupyter-widgets/output"}},"91d9c322207a4a05bb8e6c49ec00e85b":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1Rb4y1U7BW\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1Rb4y1U7BW&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd15569610>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_94c9447faec44d3aa40fdfa6ec8be771","_model_module":"@jupyter-widgets/output"}},"4d754f7e270f44a48929a6236e1a9d1c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"94c9447faec44d3aa40fdfa6ec8be771":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"efc097370cbe480ab3ac9306023fb209":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_d6d1ee4d13c04aebb41860c9e997823d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_0cdcc54b924242e59b935280cc0b1a93","IPY_MODEL_3834095cd8aa43e39daa434c95ac8e82"]}},"d6d1ee4d13c04aebb41860c9e997823d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0cdcc54b924242e59b935280cc0b1a93":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=plmFzAy3H5s\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/plmFzAy3H5s?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd18150b50>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_300773998c63453b8212e6612795a658","_model_module":"@jupyter-widgets/output"}},"3834095cd8aa43e39daa434c95ac8e82":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1bh411B7S4\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1bh411B7S4&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd1817fc90>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_854b1bbd33194dd192c329b867ed3941","_model_module":"@jupyter-widgets/output"}},"300773998c63453b8212e6612795a658":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"854b1bbd33194dd192c329b867ed3941":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4190c02c9f5140da9446ef4ebd74982b":{"model_module":"@jupyter-widgets/controls","model_name":"TabModel","model_module_version":"1.5.0","state":{"_view_name":"TabView","_dom_classes":[],"_titles":{"0":"Youtube","1":"Bilibili"},"_model_name":"TabModel","_view_module":"@jupyter-widgets/controls","selected_index":0,"_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_88ff81d6165b49d3bab11ae5530937b7","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3333cbec98f24130b7eb59890b187cec","IPY_MODEL_b5797b7fee404bd28cba623dd9dfe887"]}},"88ff81d6165b49d3bab11ae5530937b7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3333cbec98f24130b7eb59890b187cec":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://youtube.com/watch?v=q7181lvoNpM\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://www.youtube.com/embed/q7181lvoNpM?fs=1&rel=0\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7efd15569690>"],"image/jpeg":"\n"},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_40c19a588ef5414db08235eb2838131a","_model_module":"@jupyter-widgets/output"}},"b5797b7fee404bd28cba623dd9dfe887":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","text":["Video available at https://www.bilibili.com/video/BV1WA411w7mw\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://player.bilibili.com/player.html?bvid=BV1WA411w7mw&page=1?fs=1\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<__main__.BiliVideo at 0x7efd15569510>"]},"metadata":{}}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_c63ee4f8271d484981b5835bd6c6e728","_model_module":"@jupyter-widgets/output"}},"40c19a588ef5414db08235eb2838131a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c63ee4f8271d484981b5835bd6c6e728":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"execution":{},"id":"_14I6-pUXFbu"},"source":["# Tutorial 1: Learn to play games with RL\n","\n","**Week 3, Day 3: Reinforcement Learning for Games**\n","\n","**By Neuromatch Academy**\n","\n","__Content creators:__ Mandana Samiei, Raymond Chua, Tim Lilicrap, Blake Richards\n","\n","__Content reviewers:__ Arush Tagade, Lily Cheng, Melvin Selim Atay, Kelson Shilling-Scrivo\n","\n","__Content editors:__ Melvin Selim Atay, Spiros Chavlis\n","\n","__Production editors:__ Namrata Bafna, Spiros Chavlis"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"IRy5UZoXXFb1"},"source":["**Our 2021 Sponsors, including Presenting Sponsor Facebook Reality Labs**\n","\n","<p align='center'><img src='https://github.com/NeuromatchAcademy/widgets/blob/master/sponsors.png?raw=True'/></p>"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"AJwQkG7CXFb2"},"source":["---\n","# Tutorial Objectives\n","\n","In this tutotial, you will learn how to implement a game loop and improve the performance of a random player. \n","\n","The specific objectives for this tutorial:\n","*   Understand the format of two-players games\n","*   Learn about value network and policy network\n","\n","In the Bonus sections you will learn about Monte Carlo Tree Search (MCTS) and compare its performance to policy-based and value-based players."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"CtKB-rXZXFb4","colab":{"base_uri":"https://localhost:8080/","height":501},"executionInfo":{"status":"ok","timestamp":1629314811964,"user_tz":240,"elapsed":177,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"36d024e2-acfe-49e0-ecad-2602e8f91349"},"source":["# @title Tutorial slides\n","\n","# @markdown These are the slides for the videos in the tutorial\n","\n","# @markdown If you want to locally download the slides, click [here](https://osf.io/3zn9w/download)\n","from IPython.display import IFrame\n","IFrame(src=f\"https://mfr.ca-1.osf.io/render?url=https://osf.io/3zn9w/?direct%26mode=render%26action=download%26mode=render\", width=854, height=480)"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","        <iframe\n","            width=\"854\"\n","            height=\"480\"\n","            src=\"https://mfr.ca-1.osf.io/render?url=https://osf.io/3zn9w/?direct%26mode=render%26action=download%26mode=render\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.IFrame at 0x7efd743f7a10>"]},"metadata":{},"execution_count":1}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"JP7hSUkrXFb6"},"source":["---\n","# Setup"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"2gAWo8yDXFb7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314821875,"user_tz":240,"elapsed":9390,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"9432290b-6994-45fa-ba99-b081f026bb8e"},"source":["# @title Install dependencies\n","!pip install coloredlogs --quiet\n","\n","!pip install git+https://github.com/NeuromatchAcademy/evaltools --quiet\n","from evaltools.airtable import AirtableForm\n","\n","# generate airtable form\n","atform = AirtableForm('appn7VdPRseSoMXEG','W3D3_T1','https://portal.neuromatchacademy.org/api/redirect/to/2baacd95-3fb5-4399-bf95-bbe5de255d2b')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["\u001b[?25l\r\u001b[K     |███████▏                        | 10 kB 21.5 MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 20 kB 26.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 30 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 40 kB 17.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 46 kB 2.0 MB/s \n","\u001b[?25h\u001b[?25l\r\u001b[K     |███▉                            | 10 kB 24.4 MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 20 kB 27.7 MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 30 kB 34.5 MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 40 kB 37.6 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 51 kB 40.8 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 61 kB 10.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 71 kB 11.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 81 kB 12.5 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 86 kB 4.0 MB/s \n","\u001b[?25h  Building wheel for evaltools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{},"id":"_P6iVISEXFb8","executionInfo":{"status":"ok","timestamp":1629314825810,"user_tz":240,"elapsed":3953,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Imports\n","import os\n","import math\n","import time\n","import torch\n","import random\n","import logging\n","import coloredlogs\n","\n","import numpy as np\n","\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","\n","from tqdm.notebook import tqdm\n","from pickle import Unpickler\n","\n","log = logging.getLogger(__name__)\n","coloredlogs.install(level='INFO')  # Change this to DEBUG to see more info."],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"Ll5FdYLrXFb-","executionInfo":{"status":"ok","timestamp":1629314825816,"user_tz":240,"elapsed":13,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set random seed\n","\n","# @markdown Executing `set_seed(seed=seed)` you are setting the seed\n","\n","# for DL its critical to set the random seed so that students can have a\n","# baseline to compare their results to expected results.\n","# Read more here: https://pytorch.org/docs/stable/notes/randomness.html\n","\n","# Call `set_seed` function in the exercises to ensure reproducibility.\n","import random\n","import torch\n","\n","def set_seed(seed=None, seed_torch=True):\n","  if seed is None:\n","    seed = np.random.choice(2 ** 32)\n","  random.seed(seed)\n","  np.random.seed(seed)\n","  if seed_torch:\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.benchmark = False\n","    torch.backends.cudnn.deterministic = True\n","\n","  print(f'Random seed {seed} has been set.')\n","\n","\n","# In case that `DataLoader` is used\n","def seed_worker(worker_id):\n","  worker_seed = torch.initial_seed() % 2**32\n","  np.random.seed(worker_seed)\n","  random.seed(worker_seed)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"66b7vSXqXFb_","executionInfo":{"status":"ok","timestamp":1629314825817,"user_tz":240,"elapsed":12,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Set device (GPU or CPU). Execute `set_device()`\n","# especially if torch modules used.\n","\n","# inform the user if the notebook uses GPU or CPU.\n","\n","def set_device():\n","  device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","  if device != \"cuda\":\n","    print(\"WARNING: For this notebook to perform best, \"\n","        \"if possible, in the menu under `Runtime` -> \"\n","        \"`Change runtime type.`  select `GPU` \")\n","  else:\n","    print(\"GPU is enabled in this notebook.\")\n","\n","  return device"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"5_iShmOgXFcC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314825817,"user_tz":240,"elapsed":11,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"b70f55ae-a43a-4a62-af41-b318f1f50404"},"source":["SEED = 2021\n","set_seed(seed=SEED)\n","DEVICE = set_device()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n","WARNING: For this notebook to perform best, if possible, in the menu under `Runtime` -> `Change runtime type.`  select `GPU` \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"j8jXU1Z2XFcD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314848238,"user_tz":240,"elapsed":22430,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"02ea6b68-2b21-435e-b263-5348af71c4c2"},"source":["# @title Download the modules\n","\n","# @markdown Run this cell!\n","\n","# @markdown Download from OSF. Original repo: https://github.com/raymondchua/nma_rl_games.git\n","\n","import os, io, sys, shutil, zipfile\n","from urllib.request import urlopen\n","\n","# download from github repo directly\n","#!git clone git://github.com/raymondchua/nma_rl_games.git --quiet\n","REPO_PATH = 'nma_rl_games'\n","\n","if os.path.exists(REPO_PATH):\n","  download_string = \"Redownloading\"\n","  shutil.rmtree(REPO_PATH)\n","else:\n","  download_string = \"Downloading\"\n","\n","zipurl = 'https://osf.io/kf4p9/download'\n","print(f\"{download_string} and unzipping the file... Please wait.\")\n","with urlopen(zipurl) as zipresp:\n","  with zipfile.ZipFile(io.BytesIO(zipresp.read())) as zfile:\n","    zfile.extractall()\n","print(\"Download completed.\")\n","\n","print(f\"Add the {REPO_PATH} in the path and import the modules.\")\n","# add the repo in the path\n","sys.path.append('nma_rl_games/alpha-zero')\n","\n","# @markdown Import modules designed for use in this notebook\n","import Arena\n","\n","from utils import *\n","from Game import Game\n","from MCTS import MCTS\n","from NeuralNet import NeuralNet\n","\n","from othello.OthelloPlayers import *\n","from othello.OthelloLogic import Board\n","from othello.OthelloGame import OthelloGame\n","from othello.pytorch.NNet import NNetWrapper as NNet"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Downloading and unzipping the file... Please wait.\n","Download completed.\n","Add the nma_rl_games in the path and import the modules.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"6FBbpQEnXFcE"},"source":["The hyperparameters used throughout the notebook."]},{"cell_type":"code","metadata":{"execution":{},"id":"hAwDJfR4XFcF","executionInfo":{"status":"ok","timestamp":1629314848240,"user_tz":240,"elapsed":28,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["args = dotdict({\n","    'numIters': 1,            # in training setting this was 1000 and num of episodes=100\n","    'numEps': 1,              # Number of complete self-play games to simulate during a new iteration.\n","    'tempThreshold': 15,      # To control exploration and exploitation\n","    'updateThreshold': 0.6,   # During arena playoff, new neural net will be accepted if threshold or more of games are won.\n","    'maxlenOfQueue': 200,     # Number of game examples to train the neural networks.\n","    'numMCTSSims': 15,        # Number of games moves for MCTS to simulate.\n","    'arenaCompare': 10,       # Number of games to play during arena play to determine if new net will be accepted.\n","    'cpuct': 1,\n","    'maxDepth':5,             # Maximum number of rollouts\n","    'numMCsims': 5,           # Number of monte carlo simulations\n","    'mc_topk': 3,             # top k actions for monte carlo rollout\n","\n","    'checkpoint': './temp/',\n","    'load_model': False,\n","    'load_folder_file': ('/dev/models/8x100x50','best.pth.tar'),\n","    'numItersForTrainExamplesHistory': 20,\n","\n","    # define neural network arguments\n","    'lr': 0.001,               # lr: learning rate\n","    'dropout': 0.3,\n","    'epochs': 10,\n","    'batch_size': 64,\n","    'device': DEVICE,\n","    'num_channels': 512,\n","})"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Md4wKpdtXFcG"},"source":["---\n","# Section 0: Introduction"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"a88AL6piXFcI","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["dbad3c3b9dc2426cb9798ee6da48f11e","65e25aff80cd4a88ac3427b519dcd0da","e342fdf0d76a493091c5a7340dab3f24","462fb397317b490bb84833fed3d4f68c","63d8c763183448ac805fd2c33f0281e3","7d3ca231486d431bb53cf9a805cccc4f"]},"executionInfo":{"status":"ok","timestamp":1629314848242,"user_tz":240,"elapsed":27,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"b4a80250-3eca-4ff5-c1df-fd729caecb07"},"source":["# @title Video 0: Introduction\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Yh411B7EP\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"5kQ-xGbjlJo\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 0: Introduction')\n","\n","display(out)"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"dbad3c3b9dc2426cb9798ee6da48f11e","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"2Gp5IyWeXFcK"},"source":["---\n","# Section 1: Create a game/agent loop for RL\n","\n","*Time estimate: ~15mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"U_QCLMTcXFcL","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["f80e7d20cfa54df4b9659b4dad007bf2","a430533c86bc4fb09adcb14d49846fe4","c9e6bf98c233430abf20be079b4d5a98","a50f25ecd3054cdbad754f6c58c8237f","e84e398b69cf4d6d9d2bc0d28dcb74bf","d8c131d61ab043c1a069f96b167a0ace"]},"executionInfo":{"status":"ok","timestamp":1629314848737,"user_tz":240,"elapsed":513,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"7314211e-8b60-45aa-ca4a-e452cb6cd866"},"source":["# @title Video 1: A game loop for RL\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Wy4y1V7bt\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"aH2Hs8f6KrQ\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 1: A game loop for RL')\n","\n","display(out)"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f80e7d20cfa54df4b9659b4dad007bf2","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"v3vpde2gXFcO"},"source":["\n","***Goal***: How to setup a game environment with multiple players for reinforcement learning experiments.\n","\n","***Exercise***: \n","\n","\n","*   Build an agent that plays random moves\n","*   Connect with connect 4 game\n","*   Generate games including wins and losses"]},{"cell_type":"code","metadata":{"execution":{},"id":"COc6GZG2XFcP","executionInfo":{"status":"ok","timestamp":1629314848738,"user_tz":240,"elapsed":11,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class OthelloGame(Game):\n","  square_content = {\n","      -1: \"X\",\n","      +0: \"-\",\n","      +1: \"O\"\n","      }\n","\n","  @staticmethod\n","  def getSquarePiece(piece):\n","    return OthelloGame.square_content[piece]\n","\n","  def __init__(self, n):\n","    self.n = n\n","\n","  def getInitBoard(self):\n","    # return initial board (numpy board)\n","    b = Board(self.n)\n","    return np.array(b.pieces)\n","\n","  def getBoardSize(self):\n","    # (a,b) tuple\n","    return (self.n, self.n)\n","\n","  def getActionSize(self):\n","    # return number of actions, n is the board size and +1 is for no-op action\n","    return self.n*self.n + 1\n","\n","  def getNextState(self, board, player, action):\n","    # if player takes action on board, return next (board,player)\n","    # action must be a valid move\n","    if action == self.n*self.n:\n","      return (board, -player)\n","    b = Board(self.n)\n","    b.pieces = np.copy(board)\n","    move = (int(action/self.n), action%self.n)\n","    b.execute_move(move, player)\n","    return (b.pieces, -player)\n","\n","  def getValidMoves(self, board, player):\n","    # return a fixed size binary vector\n","    valids = [0]*self.getActionSize()\n","    b = Board(self.n)\n","    b.pieces = np.copy(board)\n","    legalMoves =  b.get_legal_moves(player)\n","    if len(legalMoves)==0:\n","      valids[-1]=1\n","      return np.array(valids)\n","    for x, y in legalMoves:\n","      valids[self.n*x+y]=1\n","    return np.array(valids)\n","\n","  def getGameEnded(self, board, player):\n","    # return 0 if not ended, 1 if player 1 won, -1 if player 1 lost\n","    # player = 1\n","    b = Board(self.n)\n","    b.pieces = np.copy(board)\n","    if b.has_legal_moves(player):\n","      return 0\n","    if b.has_legal_moves(-player):\n","      return 0\n","    if b.countDiff(player) > 0:\n","      return 1\n","    return -1\n","\n","  def getCanonicalForm(self, board, player):\n","    # return state if player==1, else return -state if player==-1\n","    return player*board\n","\n","  def getSymmetries(self, board, pi):\n","    # mirror, rotational\n","    assert(len(pi) == self.n**2+1)  # 1 for pass\n","    pi_board = np.reshape(pi[:-1], (self.n, self.n))\n","    l = []\n","\n","    for i in range(1, 5):\n","      for j in [True, False]:\n","        newB = np.rot90(board, i)\n","        newPi = np.rot90(pi_board, i)\n","        if j:\n","          newB = np.fliplr(newB)\n","          newPi = np.fliplr(newPi)\n","        l += [(newB, list(newPi.ravel()) + [pi[-1]])]\n","    return l\n","\n","  def stringRepresentation(self, board):\n","    return board.tobytes()\n","\n","  def stringRepresentationReadable(self, board):\n","    board_s = \"\".join(self.square_content[square] for row in board for square in row)\n","    return board_s\n","\n","  def getScore(self, board, player):\n","    b = Board(self.n)\n","    b.pieces = np.copy(board)\n","    return b.countDiff(player)\n","\n","  @staticmethod\n","  def display(board):\n","    n = board.shape[0]\n","    print(\"   \", end=\"\")\n","    for y in range(n):\n","      print(y, end=\" \")\n","    print(\"\")\n","    print(\"-----------------------\")\n","    for y in range(n):\n","      print(y, \"|\", end=\"\")    # print the row #\n","      for x in range(n):\n","        piece = board[y][x]    # get the piece to print\n","        print(OthelloGame.square_content[piece], end=\" \")\n","      print(\"|\")\n","    print(\"-----------------------\")"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"D5AjnU01XFcR"},"source":["## Section 1.1: Create a random player"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"j73uBYlRXFcS"},"source":["### Coding Exercise 1.1: Implement a random player"]},{"cell_type":"code","metadata":{"execution":{},"id":"rmdAEsTbXFcT","executionInfo":{"status":"ok","timestamp":1629314848738,"user_tz":240,"elapsed":9,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class RandomPlayer():\n","  def __init__(self, game):\n","    self.game = game\n","\n","  def play(self, board):\n","\n","    #################################################\n","    ## TODO for students: ##\n","    ## 1. Please compute the valid moves using getValidMoves(). ##\n","    ## 2. Compute the probability over actions.##\n","    ## 3. Pick a random action based on the probability computed above.##\n","    # Fill out function and remove ##\n","    #raise NotImplementedError(\"Implement the random player\")\n","    #################################################\n","\n","    valids = self.game.getValidMoves(board, 1)\n","    prob = valids/valids.sum()\n","    a = np.random.choice(self.game.getActionSize(), p=prob)\n","    return a\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 1.1: Implement a random player')"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"FYyE5ndbXFcV"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_7474bcfc.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"T9zreaPxXFcW"},"source":["## Section 1.2. Initiate the game board\n"]},{"cell_type":"code","metadata":{"execution":{},"id":"VtiCvPyEXFcZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314849144,"user_tz":240,"elapsed":413,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"51d216a3-d441-4910-b606-990a564c855e"},"source":["# Display the board\n","set_seed(seed=SEED)\n","game = OthelloGame(6)\n","board = game.getInitBoard()\n","game.display(board)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n","   0 1 2 3 4 5 \n","-----------------------\n","0 |- - - - - - |\n","1 |- - - - - - |\n","2 |- - X O - - |\n","3 |- - O X - - |\n","4 |- - - - - - |\n","5 |- - - - - - |\n","-----------------------\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{},"id":"GY0OxFt6XFca","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314849145,"user_tz":240,"elapsed":71,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"9af46311-5bd5-462b-d9ec-e7714b415bd3"},"source":["# observe the game board size\n","print(f'Board size = {game.getBoardSize()}')\n","\n","# observe the action size\n","print(f'Action size = {game.getActionSize()}')"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Board size = (6, 6)\n","Action size = 37\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"YpbKUYCOXFcb"},"source":["## Section 1.3. Create two random agents to play against each other"]},{"cell_type":"code","metadata":{"execution":{},"id":"6eSWO83yXFcd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314850255,"user_tz":240,"elapsed":1147,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"f564ee09-a056-457a-b06e-19b522a608fc"},"source":["# define the random player\n","player1 = RandomPlayer(game).play  # player 1 is a random player\n","player2 = RandomPlayer(game).play  # player 2 is a random player\n","\n","# define number of games\n","num_games = 20\n","\n","# start the competition\n","set_seed(seed=SEED)\n","arena = Arena.Arena(player1, player2 , game, display=None)  # to see the steps of the competition set \"display=OthelloGame.display\"\n","result = arena.playGames(num_games, verbose=False)  # return  ( number of games won by player1, num of games won by player2, num of games won by nobody)\n","print(f\"\\n\\n{result}\")"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"stream","text":["Arena.playGames (1): 100%|██████████| 10/10 [00:00<00:00, 14.62it/s]\n","Arena.playGames (2): 100%|██████████| 10/10 [00:00<00:00, 14.85it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","\n","(11, 9, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"VIfU-do5XFce"},"source":["```\n","(11, 9, 0)\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"CI7vF0m_XFcg"},"source":["## Section 1.4. Compute win rate for the random player (player 1)"]},{"cell_type":"code","metadata":{"execution":{},"id":"QekBZvVLXFch","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314850255,"user_tz":240,"elapsed":36,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"83cb30d1-b3d9-4515-f28f-627d171e3873"},"source":["print(f\"Number of games won by player1 = {result[0]}, \"\n","      f\"Number of games won by player2 = {result[1]} out of {num_games} games\")\n","win_rate_player1 = result[0]/num_games\n","print(f\"\\nWin rate for player1 over 20 games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Number of games won by player1 = 11, Number of games won by player2 = 9 out of 20 games\n","\n","Win rate for player1 over 20 games: 55.0%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"73gtPXPVXFcj"},"source":["```\n","Number of games won by player1 = 11, Number of games won by player2 = 9 out of 20 games\n","\n","Win rate for player1 over 20 games: 55.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"1QuhR3UyXFcm"},"source":["---\n","# Section 2: Train a value function from expert game data\n","\n","*Time estimate: ~25mins*\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"7C8eUQ48XFcq"},"source":["**Goal:** Learn how to train a value function from a dataset of games played by an expert.\n","\n","**Exercise:** \n","\n","* Load a dataset of expert generated games.\n","* Train a network to minimize MSE for win/loss predictions given board states sampled throughout the game. This will be done on a very small number of games. We will provide a network trained on a larger dataset."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"KmHD9n8VXFcu","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["a48b7b080a174e4c837fca13766816bf","bc87d51c429649059c4b86139ab997a2","bc121e3713c241168ee12bf413c64c5b","55c5eb243311447493898b0bf3f7b203","00b7528f4b1349bf8c44e803f223f94f","2bbaec3d07194ab49c5683739004afb6"]},"executionInfo":{"status":"ok","timestamp":1629314850716,"user_tz":240,"elapsed":467,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"4e69d8fa-2882-4e89-824d-842ff0eb63d1"},"source":["# @title Video 2: Train a value function\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1pg411j7f7\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"f9lZq0WQJFg\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 2: Train a value function')\n","\n","display(out)"],"execution_count":17,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a48b7b080a174e4c837fca13766816bf","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"p13JzJeDXFcw"},"source":["## Section 2.1. Load expert data"]},{"cell_type":"code","metadata":{"execution":{},"id":"1fa4egIlXFcy","executionInfo":{"status":"ok","timestamp":1629314850717,"user_tz":240,"elapsed":80,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["def loadTrainExamples(folder, filename):\n","  trainExamplesHistory = []\n","  modelFile = os.path.join(folder, filename)\n","  examplesFile = modelFile + \".examples\"\n","  if not os.path.isfile(examplesFile):\n","    print(f'File \"{examplesFile}\" with trainExamples not found!')\n","    r = input(\"Continue? [y|n]\")\n","    if r != \"y\":\n","      sys.exit()\n","  else:\n","    print(\"File with train examples found. Loading it...\")\n","    with open(examplesFile, \"rb\") as f:\n","      trainExamplesHistory = Unpickler(f).load()\n","    print('Loading done!')\n","    # examples based on the model were already collected (loaded)\n","    return trainExamplesHistory"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"lK_fcUd5XFcz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314853739,"user_tz":240,"elapsed":3101,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"b32c3f6c-b9c3-4474-b599-4a282e2950ff"},"source":["path = \"nma_rl_games/alpha-zero/pretrained_models/data/\"\n","loaded_games = loadTrainExamples(folder=path, filename='checkpoint_1.pth.tar')"],"execution_count":19,"outputs":[{"output_type":"stream","text":["File with train examples found. Loading it...\n","Loading done!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"RKQ5MBCAXFc0"},"source":["## Section 2.2. Define the Neural Network Architecture for Othello\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"gi8k2YwzXFc1"},"source":["### Coding Exercise 2.2: Implement the NN `OthelloNNet` for Othello"]},{"cell_type":"code","metadata":{"execution":{},"id":"Yz9oMdcEXFc2","executionInfo":{"status":"ok","timestamp":1629314853741,"user_tz":240,"elapsed":8,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class OthelloNNet(nn.Module):\n","  def __init__(self, game, args):\n","    # game params\n","    self.board_x, self.board_y = game.getBoardSize()\n","    self.action_size = game.getActionSize()\n","    self.args = args\n","\n","    super(OthelloNNet, self).__init__()\n","    self.conv1 = nn.Conv2d(1, args.num_channels, 3, stride=1, padding=1)\n","    self.conv2 = nn.Conv2d(args.num_channels, args.num_channels, 3, stride=1,\n","                           padding=1)\n","    self.conv3 = nn.Conv2d(args.num_channels, args.num_channels, 3, stride=1)\n","    self.conv4 = nn.Conv2d(args.num_channels, args.num_channels, 3, stride=1)\n","\n","    self.bn1 = nn.BatchNorm2d(args.num_channels)\n","    self.bn2 = nn.BatchNorm2d(args.num_channels)\n","    self.bn3 = nn.BatchNorm2d(args.num_channels)\n","    self.bn4 = nn.BatchNorm2d(args.num_channels)\n","\n","    self.fc1 = nn.Linear(args.num_channels * (self.board_x - 4) * (self.board_y - 4), 1024)\n","    self.fc_bn1 = nn.BatchNorm1d(1024)\n","\n","    self.fc2 = nn.Linear(1024, 512)\n","    self.fc_bn2 = nn.BatchNorm1d(512)\n","\n","    self.fc3 = nn.Linear(512, self.action_size)\n","\n","    self.fc4 = nn.Linear(512, 1)\n","\n","  def forward(self, s):\n","    # s: batch_size x board_x x board_y\n","    s = s.view(-1, 1, self.board_x, self.board_y)                # batch_size x 1 x board_x x board_y\n","    s = F.relu(self.bn1(self.conv1(s)))                          # batch_size x num_channels x board_x x board_y\n","    s = F.relu(self.bn2(self.conv2(s)))                          # batch_size x num_channels x board_x x board_y\n","    s = F.relu(self.bn3(self.conv3(s)))                          # batch_size x num_channels x (board_x-2) x (board_y-2)\n","    s = F.relu(self.bn4(self.conv4(s)))                          # batch_size x num_channels x (board_x-4) x (board_y-4)\n","    s = s.view(-1, self.args.num_channels * (self.board_x - 4) * (self.board_y - 4))\n","\n","    s = F.dropout(F.relu(self.fc_bn1(self.fc1(s))), p=self.args.dropout, training=self.training)  # batch_size x 1024\n","    s = F.dropout(F.relu(self.fc_bn2(self.fc2(s))), p=self.args.dropout, training=self.training)  # batch_size x 512\n","\n","    pi = self.fc3(s)  # batch_size x action_size\n","    v = self.fc4(s)   # batch_size x 1\n","    #################################################\n","    ## TODO for students: Please compute a probability distribution over 'pi' using log softmax (for numerical stability)\n","    # Fill out function and remove\n","    #raise NotImplementedError(\"Calculate the probability distribution and the value\")\n","    #################################################\n","    # return a probability distribution over actions at the current state and the value of the current state.\n","    return F.log_softmax(pi, dim=1), torch.tanh(v)\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 2.2: Implement the NN OthelloNNet for Othello')"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"3Vxv05mAXFc5"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_7b72acfd.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"KK4cxcCzXFc7"},"source":["## Section 2.3. Define the Value network\n"," During the training the ground truth will be uploaded from the **MCTS simulations** available at 'checkpoint_x.path.tar.examples'."]},{"cell_type":"markdown","metadata":{"execution":{},"id":"k-v0wIOWXFc8"},"source":["### Coding Exercise 2.3: Implement the `ValueNetwork`"]},{"cell_type":"code","metadata":{"execution":{},"id":"bwu7zOUhXFc-","executionInfo":{"status":"ok","timestamp":1629314854179,"user_tz":240,"elapsed":444,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class ValueNetwork(NeuralNet):\n","  def __init__(self, game):\n","    self.nnet = OthelloNNet(game, args)\n","    self.board_x, self.board_y = game.getBoardSize()\n","    self.action_size = game.getActionSize()\n","\n","    self.nnet.to(args.device)\n","\n","  def train(self, games):\n","    \"\"\"\n","    examples: list of examples, each example is of form (board, pi, v)\n","    \"\"\"\n","    optimizer = optim.Adam(self.nnet.parameters())\n","    for examples in games:\n","      for epoch in range(args.epochs):\n","        print('EPOCH ::: ' + str(epoch + 1))\n","        self.nnet.train()\n","        v_losses = []   # to store the losses per epoch\n","        batch_count = int(len(examples) / args.batch_size)  # len(examples)=200, batch-size=64, batch_count=3\n","        t = tqdm(range(batch_count), desc='Training Value Network')\n","        for _ in t:\n","          sample_ids = np.random.randint(len(examples), size=args.batch_size)  # read the ground truth information from MCTS simulation using the loaded examples\n","          boards, pis, vs = list(zip(*[examples[i] for i in sample_ids]))  # length of boards, pis, vis = 64\n","          boards = torch.FloatTensor(np.array(boards).astype(np.float64))\n","          target_vs = torch.FloatTensor(np.array(vs).astype(np.float64))\n","\n","          # predict\n","          boards, target_vs = boards.contiguous().to(args.device), target_vs.contiguous().to(args.device)\n","\n","          #################################################\n","          ## TODO for students:\n","          ## 1. Compute the value predicted by OthelloNNet() ##\n","          ## 2. First implement the loss_v() function below and then use it to update the value loss. ##\n","          # Fill out function and remove\n","          raise NotImplementedError(\"Compute the output\")\n","          #################################################\n","          # compute output\n","          _, out_v = ...\n","          l_v = ...  # total loss\n","\n","          # record loss\n","          v_losses.append(l_v.item())\n","          t.set_postfix(Loss_v=l_v.item())\n","\n","          # compute gradient and do SGD step\n","          optimizer.zero_grad()\n","          l_v.backward()\n","          optimizer.step()\n","\n","  def predict(self, board):\n","    \"\"\"\n","    board: np array with board\n","    \"\"\"\n","    # timing\n","    start = time.time()\n","\n","    # preparing input\n","    board = torch.FloatTensor(board.astype(np.float64))\n","    board = board.contiguous().to(args.device)\n","    board = board.view(1, self.board_x, self.board_y)\n","    self.nnet.eval()\n","    with torch.no_grad():\n","        _, v = self.nnet(board)\n","    return v.data.cpu().numpy()[0]\n","\n","  def loss_v(self, targets, outputs):\n","    #################################################\n","    ## TODO for students: Please compute Mean squared error and return as output. ##\n","    # Fill out function and remove\n","    raise NotImplementedError(\"Calculate the loss\")\n","    #################################################\n","    # Mean squared error (MSE)\n","    return ...\n","\n","  def save_checkpoint(self, folder='checkpoint', filename='checkpoint.pth.tar'):\n","    filepath = os.path.join(folder, filename)\n","    if not os.path.exists(folder):\n","      print(\"Checkpoint Directory does not exist! Making directory {}\".format(folder))\n","      os.mkdir(folder)\n","    else:\n","      print(\"Checkpoint Directory exists! \")\n","    torch.save({'state_dict': self.nnet.state_dict(),}, filepath)\n","    print(\"Model saved! \")\n","\n","  def load_checkpoint(self, folder='checkpoint', filename='checkpoint.pth.tar'):\n","    # https://github.com/pytorch/examples/blob/master/imagenet/main.py#L98\n","    filepath = os.path.join(folder, filename)\n","    if not os.path.exists(filepath):\n","      raise (\"No model in path {}\".format(filepath))\n","\n","    checkpoint = torch.load(filepath, map_location=args.device)\n","    self.nnet.load_state_dict(checkpoint['state_dict'])\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 2.3: Implement the ValueNetwork')"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"jAOIHQO3XFc_"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_5f1dc256.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"S_YOp3yMXFc_"},"source":["## Section 2.4. Train the value network and observe the MSE loss progress\n","\n","**Important:** Only run this cell if you do not have access to the pretrained models in the `rl_for_games` repositry."]},{"cell_type":"code","metadata":{"execution":{},"id":"_fOE0JVsXFdA","executionInfo":{"status":"ok","timestamp":1629314854180,"user_tz":240,"elapsed":52,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["if not os.listdir('nma_rl_games/alpha-zero/pretrained_models/models/'):\n","  set_seed(seed=SEED)\n","  game = OthelloGame(6)\n","  vnet = ValueNetwork(game)\n","  vnet.train(loaded_games)"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"nz3gcO3_XFdA"},"source":["---\n","# Section 3: Use a trained value network to play games\n","\n","*Time estimate: ~25mins*\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"4Po7VMRBXFdC"},"source":["**Goal**: Learn how to use a value function in order to make a player that works better than a random player.\n","\n","**Exercise:**\n","* Sample random valid moves and use the value function to rank them\n","* Choose the best move as the action and play it\n","Show that doing so beats the random player\n","\n","**Hint:** You might need to change the sign of the value based on the player"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"ONjJc5meXFdC","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["8ac51c90bdca49f58d839b2391e5f502","f35f0ae86907462ebc5664ac532645ac","cd02cad7f5894dfd880f1c08a2a17d43","2324bb4dd5bc42baa73328c5f0664aba","677c7f0dd08c47718792788009bcddad","7c03fc4e3a8441849d0703497b92f2da"]},"executionInfo":{"status":"ok","timestamp":1629314854181,"user_tz":240,"elapsed":51,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"6d74a6f9-cde9-4c86-aa94-fcbccd2d8dce"},"source":["# @title Video 3: Play games using a value function\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Ug411j7ig\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"tvmzVHPBKKs\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 3: Play games using a value function')\n","\n","display(out)"],"execution_count":23,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8ac51c90bdca49f58d839b2391e5f502","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"EWM5ZTrLXFdD"},"source":["## Coding Exercise 3: Value-based player"]},{"cell_type":"code","metadata":{"execution":{},"id":"xEDIYlMyXFdE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314854904,"user_tz":240,"elapsed":766,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"18a8ada9-83b2-4480-d0a4-7fc26ed97df6"},"source":["model_save_name = 'ValueNetwork.pth.tar'\n","path = \"nma_rl_games/alpha-zero/pretrained_models/models/\"\n","set_seed(seed=SEED)\n","game = OthelloGame(6)\n","vnet = ValueNetwork(game)\n","vnet.load_checkpoint(folder=path, filename=model_save_name)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{},"id":"NJThVafVXFdE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314854913,"user_tz":240,"elapsed":128,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"8ed632ea-fdd8-4722-a799-24b052958837"},"source":["class ValueBasedPlayer():\n","  def __init__(self, game, vnet):\n","    self.game = game\n","    self.vnet = vnet\n","\n","  def play(self, board):\n","    valids = self.game.getValidMoves(board, 1)\n","    candidates = []\n","    max_num_actions = 4\n","    va = np.where(valids)[0]\n","    va_list = va.tolist()\n","    random.shuffle(va_list)\n","    #################################################\n","    ## TODO for students: In the first part, please return the next board state using getNextState(), then predict\n","    ## the value of next state using value network, and finally add the value and action as a tuple to the candidate list.\n","    ## Note that you need to reverse the sign of the value. In zero-sum games the players flip every turn. In detail, we train\n","    ## a value function to think about the game from one player's (either black or white) perspective. In order to use the same\n","    ## value function to estimate how good the position is for the other player, we need to take the negative of the output of\n","    ## the function. E.g., if the value function is trained for white's perspective and says that white is likely to win the game\n","    ## from the current state with an output of 0.75, this similarly means that it would suggest that black is very unlikely (-0.75)\n","    ## to win the game from the current state.##\n","    # Fill out function and remove\n","    raise NotImplementedError(\"Implement the value-based player\")\n","    #################################################\n","    for a in va_list:\n","      nextBoard, _ = ...\n","      value = ...\n","      candidates += ...\n","\n","      if len(candidates) == max_num_actions:\n","        break\n","\n","    candidates.sort()\n","\n","    return candidates[0][1]\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 3: Value-based player')\n","\n","# playing games between a value-based player and a random player\n","set_seed(seed=SEED)\n","num_games = 20\n","player1 = ValueBasedPlayer(game, vnet).play\n","player2 = RandomPlayer(game).play\n","arena = Arena.Arena(player1, player2, game, display=OthelloGame.display)\n","## Uncomment the code below to check your code!\n","# result = arena.playGames(num_games, verbose=False)\n","# print(f\"\\n\\n{result}\")"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"wZZvceaEXFdF"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_45ffeae9.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ngFdEYfZXFdF"},"source":["```\n","(14, 6, 0)\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ZFUlhpUSXFdG"},"source":["**Result of pitting a value-based player against a random player**"]},{"cell_type":"code","metadata":{"execution":{},"id":"P0Y8sgsXXFdG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314854915,"user_tz":240,"elapsed":124,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"80928f33-c826-4364-d718-d30ebece3cc1"},"source":["print(f\"Number of games won by player1 = {result[0]}, \"\n","      f\"Number of games won by player2 = {result[1]}, out of {num_games} games\")\n","win_rate_player1 = result[0]/num_games # result[0] is the number of times that player 1 wins\n","print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Number of games won by player1 = 11, Number of games won by player2 = 9, out of 20 games\n","\n","Win rate for player1 over 20 games: 55.0%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"MoLwbmgcXFdH"},"source":["```\n","Number of games won by player1 = 14, Number of games won by player2 = 6, out of 20 games\n","\n","Win rate for player1 over 20 games: 70.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"VhiEyCBJXFdH"},"source":["---\n","# Section 4: Train a policy network from expert game data\n","\n","*Time estimate: ~20mins*"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ZEBgRpaPXFdI"},"source":["**Goal**: How to train a policy network via supervised learning / behavioural cloning.\n","\n","**Exercise**:\n","* Train a network to predict the next move in an expert dataset by maximizing the log likelihood of the next action."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"oGnbO9ZYXFdJ","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["06897527c7e448e8b2d53f23c2d4940e","59e2bbe3af8942ff87e8970a9466adaa","3d381d3520b54c6d9d51e549d4b20334","2ac018af67c8430eb34004fcb5cadd54","0b2783cb5dbf4e7eb5f47d4d14eab9dc","79c62c09446f48f8b1917e265e44ce3f"]},"executionInfo":{"status":"ok","timestamp":1629314855503,"user_tz":240,"elapsed":618,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"4f5d9880-3478-4c3e-d596-59055f21a3f2"},"source":["# @title Video 4: Train a policy network\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1hQ4y127GJ\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"vj9gKNJ19D8\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 4: Train a policy network')\n","\n","display(out)"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"06897527c7e448e8b2d53f23c2d4940e","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"njVNM5dyXFdJ"},"source":["## Coding Exercise 4: Implement `PolicyNetwork`"]},{"cell_type":"code","metadata":{"execution":{},"id":"hHNbpB7LXFdK","executionInfo":{"status":"ok","timestamp":1629314855505,"user_tz":240,"elapsed":95,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class PolicyNetwork(NeuralNet):\n","  def __init__(self, game):\n","    self.nnet = OthelloNNet(game, args)\n","    self.board_x, self.board_y = game.getBoardSize()\n","    self.action_size = game.getActionSize()\n","\n","    self.nnet.to(args.device)\n","\n","  def train(self, games):\n","    \"\"\"\n","    examples: list of examples, each example is of form (board, pi, v)\n","    \"\"\"\n","    optimizer = optim.Adam(self.nnet.parameters())\n","\n","    for examples in games:\n","      for epoch in range(args.epochs):\n","        print('EPOCH ::: ' + str(epoch + 1))\n","        self.nnet.train()\n","        pi_losses = []\n","\n","        batch_count = int(len(examples) / args.batch_size)\n","\n","        t = tqdm(range(batch_count), desc='Training Policy Network')\n","        for _ in t:\n","          sample_ids = np.random.randint(len(examples), size=args.batch_size)\n","          boards, pis, _ = list(zip(*[examples[i] for i in sample_ids]))\n","          boards = torch.FloatTensor(np.array(boards).astype(np.float64))\n","          target_pis = torch.FloatTensor(np.array(pis))\n","\n","          # predict\n","          boards, target_pis = boards.contiguous().to(args.device), target_pis.contiguous().to(args.device)\n","\n","          #################################################\n","          ## TODO for students: ##\n","          ## 1. Compute the policy (pi) predicted by OthelloNNet() ##\n","          ## 2. Implement the loss_pi() function below and then use it to update the policy loss. ##\n","          # Fill out function and remove\n","          raise NotImplementedError(\"Compute the output\")\n","          #################################################\n","          # compute output\n","          out_pi, _ = ...\n","          l_pi = ...\n","\n","          # record loss\n","          pi_losses.append(l_pi.item())\n","          t.set_postfix(Loss_pi=l_pi.item())\n","\n","          # compute gradient and do SGD step\n","          optimizer.zero_grad()\n","          l_pi.backward()\n","          optimizer.step()\n","\n","  def predict(self, board):\n","    \"\"\"\n","    board: np array with board\n","    \"\"\"\n","    # timing\n","    start = time.time()\n","\n","    # preparing input\n","    board = torch.FloatTensor(board.astype(np.float64))\n","    board = board.contiguous().to(args.device)\n","    board = board.view(1, self.board_x, self.board_y)\n","    self.nnet.eval()\n","    with torch.no_grad():\n","      pi,_ = self.nnet(board)\n","    return torch.exp(pi).data.cpu().numpy()[0]\n","\n","  def loss_pi(self, targets, outputs):\n","    #################################################\n","    ## TODO for students: To implement the loss function, please compute and return the negative log likelihood of targets.\n","    ## For more information, here is a reference that connects the expression to the neg-log-prob: https://gombru.github.io/2018/05/23/cross_entropy_loss/\n","    # Fill out function and remove\n","    raise NotImplementedError(\"Compute the loss\")\n","    #################################################\n","    return ...\n","\n","  def save_checkpoint(self, folder='checkpoint', filename='checkpoint.pth.tar'):\n","    filepath = os.path.join(folder, filename)\n","    if not os.path.exists(folder):\n","      print(\"Checkpoint Directory does not exist! Making directory {}\".format(folder))\n","      os.mkdir(folder)\n","    else:\n","      print(\"Checkpoint Directory exists! \")\n","    torch.save({'state_dict': self.nnet.state_dict(),}, filepath)\n","    print(\"Model saved! \")\n","\n","  def load_checkpoint(self, folder='checkpoint', filename='checkpoint.pth.tar'):\n","    # https://github.com/pytorch/examples/blob/master/imagenet/main.py#L98\n","    filepath = os.path.join(folder, filename)\n","    if not os.path.exists(filepath):\n","      raise (\"No model in path {}\".format(filepath))\n","\n","    checkpoint = torch.load(filepath, map_location=args.device)\n","    self.nnet.load_state_dict(checkpoint['state_dict'])\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 4: Implement PolicyNetwork')"],"execution_count":28,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ekDZZiX5XFdL"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_fe4292a6.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"TXcJmpVSXFdL"},"source":["### Train the policy network\n","\n","**Important:** Only run this cell if you do not have access to the pretrained models in the `rl_for_games` repositry."]},{"cell_type":"code","metadata":{"execution":{},"id":"6UJgkbo8XFdM","executionInfo":{"status":"ok","timestamp":1629314855510,"user_tz":240,"elapsed":98,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["if not os.listdir('nma_rl_games/alpha-zero/pretrained_models/models/'):\n","  set_seed(seed=SEED)\n","  game = OthelloGame(6)\n","  pnet = PolicyNetwork(game)\n","  pnet.train(loaded_games)"],"execution_count":29,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ImH2THukXFdN"},"source":["---\n","# Section 5: Use a trained policy network to play games\n","\n","Time estimate: ~20mins\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"07l7iAoBXFdN"},"source":["**Goal**: How to use a policy network to play games.\n","\n","**Exercise:** \n","* Use the policy network to give probabilities for the next move.\n","* Build a player that takes the move given the maximum probability by the network.\n","* Compare this to another player that samples moves according to the probability distribution output by the network."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"4wDQahJoXFdO","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["9a7271e7bf784c4985d0f9404e170324","794ba9ddf352423f8841a5ea0f51457d","0181c8fc4a19430286a7358922ad8997","2bc078f5b3a64ee5b7ca83345c63cc82","6b79a37ed00748929e2aeac43184e1b2","f65421fe0ec74905adc7945b78e5649d"]},"executionInfo":{"status":"ok","timestamp":1629314855511,"user_tz":240,"elapsed":97,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"7a5a4152-24c5-4639-8c86-fe2eb4a2cf72"},"source":["# @title Video 5: Play games using a policy network\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1aq4y1S7o4\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"yHtVqT2Nstk\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 5: Play games using a policy network')\n","\n","display(out)"],"execution_count":30,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9a7271e7bf784c4985d0f9404e170324","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"SBXMUU9QXFdP"},"source":["## Coding Exercise 5: Implement the `PolicyBasedPlayer`"]},{"cell_type":"code","metadata":{"execution":{},"id":"4-f1FxtDXFdQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314855916,"user_tz":240,"elapsed":490,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"0e3f94e9-b89e-4f9b-e424-54b072bfdb30"},"source":["model_save_name = 'PolicyNetwork.pth.tar'\n","path = \"nma_rl_games/alpha-zero/pretrained_models/models/\"\n","set_seed(seed=SEED)\n","game = OthelloGame(6)\n","pnet = PolicyNetwork(game)\n","pnet.load_checkpoint(folder=path, filename=model_save_name)"],"execution_count":31,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{},"id":"2tCZFV82XFdR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629314855917,"user_tz":240,"elapsed":58,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"a9d3bbb4-4b65-4c92-fd88-9034b2ea4fd4"},"source":["class PolicyBasedPlayer():\n","  def __init__(self, game, pnet, greedy=True):\n","    self.game = game\n","    self.pnet = pnet\n","    self.greedy = greedy\n","\n","  def play(self, board):\n","    valids = self.game.getValidMoves(board, 1)\n","    #################################################\n","    ## TODO for students:  ##\n","    ## 1. Compute the action probabilities using policy network pnet()\n","    ## 2. Mask invalid moves using valids variable and the action probabilites computed above.\n","    ## 3. Compute the sum over valid actions and store them in sum_vap.\n","    # Fill out function and remove\n","    raise NotImplementedError(\"Define the play\")\n","    #################################################\n","    action_probs = ...\n","    vap = ...  # masking invalid moves\n","    sum_vap = ...\n","\n","    if sum_vap > 0:\n","      vap /= sum_vap  # renormalize\n","    else:\n","      # if all valid moves were masked we make all valid moves equally probable\n","      print(\"All valid moves were masked, doing a workaround.\")\n","      vap = vap + valids\n","      vap /= np.sum(vap)\n","\n","    if self.greedy:\n","      # greedy policy player\n","      a = np.where(vap == np.max(vap))[0][0]\n","    else:\n","      # sample-based policy player\n","      a = np.random.choice(self.game.getActionSize(), p=vap)\n","\n","    return a\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 5: Implement the PolicyBasedPlayer')\n","\n","# playing games\n","set_seed(seed=SEED)\n","num_games = 20\n","player1 = PolicyBasedPlayer(game, pnet, greedy=True).play\n","player2 = RandomPlayer(game).play\n","arena = Arena.Arena(player1, player2, game, display=OthelloGame.display)\n","## Uncomment below to test!\n","result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{result}\")\n","# win_rate_player1 = result[0] / num_games\n","print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"GB7UYe2AXFdS"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_ef26beca.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"OGS0RSzNXFdS"},"source":["```\n"," Win rate for player1 over 20 games: 80.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"420lC_4ZXFdT"},"source":["### Comparing a policy based player versus a random player\n","\n","There's often randomness in the results as we are running the players for a low number of games (only 20 games due compute + time costs). So, when students are running the cells they might not get the expected result. To better measure the strength of players you can run more games!"]},{"cell_type":"code","metadata":{"execution":{},"id":"EjodtzDzXFdU","colab":{"base_uri":"https://localhost:8080/","height":392},"executionInfo":{"status":"error","timestamp":1629314856387,"user_tz":240,"elapsed":526,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"b1f90ecd-f7ff-414b-a6dd-194d807de75f"},"source":["set_seed(seed=SEED)\n","num_games = 20\n","game = OthelloGame(6)\n","player1 = PolicyBasedPlayer(game, pnet, greedy=False).play\n","player2 = RandomPlayer(game).play\n","arena = Arena.Arena(player1, player2, game, display=OthelloGame.display)\n","result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{result}\")"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"},{"output_type":"stream","text":["Arena.playGames (1):   0%|          | 0/10 [00:00<?, ?it/s]\n"],"name":"stderr"},{"output_type":"error","ename":"NotImplementedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-6cfadcc5c7f3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplayer2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomPlayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplay\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0marena\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mArena\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mArena\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplayer1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplayer2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgame\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mOthelloGame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marena\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplayGames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_games\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\n\\n{result}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/nma_rl_games/alpha-zero/Arena.py\u001b[0m in \u001b[0;36mplayGames\u001b[0;34m(self, num, verbose)\u001b[0m\n\u001b[1;32m     79\u001b[0m         \u001b[0mdraws\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdesc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Arena.playGames (1)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m             \u001b[0mgameResult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplayGame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mgameResult\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m                 \u001b[0moneWon\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/nma_rl_games/alpha-zero/Arena.py\u001b[0m in \u001b[0;36mplayGame\u001b[0;34m(self, verbose)\u001b[0m\n\u001b[1;32m     48\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Turn \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Player \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurPlayer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m             \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplayers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcurPlayer\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetCanonicalForm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcurPlayer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m             \u001b[0mvalids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetValidMoves\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetCanonicalForm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboard\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcurPlayer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-15a030e5975b>\u001b[0m in \u001b[0;36mplay\u001b[0;34m(self, board)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;31m## 3. Compute the sum over valid actions and store them in sum_vap.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;31m# Fill out function and remove\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Define the play\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m     \u001b[0;31m#################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0maction_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotImplementedError\u001b[0m: Define the play"]}]},{"cell_type":"code","metadata":{"execution":{},"id":"95jvKqu_XFdU","executionInfo":{"status":"aborted","timestamp":1629314856367,"user_tz":240,"elapsed":467,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["win_rate_player1 = result[0]/num_games\n","print(f\"Win rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"7B0fdR6xXFdV"},"source":["```\n","Win rate for player1 over 20 games: 95.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"yZcAVPqUXFdW"},"source":["### Compare greedy policy based player versus value based player "]},{"cell_type":"code","metadata":{"execution":{},"id":"qmxmwiAqXFdW","executionInfo":{"status":"aborted","timestamp":1629314856368,"user_tz":240,"elapsed":468,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["set_seed(seed=SEED)\n","num_games = 20\n","game = OthelloGame(6)\n","player1 = PolicyBasedPlayer(game, pnet).play\n","player2 = ValueBasedPlayer(game, vnet).play\n","arena = Arena.Arena(player1, player2, game, display=OthelloGame.display)\n","result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{result}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"dDndtsLXXFdX","executionInfo":{"status":"aborted","timestamp":1629314856369,"user_tz":240,"elapsed":468,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["win_rate_player1 = result[0]/num_games\n","print(f\"Win rate for player 1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"SdY2zVl2XFdY"},"source":["```\n","Win rate for player 1 over 20 games: 55.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Z2jIYZN5XFdY"},"source":["### Compare greedy policy based player versus sample-based policy player "]},{"cell_type":"code","metadata":{"execution":{},"id":"pUtqQoO9XFdZ","executionInfo":{"status":"aborted","timestamp":1629314856369,"user_tz":240,"elapsed":468,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["set_seed(seed=SEED)\n","num_games = 20\n","game = OthelloGame(6)\n","player1 = PolicyBasedPlayer(game, pnet).play # greedy player\n","player2 = PolicyBasedPlayer(game, pnet, greedy=False).play # sample-based player\n","arena = Arena.Arena(player1, player2, game, display=OthelloGame.display)\n","result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{result}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"qee4BDt0XFda","executionInfo":{"status":"aborted","timestamp":1629314856370,"user_tz":240,"elapsed":469,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["win_rate_player1 = result[0]/num_games\n","print(f\"Win rate for player 1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"PT9rD1K2XFdb"},"source":["```\n"," Win rate for player 1 over 20 games: 50.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"UxgS9s2VXFdb"},"source":["---\n","# Section 6: Plan using Monte Carlo rollouts\n","\n","*Time estimate: ~15mins*\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"cj52LkEOXFdc"},"source":["**Goal**: Teach the students the core idea behind using simulated rollouts to understand the future and value actions.\n","\n","**Exercise**:\n","* Build a loop to run Monte Carlo simulations using the policy network.\n","* Use this to obtain better estimates of the value of moves."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"er1zljU5XFdd","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["fdc45ba8e7334b0abcac8623d6984d55","8258abbddafa4323b5747fa80384d772","9d016218f09c4afb86d02f222095b289","91d9c322207a4a05bb8e6c49ec00e85b","4d754f7e270f44a48929a6236e1a9d1c","94c9447faec44d3aa40fdfa6ec8be771"]},"executionInfo":{"status":"ok","timestamp":1629315599446,"user_tz":240,"elapsed":177,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"7bcc0b9f-4870-4cb7-adf2-dbdb5aa9c1dd"},"source":["# @title Video 6: Play using Monte-Carlo rollouts\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1Rb4y1U7BW\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"DtCWDIlSo18\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 6: Play using Monte-Carlo rollouts')\n","\n","display(out)"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"fdc45ba8e7334b0abcac8623d6984d55","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"TLO0h0ikXFdd"},"source":["## Coding Exercise 6: `MonteCarlo`"]},{"cell_type":"code","metadata":{"execution":{},"id":"7tKTayBgXFde","executionInfo":{"status":"ok","timestamp":1629316062679,"user_tz":240,"elapsed":157,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class MonteCarlo():\n","  def __init__(self, game, nnet, args):\n","    self.game = game\n","    self.nnet = nnet\n","    self.args = args\n","\n","    self.Ps = {}  # stores initial policy (returned by neural net)\n","    self.Es = {}  # stores game.getGameEnded ended for board s\n","\n","  # call this rollout\n","  def simulate(self, canonicalBoard):\n","    \"\"\"\n","    This function performs one monte carlo rollout\n","    \"\"\"\n","\n","    s = self.game.stringRepresentation(canonicalBoard)\n","    init_start_state = s\n","    temp_v = 0\n","    isfirstAction = None\n","\n","    for i in range(self.args.maxDepth): # maxDepth\n","\n","      if s not in self.Es:\n","        self.Es[s] = self.game.getGameEnded(canonicalBoard, 1)\n","      if self.Es[s] != 0:\n","        # terminal state\n","        temp_v= -self.Es[s]\n","        break\n","\n","      self.Ps[s], v = self.nnet.predict(canonicalBoard)\n","      valids = self.game.getValidMoves(canonicalBoard, 1)\n","      self.Ps[s] = self.Ps[s] * valids  # masking invalid moves\n","      sum_Ps_s = np.sum(self.Ps[s])\n","\n","      if sum_Ps_s > 0:\n","        self.Ps[s] /= sum_Ps_s  # renormalize\n","      else:\n","        # if all valid moves were masked make all valid moves equally probable\n","        # NB! All valid moves may be masked if either your NNet architecture is insufficient or you've get overfitting or something else.\n","        # If you have got dozens or hundreds of these messages you should pay attention to your NNet and/or training process.\n","        log.error(\"All valid moves were masked, doing a workaround.\")\n","        self.Ps[s] = self.Ps[s] + valids\n","        self.Ps[s] /= np.sum(self.Ps[s])\n","\n","      #################################################\n","      ## TODO for students: Take a random action.\n","      ## 1. Take the random action.\n","      ## 2. Find the next state and the next player from the environment.\n","      ## 3. Get the canonical form of the next state.\n","      # Fill out function and remove\n","      # raise NotImplementedError(\"Take the action, find the next state\")\n","      #################################################\n","      a = np.random.choice(self.game.getActionSize(), p=self.Ps[s])\n","      next_s, next_player = self.game.getNextState(canonicalBoard, 1, a)\n","      next_s = self.game.getCanonicalForm(next_s, next_player)\n","\n","      s = self.game.stringRepresentation(next_s)\n","      temp_v = v\n","\n","    return temp_v\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 6: MonteCarlo')"],"execution_count":37,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"hRrtYxxVXFde"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_d8a53ceb.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"pJv7WrJpXFdf"},"source":["---\n","# Section 7: Use Monte Carlo simulations to play games\n","\n","*Time estimate: ~20mins*"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"rEEOHYRXXFdf"},"source":["**Goal:** Teach students how to use simple Monte Carlo planning to play games."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"A1MuGYcWXFdf","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["efc097370cbe480ab3ac9306023fb209","d6d1ee4d13c04aebb41860c9e997823d","0cdcc54b924242e59b935280cc0b1a93","3834095cd8aa43e39daa434c95ac8e82","300773998c63453b8212e6612795a658","854b1bbd33194dd192c329b867ed3941"]},"executionInfo":{"status":"ok","timestamp":1629316066562,"user_tz":240,"elapsed":187,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"8811aeca-52e3-468a-b484-763da27e7f05"},"source":["# @title Video 7: Play with planning\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1bh411B7S4\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"plmFzAy3H5s\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 7: Play with planning')\n","\n","display(out)"],"execution_count":38,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"efc097370cbe480ab3ac9306023fb209","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"aBU9dZzkXFdh"},"source":["## Coding Exercise 7: Monte-Carlo simulations\n","\n","* Incorporate Monte Carlo simulations into an agent.\n","* Run the resulting player versus the random, value-based, and policy-based players."]},{"cell_type":"code","metadata":{"execution":{},"id":"Y1iG99muXFdi","executionInfo":{"status":"ok","timestamp":1629316559815,"user_tz":240,"elapsed":144,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Load MC model from the repository\n","mc_model_save_name = 'MC.pth.tar'\n","path = \"nma_rl_games/alpha-zero/pretrained_models/models/\""],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"zd3daMYTXFdi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629316562205,"user_tz":240,"elapsed":427,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"c611d63d-9a03-41f5-b4cc-9187395a5e04"},"source":["class MonteCarloBasedPlayer():\n","  def __init__(self, game, nnet, args):\n","    self.game = game\n","    self.nnet = nnet\n","    self.args = args\n","    #################################################\n","    ## TODO for students: Instantiate the Monte Carlo class.\n","    # Fill out function and remove\n","    #raise NotImplementedError(\"Use Monte Carlo!\")\n","    #################################################\n","    self.mc = MonteCarlo(game, nnet, args)\n","    self.K = self.args.mc_topk\n","\n","  def play(self, canonicalBoard):\n","    self.qsa = []\n","    s = self.game.stringRepresentation(canonicalBoard)\n","    Ps, v = self.nnet.predict(canonicalBoard)\n","    valids = self.game.getValidMoves(canonicalBoard, 1)\n","    Ps = Ps * valids  # masking invalid moves\n","    sum_Ps_s = np.sum(Ps)\n","\n","    if sum_Ps_s > 0:\n","      Ps /= sum_Ps_s  # renormalize\n","    else:\n","      # if all valid moves were masked make all valid moves equally probable\n","      # NB! All valid moves may be masked if either your NNet architecture is insufficient or you've get overfitting or something else.\n","      # If you have got dozens or hundreds of these messages you should pay attention to your NNet and/or training process.\n","      log = logging.getLogger(__name__)\n","      log.error(\"All valid moves were masked, doing a workaround.\")\n","      Ps = Ps + valids\n","      Ps /= np.sum(Ps)\n","\n","    num_valid_actions = np.shape(np.nonzero(Ps))[1]\n","\n","    if num_valid_actions < self.K:\n","      top_k_actions = np.argpartition(Ps,-num_valid_actions)[-num_valid_actions:]\n","    else:\n","      top_k_actions = np.argpartition(Ps,-self.K)[-self.K:]  # to get actions that belongs to top k prob\n","    #################################################\n","    ## TODO for students:\n","    ## 1. For each action in the top-k actions\n","    ## 2. Get the next state using getNextState() function. You can find the implementation of this function in Section 1 in OthelloGame() class.\n","    ## 3. Get the canonical form of the getNextState().\n","    # Fill out function and remove\n","    #raise NotImplementedError(\"Loop for the top actions\")\n","    #################################################\n","    for action in ...:\n","      next_s, next_player = self.game.getNextState(..., ..., ...)\n","      next_s = self.game.getCanonicalForm(..., ...)\n","\n","      values = []\n","\n","      # do some rollouts\n","      for rollout in range(self.args.numMCsims):\n","        value = self.mc.simulate(canonicalBoard)\n","        values.append(value)\n","\n","      # average out values\n","      avg_value = np.mean(values)\n","      self.qsa.append((avg_value, action))\n","\n","    self.qsa.sort(key=lambda a: a[0])\n","    self.qsa.reverse()\n","    best_action = self.qsa[0][1]\n","    return best_action\n","\n","  def getActionProb(self, canonicalBoard, temp=1):\n","    if self.game.getGameEnded(canonicalBoard, 1) != 0:\n","      return np.zeros((self.game.getActionSize()))\n","\n","    else:\n","      action_probs = np.zeros((self.game.getActionSize()))\n","      best_action = self.play(canonicalBoard)\n","      action_probs[best_action] = 1\n","\n","    return action_probs\n","\n","\n","# add event to airtable\n","atform.add_event('Coding Exercise 7: MonteCarlo siumulations')\n","\n","set_seed(seed=SEED)\n","game = OthelloGame(6)\n","# Run the resulting player versus the random player\n","rp = RandomPlayer(game).play\n","num_games = 20  # Feel free to change this number\n","\n","n1 = NNet(game)  # nNet players\n","n1.load_checkpoint(folder=path, filename=mc_model_save_name)\n","args1 = dotdict({'numMCsims': 10, 'maxRollouts':5, 'maxDepth':5, 'mc_topk': 3})\n","\n","## Uncomment below to check Monte Carlo agent!\n","# print('\\n******MC player versus random player******')\n","# mc1 = MonteCarloBasedPlayer(game, n1, args1)\n","# n1p = lambda x: np.argmax(mc1.getActionProb(x))\n","# arena = Arena.Arena(n1p, rp, game, display=OthelloGame.display)\n","# MC_result = arena.playGames(num_games, verbose=False)\n","# print(f\"\\n\\n{MC_result}\")\n","# print(f\"\\nNumber of games won by player1 = {MC_result[0]}, \"\n","#       f\"number of games won by player2 = {MC_result[1]}, out of {num_games} games\")\n","# win_rate_player1 = MC_result[0]/num_games\n","# print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":40,"outputs":[{"output_type":"stream","text":["Random seed 2021 has been set.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"HzZgIfeVXFdj"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_e774cb2e.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"3EaGmfe7XFdj"},"source":["```\n","Number of games won by player1 = 11, number of games won by player2 = 9, out of 20 games\n","\n","Win rate for player1 over 20 games: 55.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"rZRHarCeXFdk"},"source":["### Monte-Carlo player against Value-based player"]},{"cell_type":"code","metadata":{"execution":{},"id":"hadUjS7GXFdk","executionInfo":{"status":"aborted","timestamp":1629314856379,"user_tz":240,"elapsed":476,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["print('\\n******MC player versus value-based player******')\n","set_seed(seed=SEED)\n","vp = ValueBasedPlayer(game, vnet).play # value-based player\n","arena = Arena.Arena(n1p, vp, game, display=OthelloGame.display)\n","MC_result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{MC_result}\")\n","print(f\"\\nNumber of games won by player1 = {MC_result[0]}, \"\n","      f\"number of games won by player2 = {MC_result[1]}, out of {num_games} games\")\n","win_rate_player1 = MC_result[0]/num_games\n","print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"uISts5A8XFdo"},"source":["```\n","Number of games won by player1 = 10, number of games won by player2 = 10, out of 20 games\n","\n","Win rate for player1 over 20 games: 50.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"74M9XgYUXFdo"},"source":["### Monte-Carlo player against Policy-based player"]},{"cell_type":"code","metadata":{"execution":{},"id":"IGKYmrgaXFdo","executionInfo":{"status":"aborted","timestamp":1629314856379,"user_tz":240,"elapsed":32,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["print('\\n******MC player versus policy-based player******')\n","set_seed(seed=SEED)\n","pp = PolicyBasedPlayer(game, pnet).play # policy player\n","arena = Arena.Arena(n1p, pp, game, display=OthelloGame.display)\n","MC_result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{MC_result}\")\n","print(f\"\\nNumber of games won by player1 = {MC_result[0]}, \"\n","      f\"number of games won by player2 = {MC_result[1]}, out of {num_games} games\")\n","win_rate_player1 = MC_result[0]/num_games\n","print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ELoxP76tXFdp"},"source":["```\n","Number of games won by player1 = 10, number of games won by player2 = 10, out of 20 games\n","\n","Win rate for player1 over 20 games: 50.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"qoZs28wMXFdp"},"source":["---\n","# Section 8: Ethical aspects\n","\n","*Time estimate: ~5mins*"]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"MIyX0iwHXFdq","colab":{"base_uri":"https://localhost:8080/","height":580,"referenced_widgets":["4190c02c9f5140da9446ef4ebd74982b","88ff81d6165b49d3bab11ae5530937b7","3333cbec98f24130b7eb59890b187cec","b5797b7fee404bd28cba623dd9dfe887","40c19a588ef5414db08235eb2838131a","c63ee4f8271d484981b5835bd6c6e728"]},"executionInfo":{"status":"ok","timestamp":1629316673023,"user_tz":240,"elapsed":207,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"d0b948f7-7b79-4e8b-9924-9dc79c84836b"},"source":["# @title Video 8: Unstoppable opponents\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1WA411w7mw\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"q7181lvoNpM\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 8: Unstoppable opponents')\n","\n","display(out)"],"execution_count":41,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"4190c02c9f5140da9446ef4ebd74982b","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"YpWZ83PPXFdq"},"source":["---\n","# Summary\n","\n","In this tutotial, you have learned how to implement a game loop and improve the performance of a random player. More specifically, you are now able to understand the format of two-players games. We learned about value-based and policy-based players, and we compare them with the MCTS method."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"ooIADAzzXFdq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629316675510,"user_tz":240,"elapsed":291,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"d82a280a-917a-4beb-a7e8-0566acb891b3"},"source":["# @title Video 9: Outro\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1a64y1s7Sh\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"uQ26iIUzmtw\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 9: Outro')\n","\n","display(out)"],"execution_count":42,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c4242f6e1d764abb8553779a4e5018f8","version_minor":0,"version_major":2},"text/plain":["Tab(children=(Output(), Output()), _titles={'0': 'Youtube', '1': 'Bilibili'})"]},"metadata":{}}]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"ySF8kNJHXFdr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629316678603,"user_tz":240,"elapsed":269,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}},"outputId":"05242839-ff3e-4f2b-8ba2-4643fcf9f088"},"source":["# @title Airtable Submission Link\n","from IPython import display as IPydisplay\n","IPydisplay.HTML(\n","   f\"\"\"\n"," <div>\n","   <a href= \"{atform.url()}\" target=\"_blank\">\n","   <img src=\"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/static/SurveyButton.png?raw=1\"\n"," alt=\"button link end of day Survey\" style=\"width:410px\"></a>\n","   </div>\"\"\" )"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n"," <div>\n","   <a href= \"https://portal.neuromatchacademy.org/api/redirect/to/2baacd95-3fb5-4399-bf95-bbe5de255d2b?data=eyJmb3JtX2lkIjogImFwcG43VmRQUnNlU29NWEVHIiwgInRhYmxlX25hbWUiOiAiVzNEM19UMSIsICJhbnN3ZXJzIjoge30sICJldmVudHMiOiBbeyJldmVudCI6ICJpbml0IiwgInRzIjogMTYyOTMxNDgyMS40NDk1Njc4fSwgeyJldmVudCI6ICJWaWRlbyAwOiBJbnRyb2R1Y3Rpb24iLCAidHMiOiAxNjI5MzE0ODQ4LjAyOTA3Njh9LCB7ImV2ZW50IjogIlZpZGVvIDE6IEEgZ2FtZSBsb29wIGZvciBSTCIsICJ0cyI6IDE2MjkzMTQ4NDguMTUyODQzNX0sIHsiZXZlbnQiOiAiQ29kaW5nIEV4ZXJjaXNlIDEuMTogSW1wbGVtZW50IGEgcmFuZG9tIHBsYXllciIsICJ0cyI6IDE2MjkzMTQ4NDguMzAzMDgyfSwgeyJldmVudCI6ICJWaWRlbyAyOiBUcmFpbiBhIHZhbHVlIGZ1bmN0aW9uIiwgInRzIjogMTYyOTMxNDg0OS45NjczMzEyfSwgeyJldmVudCI6ICJDb2RpbmcgRXhlcmNpc2UgMi4yOiBJbXBsZW1lbnQgdGhlIE5OIE90aGVsbG9OTmV0IGZvciBPdGhlbGxvIiwgInRzIjogMTYyOTMxNDg1My4zMjEyNzd9LCB7ImV2ZW50IjogIkNvZGluZyBFeGVyY2lzZSAyLjM6IEltcGxlbWVudCB0aGUgVmFsdWVOZXR3b3JrIiwgInRzIjogMTYyOTMxNDg1My40OTQ5Njc3fSwgeyJldmVudCI6ICJWaWRlbyAzOiBQbGF5IGdhbWVzIHVzaW5nIGEgdmFsdWUgZnVuY3Rpb24iLCAidHMiOiAxNjI5MzE0ODUzLjY4MDE5NX0sIHsiZXZlbnQiOiAiQ29kaW5nIEV4ZXJjaXNlIDM6IFZhbHVlLWJhc2VkIHBsYXllciIsICJ0cyI6IDE2MjkzMTQ4NTQuMTEwODl9LCB7ImV2ZW50IjogIlZpZGVvIDQ6IFRyYWluIGEgcG9saWN5IG5ldHdvcmsiLCAidHMiOiAxNjI5MzE0ODU0LjI4ODkxMDl9LCB7ImV2ZW50IjogIkNvZGluZyBFeGVyY2lzZSA0OiBJbXBsZW1lbnQgUG9saWN5TmV0d29yayIsICJ0cyI6IDE2MjkzMTQ4NTQuNTE3NTU4fSwgeyJldmVudCI6ICJWaWRlbyA1OiBQbGF5IGdhbWVzIHVzaW5nIGEgcG9saWN5IG5ldHdvcmsiLCAidHMiOiAxNjI5MzE0ODU0LjY5NTk5NDF9LCB7ImV2ZW50IjogIkNvZGluZyBFeGVyY2lzZSA1OiBJbXBsZW1lbnQgdGhlIFBvbGljeUJhc2VkUGxheWVyIiwgInRzIjogMTYyOTMxNDg1NS4xMTA4OTQ0fSwgeyJldmVudCI6ICJWaWRlbyA2OiBQbGF5IHVzaW5nIE1vbnRlLUNhcmxvIHJvbGxvdXRzIiwgInRzIjogMTYyOTMxNTU5OS4zMTQ5NDkzfSwgeyJldmVudCI6ICJDb2RpbmcgRXhlcmNpc2UgNjogTW9udGVDYXJsbyIsICJ0cyI6IDE2MjkzMTU4NDUuNjY4Nzk4NH0sIHsiZXZlbnQiOiAiQ29kaW5nIEV4ZXJjaXNlIDY6IE1vbnRlQ2FybG8iLCAidHMiOiAxNjI5MzE2MDYyLjUxMjc2OH0sIHsiZXZlbnQiOiAiVmlkZW8gNzogUGxheSB3aXRoIHBsYW5uaW5nIiwgInRzIjogMTYyOTMxNjA2Ni4zODE0MzV9LCB7ImV2ZW50IjogIkNvZGluZyBFeGVyY2lzZSA3OiBNb250ZUNhcmxvIHNpdW11bGF0aW9ucyIsICJ0cyI6IDE2MjkzMTY1NjEuNzg3NDE4Nn0sIHsiZXZlbnQiOiAiVmlkZW8gODogVW5zdG9wcGFibGUgb3Bwb25lbnRzIiwgInRzIjogMTYyOTMxNjY3Mi43NzM5NTE4fSwgeyJldmVudCI6ICJWaWRlbyA5OiBPdXRybyIsICJ0cyI6IDE2MjkzMTY2NzUuMTE5MTI2Nn0sIHsiZXZlbnQiOiAidXJsIGdlbmVyYXRlZCIsICJ0cyI6IDE2MjkzMTY2NzguMjQ5MzkyN31dfQ%3D%3D\" target=\"_blank\">\n","   <img src=\"https://github.com/NeuromatchAcademy/course-content-dl/blob/main/tutorials/static/SurveyButton.png?raw=1\"\n"," alt=\"button link end of day Survey\" style=\"width:410px\"></a>\n","   </div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","metadata":{"execution":{},"id":"_Cpr6O6lXFdt"},"source":["---\n","# Bonus 1: Plan using Monte Carlo Tree Search (MCTS)\n","\n","*Time estimate: ~30mins"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"P_eexMaQXFdt"},"source":["**Goal:** Teach students to understand the core ideas behind Monte Carlo Tree Search (MCTS)."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"Z-laX4nOXFdu","executionInfo":{"status":"aborted","timestamp":1629314856382,"user_tz":240,"elapsed":33,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Video 10: Plan with MCTS\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV1yQ4y127Sr\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"Hhw6Ed0Zmco\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 10: Plan with MCTS')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"fExg2kw7XFdw"},"source":["## Bonus Coding Exercise 1: MCTS planner\n","\n","* Plug together pre-built Selection, Expansion & Backpropagation code to complete an MCTS planner.\n","* Deploy the MCTS planner to understand an interesting position, producing value estimates and action counts."]},{"cell_type":"code","metadata":{"execution":{},"id":"BOLv_KmrXFdw","executionInfo":{"status":"aborted","timestamp":1629314856382,"user_tz":240,"elapsed":33,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class MCTS():\n","  \"\"\"\n","  This class handles the MCTS tree.\n","  \"\"\"\n","\n","  def __init__(self, game, nnet, args):\n","    self.game = game\n","    self.nnet = nnet\n","    self.args = args\n","    self.Qsa = {}    # stores Q values for s,a (as defined in the paper)\n","    self.Nsa = {}    # stores #times edge s,a was visited\n","    self.Ns = {}     # stores #times board s was visited\n","    self.Ps = {}     # stores initial policy (returned by neural net)\n","    self.Es = {}     # stores game.getGameEnded ended for board s\n","    self.Vs = {}     # stores game.getValidMoves for board s\n","\n","  def search(self, canonicalBoard):\n","    \"\"\"\n","    This function performs one iteration of MCTS. It is recursively called\n","    till a leaf node is found. The action chosen at each node is one that\n","    has the maximum upper confidence bound as in the paper.\n","\n","    Once a leaf node is found, the neural network is called to return an\n","    initial policy P and a value v for the state. This value is propagated\n","    up the search path. In case the leaf node is a terminal state, the\n","    outcome is propagated up the search path. The values of Ns, Nsa, Qsa are\n","    updated.\n","\n","    NOTE: the return values are the negative of the value of the current\n","    state. This is done since v is in [-1,1] and if v is the value of a\n","    state for the current player, then its value is -v for the other player.\n","\n","    Returns:\n","        v: the negative of the value of the current canonicalBoard\n","    \"\"\"\n","    s = self.game.stringRepresentation(canonicalBoard)\n","\n","    if s not in self.Es:\n","      self.Es[s] = self.game.getGameEnded(canonicalBoard, 1)\n","    if self.Es[s] != 0:\n","      # terminal node\n","      return -self.Es[s]\n","\n","    if s not in self.Ps:\n","      # leaf node\n","      self.Ps[s], v = self.nnet.predict(canonicalBoard)\n","      valids = self.game.getValidMoves(canonicalBoard, 1)\n","      self.Ps[s] = self.Ps[s] * valids  # masking invalid moves\n","      sum_Ps_s = np.sum(self.Ps[s])\n","      if sum_Ps_s > 0:\n","        self.Ps[s] /= sum_Ps_s  # renormalize\n","      else:\n","        # if all valid moves were masked make all valid moves equally probable\n","        # NB! All valid moves may be masked if either your NNet architecture is insufficient or you've get overfitting or something else.\n","        # If you have got dozens or hundreds of these messages you should pay attention to your NNet and/or training process.\n","        log = logging.getLogger(__name__)\n","        log.error(\"All valid moves were masked, doing a workaround.\")\n","        self.Ps[s] = self.Ps[s] + valids\n","        self.Ps[s] /= np.sum(self.Ps[s])\n","\n","      self.Vs[s] = valids\n","      self.Ns[s] = 0\n","\n","      return -v\n","\n","    valids = self.Vs[s]\n","    cur_best = -float('inf')\n","    best_act = -1\n","\n","    #################################################\n","    ## TODO for students:\n","    ## Implement the highest upper confidence bound depending whether we observed the state-action pair which is stored in self.Qsa[(s, a)]. You can find the formula in the slide 52 in video 8 above.\n","    # Fill out function and remove\n","    raise NotImplementedError(\"Complete the for loop\")\n","    #################################################\n","    # pick the action with the highest upper confidence bound\n","    for a in range(self.game.getActionSize()):\n","      if valids[a]:\n","        if (s, a) in self.Qsa:\n","          u = ... + ... * ... * math.sqrt(...) / (1 + ...)\n","        else:\n","          u = ... * ... * math.sqrt(... + 1e-8)\n","\n","        if u > cur_best:\n","          cur_best = u\n","          best_act = a\n","\n","    a = best_act\n","    next_s, next_player = self.game.getNextState(canonicalBoard, 1, a)\n","    next_s = self.game.getCanonicalForm(next_s, next_player)\n","\n","    v = self.search(next_s)\n","\n","    if (s, a) in self.Qsa:\n","      self.Qsa[(s, a)] = (self.Nsa[(s, a)] * self.Qsa[(s, a)] + v) / (self.Nsa[(s, a)] + 1)\n","      self.Nsa[(s, a)] += 1\n","\n","    else:\n","      self.Qsa[(s, a)] = v\n","      self.Nsa[(s, a)] = 1\n","\n","    self.Ns[s] += 1\n","    return -v\n","\n","  def getNsa(self):\n","    return self.Nsa"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Ey-iAmxvXFdx"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_83be26c4.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"9ihtX3J3XFdx"},"source":["---\n","# Bonus 2: Use MCTS to play games\n","\n","*Time estimate: ~10mins*\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"8Jh_tX--XFdy"},"source":["**Goal:** Teach the students how to use the results of an MCTS to play games.\n","\n","**Exercise:** \n","* Plug the MCTS planner into an agent.\n","* Play games against other agents.\n","* Explore the contributions of prior network, value function, number of simulations / time to play, and explore/exploit parameters."]},{"cell_type":"code","metadata":{"cellView":"form","execution":{},"id":"RMljbsw0XFdy","executionInfo":{"status":"aborted","timestamp":1629314856383,"user_tz":240,"elapsed":34,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# @title Video 11: Play with MCTS\n","from ipywidgets import widgets\n","\n","out2 = widgets.Output()\n","with out2:\n","  from IPython.display import IFrame\n","  class BiliVideo(IFrame):\n","    def __init__(self, id, page=1, width=400, height=300, **kwargs):\n","      self.id=id\n","      src = \"https://player.bilibili.com/player.html?bvid={0}&page={1}\".format(id, page)\n","      super(BiliVideo, self).__init__(src, width, height, **kwargs)\n","\n","  video = BiliVideo(id=f\"BV13q4y1H7H6\", width=854, height=480, fs=1)\n","  print(\"Video available at https://www.bilibili.com/video/{0}\".format(video.id))\n","  display(video)\n","\n","out1 = widgets.Output()\n","with out1:\n","  from IPython.display import YouTubeVideo\n","  video = YouTubeVideo(id=f\"1BRXb-igKAU\", width=854, height=480, fs=1, rel=0)\n","  print(\"Video available at https://youtube.com/watch?v=\" + video.id)\n","  display(video)\n","\n","out = widgets.Tab([out1, out2])\n","out.set_title(0, 'Youtube')\n","out.set_title(1, 'Bilibili')\n","\n","# add event to airtable\n","atform.add_event('Video 11: Play with MCTS')\n","\n","display(out)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"qYVrbSSmXFdz"},"source":["## Bonus Coding Exercise 2: Agent that uses an MCTS planner\n","\n","* Plug the MCTS planner into an agent.\n","* Play games against other agents.\n","* Explore the contributions of prior network, value function, number of simulations / time to play, and explore/exploit parameters."]},{"cell_type":"code","metadata":{"execution":{},"id":"LqWtW86KXFdz","executionInfo":{"status":"aborted","timestamp":1629314856383,"user_tz":240,"elapsed":33,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["# Load MCTS model from the repository\n","mcts_model_save_name = 'MCTS.pth.tar'\n","path = \"nma_rl_games/alpha-zero/pretrained_models/models/\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{},"id":"5nQEp3MnXFdz","executionInfo":{"status":"aborted","timestamp":1629314856384,"user_tz":240,"elapsed":34,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["class MonteCarloTreeSearchBasedPlayer():\n","  def __init__(self, game, nnet, args):\n","    self.game = game\n","    self.nnet = nnet\n","    self.args = args\n","    self.mcts = MCTS(game, nnet, args)\n","\n","\n","  def play(self, canonicalBoard, temp=1):\n","    for i in range(self.args.numMCTSSims):\n","\n","      #################################################\n","      ## TODO for students:\n","      #  Run MCTS search function.\n","      #  Fill out function and remove\n","      raise NotImplementedError(\"Plug the planner\")\n","      #################################################\n","      ...\n","\n","    s = self.game.stringRepresentation(canonicalBoard)\n","    #################################################\n","    ## TODO for students:\n","    #  Call the Nsa function from MCTS class and store it in the self.Nsa\n","    #  Fill out function and remove\n","    raise NotImplementedError(\"Compute Nsa (number of times edge s,a was visited)\")\n","    #################################################\n","    self.Nsa = ...\n","    self.counts = [self.Nsa[(s, a)] if (s, a) in self.Nsa else 0 for a in range(self.game.getActionSize())]\n","\n","    if temp == 0:\n","      bestAs = np.array(np.argwhere(self.counts == np.max(self.counts))).flatten()\n","      bestA = np.random.choice(bestAs)\n","      probs = [0] * len(self.counts)\n","      probs[bestA] = 1\n","      return probs\n","\n","    self.counts = [x ** (1. / temp) for x in self.counts]\n","    self.counts_sum = float(sum(self.counts))\n","    probs = [x / self.counts_sum for x in self.counts]\n","    return np.argmax(probs)\n","\n","  def getActionProb(self, canonicalBoard, temp=1):\n","    action_probs = np.zeros((self.game.getActionSize()))\n","    best_action = self.play(canonicalBoard)\n","    action_probs[best_action] = 1\n","\n","    return action_probs\n","\n","\n","set_seed(seed=SEED)\n","game = OthelloGame(6)\n","rp = RandomPlayer(game).play  # all players\n","num_games = 20  # games\n","n1 = NNet(game)  # nnet players\n","n1.load_checkpoint(folder=path, filename=mcts_model_save_name)\n","args1 = dotdict({'numMCTSSims': 50, 'cpuct':1.0})\n","\n","## Uncomment below to check your agent!\n","# print('\\n******MCTS player versus random player******')\n","# mcts1 = MonteCarloTreeSearchBasedPlayer(game, n1, args1)\n","# n1p = lambda x: np.argmax(mcts1.getActionProb(x, temp=0))\n","# arena = Arena.Arena(n1p, rp, game, display=OthelloGame.display)\n","# MCTS_result = arena.playGames(num_games, verbose=False)\n","# print(f\"\\n\\n{MCTS_result}\")\n","# print(f\"\\nNumber of games won by player1 = {MCTS_result[0]}, \"\n","#       f\"number of games won by player2 = {MCTS_result[1]}, out of {num_games} games\")\n","# win_rate_player1 = MCTS_result[0]/num_games\n","# print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"Z4Q87h4nXFdz"},"source":["[*Click for solution*](https://github.com/NeuromatchAcademy/course-content-dl/tree/main//tutorials/W3D3_ReinforcementLearningForGames/solutions/W3D3_Tutorial1_Solution_80778c6b.py)\n","\n"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ZKXFiaMLXFd0"},"source":["```\n","Number of games won by player1 = 19, num of games won by player2 = 1, out of 20 games\n","\n","Win rate for player1 over 20 games: 95.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"FNMFWZ6YXFd0"},"source":["### MCTS player against Value-based player"]},{"cell_type":"code","metadata":{"execution":{},"id":"33G6B3tLXFd1","executionInfo":{"status":"aborted","timestamp":1629314856385,"user_tz":240,"elapsed":35,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["print('\\n******MCTS player versus value-based player******')\n","set_seed(seed=SEED)\n","vp = ValueBasedPlayer(game, vnet).play  # value-based player\n","arena = Arena.Arena(n1p, vp, game, display=OthelloGame.display)\n","MC_result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{MC_result}\")\n","print(f\"\\nNumber of games won by player1 = {MC_result[0]}, \"\n","      f\"number of games won by player2 = {MC_result[1]}, out of {num_games} games\")\n","win_rate_player1 = MC_result[0]/num_games\n","print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"iHKxicMOXFd1"},"source":["```\n","Number of games won by player1 = 14, number of games won by player2 = 6, out of 20 games\n","\n","Win rate for player1 over 20 games: 70.0%\n","```"]},{"cell_type":"markdown","metadata":{"execution":{},"id":"1SYW7wTZXFd1"},"source":["### MCTS player against Policy-based player"]},{"cell_type":"code","metadata":{"execution":{},"id":"FUq6WOHlXFd1","executionInfo":{"status":"aborted","timestamp":1629314856386,"user_tz":240,"elapsed":36,"user":{"displayName":"Hanbin Go","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhC5t5b6EkSnIMGHnfaohFKKSF1f6SkqlSfPQedlg=s64","userId":"05183528869299188676"}}},"source":["print('\\n******MCTS player versus policy-based player******')\n","set_seed(seed=SEED)\n","pp = PolicyBasedPlayer(game, pnet).play  # policy-based player\n","arena = Arena.Arena(n1p, pp, game, display=OthelloGame.display)\n","MC_result = arena.playGames(num_games, verbose=False)\n","print(f\"\\n\\n{MC_result}\")\n","print(f\"\\nNumber of games won by player1 = {MC_result[0]}, \"\n","      f\"number of games won by player2 = {MC_result[1]}, out of {num_games} games\")\n","win_rate_player1 = MC_result[0]/num_games\n","print(f\"\\nWin rate for player1 over {num_games} games: {round(win_rate_player1*100, 1)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"execution":{},"id":"ReeIbU38XFd2"},"source":["```\n","Number of games won by player1 = 20, number of games won by player2 = 0, out of 20 games\n","\n","Win rate for player1 over 20 games: 100.0%\n","```"]}]}